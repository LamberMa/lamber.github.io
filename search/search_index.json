{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"mds/go/pkgs/flag/flag/","text":"\u5728golang\u4e2d\u6709\u5f88\u591a\u65b9\u5f0f\u6765\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u6bd4\u5982\u5e38\u89c1\u7684\u6709pflag\uff0ccobra\uff08Kubernetes\u4e2d\u7528\u5230\u4e86\u8be5\u5e93\uff09\u7b49\u3002\u5f53\u7136\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u7cfb\u7edf\u9ed8\u8ba4\u7684 os.Args \u3002\u4f46\u662f\u5728Go \u6807\u51c6\u5e93\u4e2d\u63d0\u4f9b\u4e86flag\u5e93\u53ef\u4ee5\u5b9e\u73b0\u8be5\u529f\u80fd\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u6765\u770b\u4e00\u4e0b\u3002","title":"2. Flag"},{"location":"mds/go/pkgs/zap/zap/","text":"\u4ecb\u7ecd \u00b6 \u5728\u8bb8\u591aGo\u8bed\u8a00\u9879\u76ee\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u597d\u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\u80fd\u591f\u63d0\u4f9b\u4e0b\u9762\u8fd9\u4e9b\u529f\u80fd\uff1a \u80fd\u591f\u5c06\u4e8b\u4ef6\u8bb0\u5f55\u5230\u6587\u4ef6\u4e2d\uff0c\u800c\u4e0d\u662f\u5e94\u7528\u7a0b\u5e8f\u63a7\u5236\u53f0\u3002 \u65e5\u5fd7\u5207\u5272-\u80fd\u591f\u6839\u636e\u6587\u4ef6\u5927\u5c0f\u3001\u65f6\u95f4\u6216\u95f4\u9694\u7b49\u6765\u5207\u5272\u65e5\u5fd7\u6587\u4ef6\u3002 \u652f\u6301\u4e0d\u540c\u7684\u65e5\u5fd7\u7ea7\u522b\u3002\u4f8b\u5982INFO\uff0cDEBUG\uff0cERROR\u7b49\u3002 \u80fd\u591f\u6253\u5370\u57fa\u672c\u4fe1\u606f\uff0c\u5982\u8c03\u7528\u6587\u4ef6/\u51fd\u6570\u540d\u548c\u884c\u53f7\uff0c\u65e5\u5fd7\u65f6\u95f4\u7b49\u3002 \u9ed8\u8ba4\u7684Go Logger \u00b6 \u5728\u4ecb\u7ecdUber-go\u7684zap\u5305\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u5148\u770b\u770bGo\u8bed\u8a00\u63d0\u4f9b\u7684\u57fa\u672c\u65e5\u5fd7\u529f\u80fd\u3002Go\u8bed\u8a00\u63d0\u4f9b\u7684\u9ed8\u8ba4\u65e5\u5fd7\u5305\u662f https://golang.org/pkg/log/ \u5b9e\u73b0GoLogger \u00b6 \u8bbe\u7f6eLogger \u00b6 \u5b9e\u73b0\u4e00\u4e2aGo\u8bed\u8a00\u4e2d\u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\u975e\u5e38\u7b80\u5355\u2014\u2014\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u65e5\u5fd7\u6587\u4ef6\uff0c\u7136\u540e\u8bbe\u7f6e\u5b83\u4e3a\u65e5\u5fd7\u7684\u8f93\u51fa\u4f4d\u7f6e\u3002 func SetupLogger () { logFileLocation , _ := os . OpenFile ( \"/Users/q1mi/test.log\" , os . O_CREATE | os . O_APPEND | os . O_RDWR , 0744 ) log . SetOutput ( logFileLocation ) } \u4f7f\u7528Logger \u00b6 \u8ba9\u6211\u4eec\u6765\u5199\u4e00\u4e9b\u865a\u62df\u7684\u4ee3\u7801\u6765\u4f7f\u7528\u8fd9\u4e2a\u65e5\u5fd7\u8bb0\u5f55\u5668\u3002 \u5728\u5f53\u524d\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u5efa\u7acb\u4e00\u4e2a\u5230URL\u7684HTTP\u8fde\u63a5\uff0c\u5e76\u5c06\u72b6\u6001\u4ee3\u7801/\u9519\u8bef\u8bb0\u5f55\u5230\u65e5\u5fd7\u6587\u4ef6\u4e2d\u3002 func simpleHttpGet ( url string ) { resp , err := http . Get ( url ) if err != nil { log . Printf ( \"Error fetching url %s : %s\" , url , err . Error ()) } else { log . Printf ( \"Status Code for %s : %s\" , url , resp . Status ) resp . Body . Close () } } logger\u7684\u8fd0\u884c \u00b6 \u73b0\u5728\u8ba9\u6211\u4eec\u6267\u884c\u4e0a\u9762\u7684\u4ee3\u7801\u5e76\u67e5\u770b\u65e5\u5fd7\u8bb0\u5f55\u5668\u7684\u8fd0\u884c\u60c5\u51b5\u3002 func main () { SetupLogger () simpleHttpGet ( \"www.google.com\" ) simpleHttpGet ( \"http://www.google.com\" ) } \u5f53\u6211\u4eec\u6267\u884c\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u80fd\u770b\u5230\u4e00\u4e2atest.log\u6587\u4ef6\u88ab\u521b\u5efa\uff0c\u4e0b\u9762\u7684\u5185\u5bb9\u4f1a\u88ab\u6dfb\u52a0\u5230\u8fd9\u4e2a\u65e5\u5fd7\u6587\u4ef6\u4e2d\u3002 2019 /05/24 01 :14:13 Error fetching url www.google.com : Get www.google.com: unsupported protocol scheme \"\" 2019 /05/24 01 :14:14 Status Code for http://www.google.com : 200 OK Go Logger\u7684\u4f18\u52bf\u548c\u52a3\u52bf \u00b6 \u4f18\u52bf \u5b83\u6700\u5927\u7684\u4f18\u70b9\u662f\u4f7f\u7528\u975e\u5e38\u7b80\u5355\u3002\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u4efb\u4f55io.Writer\u4f5c\u4e3a\u65e5\u5fd7\u8bb0\u5f55\u8f93\u51fa\u5e76\u5411\u5176\u53d1\u9001\u8981\u5199\u5165\u7684\u65e5\u5fd7\u3002 \u52a3\u52bf \u4ec5\u9650\u57fa\u672c\u7684\u65e5\u5fd7\u7ea7\u522b \u53ea\u6709\u4e00\u4e2aPrint\u9009\u9879\u3002\u4e0d\u652f\u6301INFO/DEBUG\u7b49\u591a\u4e2a\u7ea7\u522b\u3002 \u5bf9\u4e8e\u9519\u8bef\u65e5\u5fd7\uff0c\u5b83\u6709Fatal\u548cPanic Fatal\u65e5\u5fd7\u901a\u8fc7\u8c03\u7528os.Exit(1)\u6765\u7ed3\u675f\u7a0b\u5e8f Panic\u65e5\u5fd7\u5728\u5199\u5165\u65e5\u5fd7\u6d88\u606f\u4e4b\u540e\u629b\u51fa\u4e00\u4e2apanic \u4f46\u662f\u5b83\u7f3a\u5c11\u4e00\u4e2aERROR\u65e5\u5fd7\u7ea7\u522b\uff0c\u8fd9\u4e2a\u7ea7\u522b\u53ef\u4ee5\u5728\u4e0d\u629b\u51fapanic\u6216\u9000\u51fa\u7a0b\u5e8f\u7684\u60c5\u51b5\u4e0b\u8bb0\u5f55\u9519\u8bef \u7f3a\u4e4f\u65e5\u5fd7\u683c\u5f0f\u5316\u7684\u80fd\u529b\u2014\u2014\u4f8b\u5982\u8bb0\u5f55\u8c03\u7528\u8005\u7684\u51fd\u6570\u540d\u548c\u884c\u53f7\uff0c\u683c\u5f0f\u5316\u65e5\u671f\u548c\u65f6\u95f4\u683c\u5f0f\u3002\u7b49\u7b49\u3002 \u4e0d\u63d0\u4f9b\u65e5\u5fd7\u5207\u5272\u7684\u80fd\u529b\u3002 Uber Zap \u00b6 Zap\u662f\u975e\u5e38\u5feb\u7684\u3001\u7ed3\u6784\u5316\u7684\uff0c\u5206\u65e5\u5fd7\u7ea7\u522b\u7684Go\u65e5\u5fd7\u5e93\u3002 \u4e3a\u4ec0\u4e48\u9009\u62e9Uber-go zap \u00b6 \u5b83\u540c\u65f6\u63d0\u4f9b\u4e86\u7ed3\u6784\u5316\u65e5\u5fd7\u8bb0\u5f55\u548cprintf\u98ce\u683c\u7684\u65e5\u5fd7\u8bb0\u5f55 \u5b83\u975e\u5e38\u7684\u5feb \u6839\u636eUber-go Zap\u7684\u6587\u6863\uff0c\u5b83\u7684\u6027\u80fd\u6bd4\u7c7b\u4f3c\u7684\u7ed3\u6784\u5316\u65e5\u5fd7\u5305\u66f4\u597d\u2014\u2014\u4e5f\u6bd4\u6807\u51c6\u5e93\u66f4\u5feb\u3002 \u4ee5\u4e0b\u662fZap\u53d1\u5e03\u7684\u57fa\u51c6\u6d4b\u8bd5\u4fe1\u606f \u8bb0\u5f55\u4e00\u6761\u6d88\u606f\u548c10\u4e2a\u5b57\u6bb5: \u8bb0\u5f55\u4e00\u4e2a\u9759\u6001\u5b57\u7b26\u4e32\uff0c\u6ca1\u6709\u4efb\u4f55\u4e0a\u4e0b\u6587\u6216printf\u98ce\u683c\u7684\u6a21\u677f\uff1a \u5b89\u88c5 \u00b6 \u8fd0\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u5b89\u88c5zap go get -u go.uber.org/zap \u914d\u7f6eZap Logger \u00b6 Zap\u63d0\u4f9b\u4e86\u4e24\u79cd\u7c7b\u578b\u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\u2014Sugared Logger\u548cLogger\u3002 \u5728\u6027\u80fd\u5f88\u597d\u4f46\u4e0d\u662f\u5f88\u5173\u952e\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u4f7f\u7528SugaredLogger\u3002\u5b83\u6bd4\u5176\u4ed6\u7ed3\u6784\u5316\u65e5\u5fd7\u8bb0\u5f55\u5305\u5feb4-10\u500d\uff0c\u5e76\u4e14\u652f\u6301\u7ed3\u6784\u5316\u548cprintf\u98ce\u683c\u7684\u65e5\u5fd7\u8bb0\u5f55\u3002 \u5728\u6bcf\u4e00\u5fae\u79d2\u548c\u6bcf\u4e00\u6b21\u5185\u5b58\u5206\u914d\u90fd\u5f88\u91cd\u8981\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u4f7f\u7528Logger\u3002\u5b83\u751a\u81f3\u6bd4SugaredLogger\u66f4\u5feb\uff0c\u5185\u5b58\u5206\u914d\u6b21\u6570\u4e5f\u66f4\u5c11\uff0c\u4f46\u5b83\u53ea\u652f\u6301\u5f3a\u7c7b\u578b\u7684\u7ed3\u6784\u5316\u65e5\u5fd7\u8bb0\u5f55\u3002 Logger \u00b6 \u901a\u8fc7\u8c03\u7528 zap.NewProduction() / zap.NewDevelopment() \u6216\u8005 zap.Example() \u521b\u5efa\u4e00\u4e2aLogger\u3002 \u4e0a\u9762\u7684\u6bcf\u4e00\u4e2a\u51fd\u6570\u90fd\u5c06\u521b\u5efa\u4e00\u4e2alogger\u3002\u552f\u4e00\u7684\u533a\u522b\u5728\u4e8e\u5b83\u5c06\u8bb0\u5f55\u7684\u4fe1\u606f\u4e0d\u540c\u3002\u4f8b\u5982production logger\u9ed8\u8ba4\u8bb0\u5f55\u8c03\u7528\u51fd\u6570\u4fe1\u606f\u3001\u65e5\u671f\u548c\u65f6\u95f4\u7b49\u3002 \u901a\u8fc7Logger\u8c03\u7528Info/Error\u7b49\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u65e5\u5fd7\u90fd\u4f1a\u6253\u5370\u5230\u5e94\u7528\u7a0b\u5e8f\u7684console\u754c\u9762\u3002 \u6211\u4eec\u9996\u5148\u4f7f\u7528\u666e\u901a\u7684logger\u6765\u505a\u4e00\u4e2a\u7b80\u5355\u7684\u6d4b\u8bd5 package main import ( \"net/http\" \"go.uber.org/zap\" ) var logger * zap . Logger // InitProductionLogger ... func InitProductionLogger () { logger , _ = zap . NewProduction () } func simpleHTTPGet ( url string ) { resp , err := http . Get ( url ) if err != nil { logger . Error ( \"Error fetching url...\" , zap . String ( \"url\" , url ), zap . Error ( err ), ) } else { logger . Info ( \"Success...\" , zap . String ( \"statusCode\" , resp . Status ), zap . String ( \"url\" , url ), ) resp . Body . Close () } } func main () { InitProductionLogger () // \u5728\u7a0b\u5e8f\u9000\u51fa\u4e4b\u524d\uff0c\u628a\u7f13\u51b2\u533a\u7684\u65e5\u5fd7\u90fd\u5237\u5230\u78c1\u76d8\u91cc\u3002 defer logger . Sync () simpleHTTPGet ( \"http://www.baidu.com\" ) } \u6700\u540e\u6253\u5370\u51fa\u6765\u7684\u7ed3\u679c\u5982\u4e0b\uff1a [ root@xeq-vm-197-77-opsorder-test zap-demo ] # go run main.go { \"level\" : \"info\" , \"ts\" :1622196068.7713954, \"caller\" : \"zap-demo/main.go:25\" , \"msg\" : \"Success...\" , \"statusCode\" : \"200 OK\" , \"url\" : \"http://www.baidu.com\" } \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u521b\u5efa\u4e86\u4e00\u4e2aLogger\uff0c\u7136\u540e\u4f7f\u7528Info/ Error\u7b49Logger\u65b9\u6cd5\u8bb0\u5f55\u6d88\u606f\u3002\u65e5\u5fd7\u8bb0\u5f55\u5668\u7684\u8bed\u6cd5\u662f\u8fd9\u6837\u7684 func ( log * Logger ) MethodXXX ( msg string , fields ... Field ) \u8fd9\u4e2a MethodXXX \u53ef\u80fd\u662fInfo,Error,Debug,Panic\u7b49\u7b49\uff0c\u6bcf\u4e00\u4e2a\u65b9\u6cd5\u90fd\u63a5\u6536\u4e00\u4e2a\u6d88\u606f\u5b57\u7b26\u4e32\u8fd8\u6709\u4efb\u610f\u6570\u91cf\u7684 zapcore.Field \u53c2\u6570\uff0c\u4ee5Info\u7ea7\u522b\u7684\u65e5\u5fd7\u4e3a\u4f8b // Info logs a message at InfoLevel. The message includes any fields passed // at the log site, as well as any fields accumulated on the logger. func ( log * Logger ) Info ( msg string , fields ... Field ) { if ce := log . check ( InfoLevel , msg ); ce != nil { ce . Write ( fields ... ) } } SugarLogger \u00b6 SugarLogger\u7684\u8c03\u7528\u65b9\u5f0f\u548cLogger\u5927\u540c\u5c0f\u5f02\uff0c\u7a0d\u5fae\u6709\u4e00\u4e9b\u4e0d\u592a\u4e00\u6837\u7684\u5730\u65b9 \u5927\u90e8\u5206\u7684\u5b9e\u73b0\u57fa\u672c\u90fd\u76f8\u540c\u3002 \u60df\u4e00\u7684\u533a\u522b\u662f\uff0c\u6211\u4eec\u901a\u8fc7\u8c03\u7528\u4e3blogger\u7684. Sugar()\u65b9\u6cd5\u6765\u83b7\u53d6\u4e00\u4e2aSugaredLogger\u3002 \u7136\u540e\u4f7f\u7528SugaredLogger\u4ee5printf\u683c\u5f0f\u8bb0\u5f55\u8bed\u53e5 package main import ( \"net/http\" \"go.uber.org/zap\" ) var sugarlogger * zap . SugaredLogger // InitProductionSugarLogger ... func InitProductionSugarLogger () { logger , _ := zap . NewProduction () sugarlogger = logger . Sugar () } func simpleHTTPGet ( url string ) { sugarlogger . Debug ( \"Trying to hit Get request for %s\" ) resp , err := http . Get ( url ) if err != nil { sugarlogger . Error ( \"Error fetching url...\" , zap . String ( \"url\" , url ), zap . Error ( err ), ) } else { sugarlogger . Info ( \"Success...\" , zap . String ( \"statusCode\" , resp . Status ), zap . String ( \"url\" , url ), ) resp . Body . Close () } } func main () { InitProductionSugarLogger () // \u5728\u7a0b\u5e8f\u9000\u51fa\u4e4b\u524d\uff0c\u628a\u7f13\u51b2\u533a\u7684\u65e5\u5fd7\u90fd\u5237\u5230\u78c1\u76d8\u91cc\u3002 defer sugarlogger . Sync () simpleHTTPGet ( \"http://www.baidu.com\" ) } \u8f93\u51fa\u7684\u7ed3\u679c\u4e3a [ root@xeq-vm-197-77-opsorder-test zap-demo ] # go run main.go { \"level\" : \"info\" , \"ts\" :1622198680.0117903, \"caller\" : \"zap-demo/main.go:26\" , \"msg\" : \"Success...{statusCode 15 0 200 OK <nil>} {url 15 0 http://www.baidu.com <nil>}\" } \u521a\u624d\u7528\u7684\u662f zap.NewProduction \uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u7528\u4e00\u4e0bdevelop\u7684\u8bd5\u8bd5 // InitProductionSugarLogger ... func InitProductionSugarLogger () { logger , _ := zap . NewDevelopment () sugarlogger = logger . Sugar () } \u7136\u540e\u6211\u4eec\u518d\u770b\u4e00\u4e0b\u65e5\u5fd7\u7684\u6570\u636e [ root@xeq-vm-197-77-opsorder-test zap-demo ] # go run main.go 2021 -05-28T18:47:35.750+0800 DEBUG zap-demo/main.go:17 Trying to hit Get request for %s 2021 -05-28T18:47:35.941+0800 INFO zap-demo/main.go:26 Success... { statusCode 15 0 200 OK <nil> } { url 15 0 http://www.baidu.com <nil> } \u8fd9\u4e2a\u5c31\u662f\u5f00\u53d1\u73af\u5883\uff0c\u6bd4\u8f83\u9002\u5408\u5728\u7ec8\u7aef\u8f93\u51fa\u7684\u65e5\u5fd7\u4e86\u3002 \u5b9a\u5236Logger \u00b6 \u5c06\u65e5\u5fd7\u5199\u5165\u6587\u4ef6\u800c\u4e0d\u662f\u7ec8\u7aef \u00b6 \u6211\u4eec\u8981\u505a\u7684\u7b2c\u4e00\u4e2a\u66f4\u6539\u662f\u628a\u65e5\u5fd7\u5199\u5165\u6587\u4ef6\uff0c\u800c\u4e0d\u662f\u6253\u5370\u5230\u5e94\u7528\u7a0b\u5e8f\u63a7\u5236\u53f0\u3002 \u6211\u4eec\u5c06\u4f7f\u7528zap.New(\u2026)\u65b9\u6cd5\u6765\u624b\u52a8\u4f20\u9012\u6240\u6709\u914d\u7f6e\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u50cfzap.NewProduction()\u8fd9\u6837\u7684\u9884\u7f6e\u65b9\u6cd5\u6765\u521b\u5efalogger\u3002 func New ( core zapcore . Core , options ... Option ) * Logger zapcore.Core \u9700\u8981\u4e09\u4e2a\u914d\u7f6e\uff0c\u5206\u522b\u4e3a Encoder \uff0c WriteSyncer \uff0c LogLevel . 1\u3001Encoder \u7f16\u7801\u5668(\u5982\u4f55\u5199\u5165\u65e5\u5fd7)\u3002\u6211\u4eec\u5c06\u4f7f\u7528\u5f00\u7bb1\u5373\u7528\u7684NewJSONEncoder()\uff0c\u5e76\u4f7f\u7528\u9884\u5148\u8bbe\u7f6e\u7684ProductionEncoderConfig()\u3002 zapcore . NewJSONEncoder ( zap . NewProductionEncoderConfig ()) 2\u3001WriterSyncer \u6307\u5b9a\u65e5\u5fd7\u5c06\u5199\u5230\u54ea\u91cc\u53bb\u3002\u6211\u4eec\u4f7f\u7528zapcore.AddSync()\u51fd\u6570\u5e76\u4e14\u5c06\u6253\u5f00\u7684\u6587\u4ef6\u53e5\u67c4\u4f20\u8fdb\u53bb\u3002 file , _ := os . Create ( \"./test.log\" ) writeSyncer := zapcore . AddSync ( file ) 3\u3001log level \u54ea\u79cd\u7ea7\u522b\u7684\u65e5\u5fd7\u5c06\u88ab\u5199\u5165 \u90a3\u4e48\u91cd\u65b0\u6539\u9020\u8fc7\u540e\u7684\u4ee3\u7801\u5c31\u53d8\u6210\u4e86\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50 package main import ( \"net/http\" \"os\" \"go.uber.org/zap\" \"go.uber.org/zap/zapcore\" ) var sugarlogger * zap . SugaredLogger // InitLogger ... func InitLogger () { writeSyncer := getLogWriter () encoder := getEncoder () core := zapcore . NewCore ( encoder , writeSyncer , zapcore . DebugLevel ) logger := zap . New ( core ) sugarlogger = logger . Sugar () } func getLogWriter () zapcore . WriteSyncer { file , _ := os . Create ( \"./test.log\" ) return zapcore . AddSync ( file ) } func getEncoder () zapcore . Encoder { return zapcore . NewJSONEncoder ( zap . NewProductionEncoderConfig ()) } func simpleHTTPGet ( url string ) { sugarlogger . Debug ( \"Trying to hit Get request for %s\" ) resp , err := http . Get ( url ) if err != nil { sugarlogger . Error ( \"Error fetching url...\" , zap . String ( \"url\" , url ), zap . Error ( err ), ) } else { sugarlogger . Info ( \"Success...\" , zap . String ( \"statusCode\" , resp . Status ), zap . String ( \"url\" , url ), ) resp . Body . Close () } } func main () { InitLogger () // \u5728\u7a0b\u5e8f\u9000\u51fa\u4e4b\u524d\uff0c\u628a\u7f13\u51b2\u533a\u7684\u65e5\u5fd7\u90fd\u5237\u5230\u78c1\u76d8\u91cc\u3002 defer sugarlogger . Sync () simpleHTTPGet ( \"http://www.baidu.com\" ) } \u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u8fd0\u884c\u5b8c\u4e86\u4ee5\u540e\uff0c\u53d1\u73b0\u5176\u5b9e\u7ec8\u7aef\u4ec0\u4e48\u90fd\u6ca1\u6709\u8f93\u51fa\uff0c\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u540c\u7ea7\u76ee\u5f55\u4e0b\u591a\u51fa\u6765\u4e86\u4e00\u4e2atest.log\u7684\u6587\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u4e00\u4e0b [ root@xeq-vm-197-77-opsorder-test zap-demo ] # cat test.log { \"level\" : \"debug\" , \"ts\" :1622199436.791037, \"msg\" : \"Trying to hit Get request for %s\" } { \"level\" : \"info\" , \"ts\" :1622199436.990979, \"msg\" : \"Success...{statusCode 15 0 200 OK <nil>} {url 15 0 http://www.baidu.com <nil>}\" } \u4e0a\u9762\u6211\u4f7f\u7528\u4e86Debug\u7684level\uff0c\u5176\u5b9e\u8fd8\u6709\u5f88\u591alevel\uff0c\u8fd9\u4e9b\u90fd\u662f\u5e38\u91cf\u3002 type Level int8 const ( // DebugLevel logs are typically voluminous, and are usually disabled in // production. DebugLevel Level = iota - 1 // InfoLevel is the default logging priority. InfoLevel // WarnLevel logs are more important than Info, but don't need individual // human review. WarnLevel // ErrorLevel logs are high-priority. If an application is running smoothly, // it shouldn't generate any error-level logs. ErrorLevel // DPanicLevel logs are particularly important errors. In development the // logger panics after writing the message. DPanicLevel // PanicLevel logs a message, then panics. PanicLevel // FatalLevel logs a message, then calls os.Exit(1). FatalLevel _minLevel = DebugLevel _maxLevel = FatalLevel ) \u5c06JSON Encoder\u66f4\u6539\u4e3a\u666e\u901a\u7684Log Encoder \u00b6 \u73b0\u5728\uff0c\u6211\u4eec\u5e0c\u671b\u5c06\u7f16\u7801\u5668\u4ece JSON Encoder \u66f4\u6539\u4e3a\u666e\u901aEncoder\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5c06 NewJSONEncoder() \u66f4\u6539\u4e3a NewConsoleEncoder() \u3002 return zapcore . NewConsoleEncoder ( zap . NewProductionEncoderConfig ()) \u90a3\u4e48\u65e5\u5fd7\u7684\u7ed3\u679c\u5c31\u662f\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50 1 .6223397950440078e+09 debug Trying to hit Get request for %s 1 .6223397961095738e+09 error Error fetching url... { url 15 0 http://www.baidu.com <nil> } { error 26 0 Get \"http://www.baidu.com\" : dial tcp: lookup www.baidu.com on 8 .8.8.8:53: read udp 172 .18.196.77:40945->8.8.8.8:53: i/o timeout } \u6587\u4ef6\u7684\u8ffd\u52a0 \u00b6 \u6211\u4eec\u53d1\u73b0\u8bf4\u6bcf\u6b21\u6587\u4ef6\u90fd\u662f\u6e05\u7a7a\u91cd\u5199\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5230os\u5305\u7684\u4e00\u4e9b\u6587\u4ef6\u5c5e\u6027\uff0c\u7136\u540e\u8ba9\u6587\u4ef6\u53ef\u4ee5\u662f\u8ffd\u52a0\u7684\u3002 file , _ := os . OpenFile ( \"./test.log\" , os . O_CREATE | os . O_APPEND | os . O_RDWR , 0744 ) \u66f4\u6539\u65f6\u95f4\u7f16\u7801\u5e76\u6dfb\u52a0\u8c03\u7528\u8005\u8be6\u7ec6\u4fe1\u606f \u00b6 \u9274\u4e8e\u6211\u4eec\u5bf9\u914d\u7f6e\u6240\u505a\u7684\u66f4\u6539\uff0c\u6709\u4e0b\u9762\u4e24\u4e2a\u95ee\u9898\uff1a \u65f6\u95f4\u662f\u4ee5\u975e\u4eba\u7c7b\u53ef\u8bfb\u7684\u65b9\u5f0f\u5c55\u793a\uff0c\u4f8b\u59821.572161051846623e+09 \u8c03\u7528\u65b9\u51fd\u6570\u7684\u8be6\u7ec6\u4fe1\u606f\u6ca1\u6709\u663e\u793a\u5728\u65e5\u5fd7\u4e2d \u6211\u4eec\u8981\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u8986\u76d6\u9ed8\u8ba4\u7684 ProductionConfig() \uff0c\u5e76\u8fdb\u884c\u4ee5\u4e0b\u66f4\u6539: \u4fee\u6539\u65f6\u95f4\u7f16\u7801\u5668 \u5728\u65e5\u5fd7\u6587\u4ef6\u4e2d\u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u8bb0\u5f55\u65e5\u5fd7\u7ea7\u522b func getEncoder () zapcore . Encoder { encoderConfig := zap . NewProductionEncoderConfig () // \u8bbe\u7f6e\u65f6\u95f4\u683c\u5f0f\u4e3aISO8601\u7684\u4e00\u4e2a\u65f6\u95f4\u683c\u5f0f encoderConfig . EncodeTime = zapcore . ISO8601TimeEncoder // \u8bbe\u7f6e\u65e5\u5fd7\u7684\u7ea7\u522b\u4e3a\u7b54\u8c22 encoderConfig . EncodeLevel = zapcore . CapitalLevelEncoder return zapcore . NewConsoleEncoder ( encoderConfig ) } \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u4fee\u6539zap logger\u4ee3\u7801\uff0c\u6dfb\u52a0\u5c06\u8c03\u7528\u51fd\u6570\u4fe1\u606f\u8bb0\u5f55\u5230\u65e5\u5fd7\u4e2d\u7684\u529f\u80fd\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u5c06\u5728 zap.New(..) \u51fd\u6570\u4e2d\u6dfb\u52a0\u4e00\u4e2aOption\u3002 // addcaller\u5c31\u662f\u628a\u8c03\u7528\u51fd\u6570\u7684\u76f8\u5173\u4fe1\u606f\u6dfb\u52a0\u8fdb\u53bb\u3002 logger := zap . New ( core , zap . AddCaller ()) \u5f53\u4f7f\u7528\u8fd9\u4e9b\u4fee\u6539\u8fc7\u7684logger\u914d\u7f6e\u8c03\u7528\u4e0a\u8ff0\u90e8\u5206\u7684main()\u51fd\u6570\u65f6\uff0c\u4ee5\u4e0b\u8f93\u51fa\u5c06\u6253\u5370\u5728\u6587\u4ef6 test.log \u4e2d\uff0c\u90a3\u4e48\u8f93\u51fa\u7684\u7ed3\u679c\u5c31\u662f\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50\u7684\u3002 2021 -05-30T10:07:14.890+0800 DEBUG zap-demo/main.go:37 Trying to hit Get request for %s 2021 -05-30T10:07:15.066+0800 INFO zap-demo/main.go:46 Success... { statusCode 15 0 200 OK <nil> } { url 15 0 http://www.baidu.com <nil> } \u5176\u5b9e zap.NewProductionEncoderConfig \u5c31\u662f\u6784\u9020\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u90a3\u4e48\u5982\u679c\u77e5\u9053\u5b83\u662f\u6784\u9020\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u81ea\u5df1\u5176\u5b9e\u4e5f\u662f\u53ef\u4ee5\u5b9a\u5236\u7684\uff0c\u6bd4\u5982\u91cc\u9762\u7684timekey\uff0clevelkey\u7b49\u7b49\u4fe1\u606f\u3002 func NewProductionEncoderConfig () zapcore . EncoderConfig { return zapcore . EncoderConfig { TimeKey : \"ts\" , LevelKey : \"level\" , NameKey : \"logger\" , CallerKey : \"caller\" , FunctionKey : zapcore . OmitKey , MessageKey : \"msg\" , StacktraceKey : \"stacktrace\" , LineEnding : zapcore . DefaultLineEnding , EncodeLevel : zapcore . LowercaseLevelEncoder , EncodeTime : zapcore . EpochTimeEncoder , EncodeDuration : zapcore . SecondsDurationEncoder , EncodeCaller : zapcore . ShortCallerEncoder , } } \u90a3\u4e48\u5176\u5b9e\u6211\u4e0a\u9762\u7684getEncode\u4e5f\u53ef\u4ee5\u5199\u4e3a\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50\uff0c\u7136\u540e\u81ea\u5df1\u53bb\u5b9a\u5236\u4e00\u4e0b\u6211\u4eec\u7684\u65e5\u5fd7\u76f8\u5173\u7684\u4fe1\u606f\u3002 func getEncoder () zapcore . Encoder { encoderConfig := zapcore . EncoderConfig { TimeKey : \"ts\" , LevelKey : \"level\" , NameKey : \"logger\" , CallerKey : \"caller\" , FunctionKey : zapcore . OmitKey , MessageKey : \"msg\" , StacktraceKey : \"stacktrace\" , LineEnding : zapcore . DefaultLineEnding , EncodeLevel : zapcore . CapitalLevelEncoder , EncodeTime : zapcore . ISO8601TimeEncoder , EncodeDuration : zapcore . SecondsDurationEncoder , EncodeCaller : zapcore . ShortCallerEncoder , } return zapcore . NewConsoleEncoder ( encoderConfig ) } \u90a3\u4e48\u62d3\u5c55\u4e00\u4e0b\uff0c\u63a5\u4e0b\u6765\u6211\u65e2\u60f3\u8981\u5728\u6587\u4ef6\u4e2d\u5199\u5165\u53c8\u60f3\u5728\u7ec8\u7aef\u4e2d\u8f93\u51fa\u6539\u600e\u4e48\u529e\uff1f \u65e5\u5fd7\u7684\u5207\u5272\u5f52\u6863 \u00b6 \u9996\u5148Zap\u5e93\u5e76\u4e0d\u652f\u6301\u5f52\u6863\u548c\u5207\u5272\u65e5\u5fd7\u6587\u4ef6\uff0c\u56e0\u6b64\u9700\u8981\u4e00\u4e2a\u7b2c\u4e09\u65b9\u7684\u5e93\u6765\u5b9e\u73b0\uff0c\u5c31\u662f Lumberjack \uff0c\u8fd9\u4e2a\u4e0d\u652f\u6301\u6309\u7167\u65f6\u95f4\u8fdb\u884c\u5207\u5272\u6587\u4ef6\u3002\u5f53\u7136\u5982\u679c\u8bf4\u5728\u670d\u52a1\u5668\u4e0a\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528logrotate\uff0c\u8fd9\u6837\u5c31\u65e0\u6240\u8c13\u4e86\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4e0d\u7528\u8fd9\u4e2a\u5305\u3002 \u5b89\u88c5 \u00b6 go get - u github . com / natefinch / lumberjack zap logger\u4e2d\u52a0\u5165Lumberjack \u00b6 \u8981\u5728zap\u4e2d\u52a0\u5165Lumberjack\u652f\u6301\uff0c\u6211\u4eec\u9700\u8981\u4fee\u6539WriteSyncer\u4ee3\u7801\u3002\u6211\u4eec\u5c06\u6309\u7167\u4e0b\u9762\u7684\u4ee3\u7801\u4fee\u6539getLogWriter()\u51fd\u6570\uff1a func getLogWriter () zapcore . WriteSyncer { lumberJackLogger := & lumberjack . Logger { Filename : \"./test.log\" , MaxSize : 10 , MaxBackups : 5 , MaxAge : 30 , Compress : false , } return zapcore . AddSync ( lumberJackLogger ) } Lumberjack Logger\u91c7\u7528\u4ee5\u4e0b\u5c5e\u6027\u4f5c\u4e3a\u8f93\u5165: Filename: \u65e5\u5fd7\u6587\u4ef6\u7684\u4f4d\u7f6e MaxSize\uff1a\u5728\u8fdb\u884c\u5207\u5272\u4e4b\u524d\uff0c\u65e5\u5fd7\u6587\u4ef6\u7684\u6700\u5927\u5927\u5c0f\uff08\u4ee5MB\u4e3a\u5355\u4f4d\uff09 MaxBackups\uff1a\u4fdd\u7559\u65e7\u6587\u4ef6\u7684\u6700\u5927\u4e2a\u6570 MaxAges\uff1a\u4fdd\u7559\u65e7\u6587\u4ef6\u7684\u6700\u5927\u5929\u6570 Compress\uff1a\u662f\u5426\u538b\u7f29/\u5f52\u6863\u65e7\u6587\u4ef6 Zip with Gin \u00b6 Gin\u6846\u67b6\u4e2d\u7684\u9ed8\u8ba4\u4e2d\u95f4\u4ef6 \u00b6 \u9996\u5148\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u6700\u7b80\u5355\u7684gin\u9879\u76ee\uff1a func main () { r := gin . Default () r . GET ( \"/hello\" , func ( c * gin . Context ) { c . String ( \"hello liwenzhou.com!\" ) }) r . Run ( } \u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e00\u4e0b gin.Default() \u7684\u6e90\u7801\uff1a func Default () * Engine { debugPrintWARNINGDefault () engine := New () engine . Use ( Logger (), Recovery ()) return engine } \u4e5f\u5c31\u662f\u6211\u4eec\u5728\u4f7f\u7528 gin.Default() \u7684\u540c\u65f6\u662f\u7528\u5230\u4e86gin\u6846\u67b6\u5185\u7684\u4e24\u4e2a\u9ed8\u8ba4\u4e2d\u95f4\u4ef6 Logger() \u548c Recovery() \u3002 \u5176\u4e2d Logger() \u662f\u628agin\u6846\u67b6\u672c\u8eab\u7684\u65e5\u5fd7\u8f93\u51fa\u5230\u6807\u51c6\u8f93\u51fa\uff08\u6211\u4eec\u672c\u5730\u5f00\u53d1\u8c03\u8bd5\u65f6\u5728\u7ec8\u7aef\u8f93\u51fa\u7684\u90a3\u4e9b\u65e5\u5fd7\u5c31\u662f\u5b83\u7684\u529f\u52b3\uff09\uff0c\u800c Recovery() \u662f\u5728\u7a0b\u5e8f\u51fa\u73b0panic\u7684\u65f6\u5019\u6062\u590d\u73b0\u573a\u5e76\u5199\u5165500\u54cd\u5e94\u7684\u3002 \u57fa\u4e8ezap\u7684\u4e2d\u95f4\u4ef6 \u00b6 \u6211\u4eec\u53ef\u4ee5\u6a21\u4effLogger()\u548cRecovery()\u7684\u5b9e\u73b0\uff0c\u4f7f\u7528\u6211\u4eec\u7684\u65e5\u5fd7\u5e93\u6765\u63a5\u6536gin\u6846\u67b6\u9ed8\u8ba4\u8f93\u51fa\u7684\u65e5\u5fd7\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u91cd\u5199\u4e86\u8fd9\u4e24\u4e2a\u4e2d\u95f4\u4ef6\u7136\u540e\u8fdb\u884c\u4e86\u5e94\u7528\u3002 package main import ( \"net\" \"net/http\" \"net/http/httputil\" \"os\" \"runtime/debug\" \"strings\" \"time\" \"github.com/gin-gonic/gin\" \"github.com/natefinch/lumberjack\" \"go.uber.org/zap\" \"go.uber.org/zap/zapcore\" ) var sugarlogger * zap . SugaredLogger // InitLogger ... func InitLogger () { writeSyncer := getLogWriter () encoder := getEncoder () core := zapcore . NewCore ( encoder , writeSyncer , zapcore . DebugLevel ) logger := zap . New ( core , zap . AddCaller ()) sugarlogger = logger . Sugar () } func getLogWriter () zapcore . WriteSyncer { luberJackLogger := & lumberjack . Logger { Filename : \"./test.log\" , MaxSize : 10 , MaxBackups : 5 , MaxAge : 30 , Compress : false , } return zapcore . AddSync ( luberJackLogger ) } func getEncoder () zapcore . Encoder { encoderConfig := zapcore . EncoderConfig { TimeKey : \"ts\" , LevelKey : \"level\" , NameKey : \"logger\" , CallerKey : \"caller\" , FunctionKey : zapcore . OmitKey , MessageKey : \"msg\" , StacktraceKey : \"stacktrace\" , LineEnding : zapcore . DefaultLineEnding , EncodeLevel : zapcore . CapitalLevelEncoder , EncodeTime : zapcore . ISO8601TimeEncoder , EncodeDuration : zapcore . SecondsDurationEncoder , EncodeCaller : zapcore . ShortCallerEncoder , } return zapcore . NewJSONEncoder ( encoderConfig ) } // GinLogger \u63a5\u6536gin\u6846\u67b6\u9ed8\u8ba4\u7684\u65e5\u5fd7 func GinLogger ( logger * zap . SugaredLogger ) gin . HandlerFunc { return func ( c * gin . Context ) { start := time . Now () path := c . Request . URL . Path query := c . Request . URL . RawQuery c . Next () cost := time . Since ( start ) logger . Info ( path , zap . Int ( \"status\" , c . Writer . Status ()), zap . String ( \"method\" , c . Request . Method ), zap . String ( \"path\" , path ), zap . String ( \"query\" , query ), zap . String ( \"ip\" , c . ClientIP ()), zap . String ( \"user-agent\" , c . Request . UserAgent ()), zap . String ( \"errors\" , c . Errors . ByType ( gin . ErrorTypePrivate ). String ()), zap . Duration ( \"cost\" , cost ), ) } } // GinRecovery recover\u6389\u9879\u76ee\u53ef\u80fd\u51fa\u73b0\u7684panic func GinRecovery ( logger * zap . SugaredLogger , stack bool ) gin . HandlerFunc { return func ( c * gin . Context ) { defer func () { if err := recover (); err != nil { // Check for a broken connection, as it is not really a // condition that warrants a panic stack trace. var brokenPipe bool if ne , ok := err .( * net . OpError ); ok { if se , ok := ne . Err .( * os . SyscallError ); ok { if strings . Contains ( strings . ToLower ( se . Error ()), \"broken pipe\" ) || strings . Contains ( strings . ToLower ( se . Error ()), \"connection reset by peer\" ) { brokenPipe = true } } } httpRequest , _ := httputil . DumpRequest ( c . Request , false ) if brokenPipe { logger . Error ( c . Request . URL . Path , zap . Any ( \"error\" , err ), zap . String ( \"request\" , string ( httpRequest )), ) // If the connection is dead, we can't write a status to it. c . Error ( err .( error )) // nolint: errcheck c . Abort () return } if stack { logger . Error ( \"[Recovery from panic]\" , zap . Any ( \"error\" , err ), zap . String ( \"request\" , string ( httpRequest )), zap . String ( \"stack\" , string ( debug . Stack ())), ) } else { logger . Error ( \"[Recovery from panic]\" , zap . Any ( \"error\" , err ), zap . String ( \"request\" , string ( httpRequest )), ) } c . AbortWithStatus ( http . StatusInternalServerError ) } }() c . Next () } } func main () { InitLogger () r := gin . New () r . Use ( GinLogger ( sugarlogger ), GinRecovery ( sugarlogger , true )) r . GET ( \"/hello\" , func ( c * gin . Context ) { c . String ( http . StatusOK , \"hello world!\" ) }) r . Run ( \":10086\" ) } \u90a3\u4e48\u5728\u5b9e\u9645\u7684gin\u9879\u76ee\u4e2d\uff0c\u6211\u4eec\u5e94\u8be5\u628a\u4e0a\u9762\u7684\u903b\u8f91\u62bd\u8c61\u51fa\u6765\u4e00\u4e2alogger.go\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5177\u4f53\u7684\u914d\u7f6e\u6587\u4ef6\u5982\u4e0b \u53c2\u8003\u6587\u6863 \u00b6 \u5728Go\u8bed\u8a00\u9879\u76ee\u4e2d\u4f7f\u7528Zap\u65e5\u5fd7\u5e93","title":"1. Zap\u65e5\u5fd7"},{"location":"mds/go/pkgs/zap/zap/#_1","text":"\u5728\u8bb8\u591aGo\u8bed\u8a00\u9879\u76ee\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u597d\u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\u80fd\u591f\u63d0\u4f9b\u4e0b\u9762\u8fd9\u4e9b\u529f\u80fd\uff1a \u80fd\u591f\u5c06\u4e8b\u4ef6\u8bb0\u5f55\u5230\u6587\u4ef6\u4e2d\uff0c\u800c\u4e0d\u662f\u5e94\u7528\u7a0b\u5e8f\u63a7\u5236\u53f0\u3002 \u65e5\u5fd7\u5207\u5272-\u80fd\u591f\u6839\u636e\u6587\u4ef6\u5927\u5c0f\u3001\u65f6\u95f4\u6216\u95f4\u9694\u7b49\u6765\u5207\u5272\u65e5\u5fd7\u6587\u4ef6\u3002 \u652f\u6301\u4e0d\u540c\u7684\u65e5\u5fd7\u7ea7\u522b\u3002\u4f8b\u5982INFO\uff0cDEBUG\uff0cERROR\u7b49\u3002 \u80fd\u591f\u6253\u5370\u57fa\u672c\u4fe1\u606f\uff0c\u5982\u8c03\u7528\u6587\u4ef6/\u51fd\u6570\u540d\u548c\u884c\u53f7\uff0c\u65e5\u5fd7\u65f6\u95f4\u7b49\u3002","title":"\u4ecb\u7ecd"},{"location":"mds/go/pkgs/zap/zap/#go-logger","text":"\u5728\u4ecb\u7ecdUber-go\u7684zap\u5305\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u5148\u770b\u770bGo\u8bed\u8a00\u63d0\u4f9b\u7684\u57fa\u672c\u65e5\u5fd7\u529f\u80fd\u3002Go\u8bed\u8a00\u63d0\u4f9b\u7684\u9ed8\u8ba4\u65e5\u5fd7\u5305\u662f https://golang.org/pkg/log/","title":"\u9ed8\u8ba4\u7684Go Logger"},{"location":"mds/go/pkgs/zap/zap/#gologger","text":"","title":"\u5b9e\u73b0GoLogger"},{"location":"mds/go/pkgs/zap/zap/#logger","text":"\u5b9e\u73b0\u4e00\u4e2aGo\u8bed\u8a00\u4e2d\u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\u975e\u5e38\u7b80\u5355\u2014\u2014\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u65e5\u5fd7\u6587\u4ef6\uff0c\u7136\u540e\u8bbe\u7f6e\u5b83\u4e3a\u65e5\u5fd7\u7684\u8f93\u51fa\u4f4d\u7f6e\u3002 func SetupLogger () { logFileLocation , _ := os . OpenFile ( \"/Users/q1mi/test.log\" , os . O_CREATE | os . O_APPEND | os . O_RDWR , 0744 ) log . SetOutput ( logFileLocation ) }","title":"\u8bbe\u7f6eLogger"},{"location":"mds/go/pkgs/zap/zap/#logger_1","text":"\u8ba9\u6211\u4eec\u6765\u5199\u4e00\u4e9b\u865a\u62df\u7684\u4ee3\u7801\u6765\u4f7f\u7528\u8fd9\u4e2a\u65e5\u5fd7\u8bb0\u5f55\u5668\u3002 \u5728\u5f53\u524d\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u5efa\u7acb\u4e00\u4e2a\u5230URL\u7684HTTP\u8fde\u63a5\uff0c\u5e76\u5c06\u72b6\u6001\u4ee3\u7801/\u9519\u8bef\u8bb0\u5f55\u5230\u65e5\u5fd7\u6587\u4ef6\u4e2d\u3002 func simpleHttpGet ( url string ) { resp , err := http . Get ( url ) if err != nil { log . Printf ( \"Error fetching url %s : %s\" , url , err . Error ()) } else { log . Printf ( \"Status Code for %s : %s\" , url , resp . Status ) resp . Body . Close () } }","title":"\u4f7f\u7528Logger"},{"location":"mds/go/pkgs/zap/zap/#logger_2","text":"\u73b0\u5728\u8ba9\u6211\u4eec\u6267\u884c\u4e0a\u9762\u7684\u4ee3\u7801\u5e76\u67e5\u770b\u65e5\u5fd7\u8bb0\u5f55\u5668\u7684\u8fd0\u884c\u60c5\u51b5\u3002 func main () { SetupLogger () simpleHttpGet ( \"www.google.com\" ) simpleHttpGet ( \"http://www.google.com\" ) } \u5f53\u6211\u4eec\u6267\u884c\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u80fd\u770b\u5230\u4e00\u4e2atest.log\u6587\u4ef6\u88ab\u521b\u5efa\uff0c\u4e0b\u9762\u7684\u5185\u5bb9\u4f1a\u88ab\u6dfb\u52a0\u5230\u8fd9\u4e2a\u65e5\u5fd7\u6587\u4ef6\u4e2d\u3002 2019 /05/24 01 :14:13 Error fetching url www.google.com : Get www.google.com: unsupported protocol scheme \"\" 2019 /05/24 01 :14:14 Status Code for http://www.google.com : 200 OK","title":"logger\u7684\u8fd0\u884c"},{"location":"mds/go/pkgs/zap/zap/#go-logger_1","text":"\u4f18\u52bf \u5b83\u6700\u5927\u7684\u4f18\u70b9\u662f\u4f7f\u7528\u975e\u5e38\u7b80\u5355\u3002\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u4efb\u4f55io.Writer\u4f5c\u4e3a\u65e5\u5fd7\u8bb0\u5f55\u8f93\u51fa\u5e76\u5411\u5176\u53d1\u9001\u8981\u5199\u5165\u7684\u65e5\u5fd7\u3002 \u52a3\u52bf \u4ec5\u9650\u57fa\u672c\u7684\u65e5\u5fd7\u7ea7\u522b \u53ea\u6709\u4e00\u4e2aPrint\u9009\u9879\u3002\u4e0d\u652f\u6301INFO/DEBUG\u7b49\u591a\u4e2a\u7ea7\u522b\u3002 \u5bf9\u4e8e\u9519\u8bef\u65e5\u5fd7\uff0c\u5b83\u6709Fatal\u548cPanic Fatal\u65e5\u5fd7\u901a\u8fc7\u8c03\u7528os.Exit(1)\u6765\u7ed3\u675f\u7a0b\u5e8f Panic\u65e5\u5fd7\u5728\u5199\u5165\u65e5\u5fd7\u6d88\u606f\u4e4b\u540e\u629b\u51fa\u4e00\u4e2apanic \u4f46\u662f\u5b83\u7f3a\u5c11\u4e00\u4e2aERROR\u65e5\u5fd7\u7ea7\u522b\uff0c\u8fd9\u4e2a\u7ea7\u522b\u53ef\u4ee5\u5728\u4e0d\u629b\u51fapanic\u6216\u9000\u51fa\u7a0b\u5e8f\u7684\u60c5\u51b5\u4e0b\u8bb0\u5f55\u9519\u8bef \u7f3a\u4e4f\u65e5\u5fd7\u683c\u5f0f\u5316\u7684\u80fd\u529b\u2014\u2014\u4f8b\u5982\u8bb0\u5f55\u8c03\u7528\u8005\u7684\u51fd\u6570\u540d\u548c\u884c\u53f7\uff0c\u683c\u5f0f\u5316\u65e5\u671f\u548c\u65f6\u95f4\u683c\u5f0f\u3002\u7b49\u7b49\u3002 \u4e0d\u63d0\u4f9b\u65e5\u5fd7\u5207\u5272\u7684\u80fd\u529b\u3002","title":"Go Logger\u7684\u4f18\u52bf\u548c\u52a3\u52bf"},{"location":"mds/go/pkgs/zap/zap/#uber-zap","text":"Zap\u662f\u975e\u5e38\u5feb\u7684\u3001\u7ed3\u6784\u5316\u7684\uff0c\u5206\u65e5\u5fd7\u7ea7\u522b\u7684Go\u65e5\u5fd7\u5e93\u3002","title":"Uber Zap"},{"location":"mds/go/pkgs/zap/zap/#uber-go-zap","text":"\u5b83\u540c\u65f6\u63d0\u4f9b\u4e86\u7ed3\u6784\u5316\u65e5\u5fd7\u8bb0\u5f55\u548cprintf\u98ce\u683c\u7684\u65e5\u5fd7\u8bb0\u5f55 \u5b83\u975e\u5e38\u7684\u5feb \u6839\u636eUber-go Zap\u7684\u6587\u6863\uff0c\u5b83\u7684\u6027\u80fd\u6bd4\u7c7b\u4f3c\u7684\u7ed3\u6784\u5316\u65e5\u5fd7\u5305\u66f4\u597d\u2014\u2014\u4e5f\u6bd4\u6807\u51c6\u5e93\u66f4\u5feb\u3002 \u4ee5\u4e0b\u662fZap\u53d1\u5e03\u7684\u57fa\u51c6\u6d4b\u8bd5\u4fe1\u606f \u8bb0\u5f55\u4e00\u6761\u6d88\u606f\u548c10\u4e2a\u5b57\u6bb5: \u8bb0\u5f55\u4e00\u4e2a\u9759\u6001\u5b57\u7b26\u4e32\uff0c\u6ca1\u6709\u4efb\u4f55\u4e0a\u4e0b\u6587\u6216printf\u98ce\u683c\u7684\u6a21\u677f\uff1a","title":"\u4e3a\u4ec0\u4e48\u9009\u62e9Uber-go zap"},{"location":"mds/go/pkgs/zap/zap/#_2","text":"\u8fd0\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u5b89\u88c5zap go get -u go.uber.org/zap","title":"\u5b89\u88c5"},{"location":"mds/go/pkgs/zap/zap/#zap-logger","text":"Zap\u63d0\u4f9b\u4e86\u4e24\u79cd\u7c7b\u578b\u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\u2014Sugared Logger\u548cLogger\u3002 \u5728\u6027\u80fd\u5f88\u597d\u4f46\u4e0d\u662f\u5f88\u5173\u952e\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u4f7f\u7528SugaredLogger\u3002\u5b83\u6bd4\u5176\u4ed6\u7ed3\u6784\u5316\u65e5\u5fd7\u8bb0\u5f55\u5305\u5feb4-10\u500d\uff0c\u5e76\u4e14\u652f\u6301\u7ed3\u6784\u5316\u548cprintf\u98ce\u683c\u7684\u65e5\u5fd7\u8bb0\u5f55\u3002 \u5728\u6bcf\u4e00\u5fae\u79d2\u548c\u6bcf\u4e00\u6b21\u5185\u5b58\u5206\u914d\u90fd\u5f88\u91cd\u8981\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u4f7f\u7528Logger\u3002\u5b83\u751a\u81f3\u6bd4SugaredLogger\u66f4\u5feb\uff0c\u5185\u5b58\u5206\u914d\u6b21\u6570\u4e5f\u66f4\u5c11\uff0c\u4f46\u5b83\u53ea\u652f\u6301\u5f3a\u7c7b\u578b\u7684\u7ed3\u6784\u5316\u65e5\u5fd7\u8bb0\u5f55\u3002","title":"\u914d\u7f6eZap Logger"},{"location":"mds/go/pkgs/zap/zap/#logger_3","text":"\u901a\u8fc7\u8c03\u7528 zap.NewProduction() / zap.NewDevelopment() \u6216\u8005 zap.Example() \u521b\u5efa\u4e00\u4e2aLogger\u3002 \u4e0a\u9762\u7684\u6bcf\u4e00\u4e2a\u51fd\u6570\u90fd\u5c06\u521b\u5efa\u4e00\u4e2alogger\u3002\u552f\u4e00\u7684\u533a\u522b\u5728\u4e8e\u5b83\u5c06\u8bb0\u5f55\u7684\u4fe1\u606f\u4e0d\u540c\u3002\u4f8b\u5982production logger\u9ed8\u8ba4\u8bb0\u5f55\u8c03\u7528\u51fd\u6570\u4fe1\u606f\u3001\u65e5\u671f\u548c\u65f6\u95f4\u7b49\u3002 \u901a\u8fc7Logger\u8c03\u7528Info/Error\u7b49\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u65e5\u5fd7\u90fd\u4f1a\u6253\u5370\u5230\u5e94\u7528\u7a0b\u5e8f\u7684console\u754c\u9762\u3002 \u6211\u4eec\u9996\u5148\u4f7f\u7528\u666e\u901a\u7684logger\u6765\u505a\u4e00\u4e2a\u7b80\u5355\u7684\u6d4b\u8bd5 package main import ( \"net/http\" \"go.uber.org/zap\" ) var logger * zap . Logger // InitProductionLogger ... func InitProductionLogger () { logger , _ = zap . NewProduction () } func simpleHTTPGet ( url string ) { resp , err := http . Get ( url ) if err != nil { logger . Error ( \"Error fetching url...\" , zap . String ( \"url\" , url ), zap . Error ( err ), ) } else { logger . Info ( \"Success...\" , zap . String ( \"statusCode\" , resp . Status ), zap . String ( \"url\" , url ), ) resp . Body . Close () } } func main () { InitProductionLogger () // \u5728\u7a0b\u5e8f\u9000\u51fa\u4e4b\u524d\uff0c\u628a\u7f13\u51b2\u533a\u7684\u65e5\u5fd7\u90fd\u5237\u5230\u78c1\u76d8\u91cc\u3002 defer logger . Sync () simpleHTTPGet ( \"http://www.baidu.com\" ) } \u6700\u540e\u6253\u5370\u51fa\u6765\u7684\u7ed3\u679c\u5982\u4e0b\uff1a [ root@xeq-vm-197-77-opsorder-test zap-demo ] # go run main.go { \"level\" : \"info\" , \"ts\" :1622196068.7713954, \"caller\" : \"zap-demo/main.go:25\" , \"msg\" : \"Success...\" , \"statusCode\" : \"200 OK\" , \"url\" : \"http://www.baidu.com\" } \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u521b\u5efa\u4e86\u4e00\u4e2aLogger\uff0c\u7136\u540e\u4f7f\u7528Info/ Error\u7b49Logger\u65b9\u6cd5\u8bb0\u5f55\u6d88\u606f\u3002\u65e5\u5fd7\u8bb0\u5f55\u5668\u7684\u8bed\u6cd5\u662f\u8fd9\u6837\u7684 func ( log * Logger ) MethodXXX ( msg string , fields ... Field ) \u8fd9\u4e2a MethodXXX \u53ef\u80fd\u662fInfo,Error,Debug,Panic\u7b49\u7b49\uff0c\u6bcf\u4e00\u4e2a\u65b9\u6cd5\u90fd\u63a5\u6536\u4e00\u4e2a\u6d88\u606f\u5b57\u7b26\u4e32\u8fd8\u6709\u4efb\u610f\u6570\u91cf\u7684 zapcore.Field \u53c2\u6570\uff0c\u4ee5Info\u7ea7\u522b\u7684\u65e5\u5fd7\u4e3a\u4f8b // Info logs a message at InfoLevel. The message includes any fields passed // at the log site, as well as any fields accumulated on the logger. func ( log * Logger ) Info ( msg string , fields ... Field ) { if ce := log . check ( InfoLevel , msg ); ce != nil { ce . Write ( fields ... ) } }","title":"Logger"},{"location":"mds/go/pkgs/zap/zap/#sugarlogger","text":"SugarLogger\u7684\u8c03\u7528\u65b9\u5f0f\u548cLogger\u5927\u540c\u5c0f\u5f02\uff0c\u7a0d\u5fae\u6709\u4e00\u4e9b\u4e0d\u592a\u4e00\u6837\u7684\u5730\u65b9 \u5927\u90e8\u5206\u7684\u5b9e\u73b0\u57fa\u672c\u90fd\u76f8\u540c\u3002 \u60df\u4e00\u7684\u533a\u522b\u662f\uff0c\u6211\u4eec\u901a\u8fc7\u8c03\u7528\u4e3blogger\u7684. Sugar()\u65b9\u6cd5\u6765\u83b7\u53d6\u4e00\u4e2aSugaredLogger\u3002 \u7136\u540e\u4f7f\u7528SugaredLogger\u4ee5printf\u683c\u5f0f\u8bb0\u5f55\u8bed\u53e5 package main import ( \"net/http\" \"go.uber.org/zap\" ) var sugarlogger * zap . SugaredLogger // InitProductionSugarLogger ... func InitProductionSugarLogger () { logger , _ := zap . NewProduction () sugarlogger = logger . Sugar () } func simpleHTTPGet ( url string ) { sugarlogger . Debug ( \"Trying to hit Get request for %s\" ) resp , err := http . Get ( url ) if err != nil { sugarlogger . Error ( \"Error fetching url...\" , zap . String ( \"url\" , url ), zap . Error ( err ), ) } else { sugarlogger . Info ( \"Success...\" , zap . String ( \"statusCode\" , resp . Status ), zap . String ( \"url\" , url ), ) resp . Body . Close () } } func main () { InitProductionSugarLogger () // \u5728\u7a0b\u5e8f\u9000\u51fa\u4e4b\u524d\uff0c\u628a\u7f13\u51b2\u533a\u7684\u65e5\u5fd7\u90fd\u5237\u5230\u78c1\u76d8\u91cc\u3002 defer sugarlogger . Sync () simpleHTTPGet ( \"http://www.baidu.com\" ) } \u8f93\u51fa\u7684\u7ed3\u679c\u4e3a [ root@xeq-vm-197-77-opsorder-test zap-demo ] # go run main.go { \"level\" : \"info\" , \"ts\" :1622198680.0117903, \"caller\" : \"zap-demo/main.go:26\" , \"msg\" : \"Success...{statusCode 15 0 200 OK <nil>} {url 15 0 http://www.baidu.com <nil>}\" } \u521a\u624d\u7528\u7684\u662f zap.NewProduction \uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u7528\u4e00\u4e0bdevelop\u7684\u8bd5\u8bd5 // InitProductionSugarLogger ... func InitProductionSugarLogger () { logger , _ := zap . NewDevelopment () sugarlogger = logger . Sugar () } \u7136\u540e\u6211\u4eec\u518d\u770b\u4e00\u4e0b\u65e5\u5fd7\u7684\u6570\u636e [ root@xeq-vm-197-77-opsorder-test zap-demo ] # go run main.go 2021 -05-28T18:47:35.750+0800 DEBUG zap-demo/main.go:17 Trying to hit Get request for %s 2021 -05-28T18:47:35.941+0800 INFO zap-demo/main.go:26 Success... { statusCode 15 0 200 OK <nil> } { url 15 0 http://www.baidu.com <nil> } \u8fd9\u4e2a\u5c31\u662f\u5f00\u53d1\u73af\u5883\uff0c\u6bd4\u8f83\u9002\u5408\u5728\u7ec8\u7aef\u8f93\u51fa\u7684\u65e5\u5fd7\u4e86\u3002","title":"SugarLogger"},{"location":"mds/go/pkgs/zap/zap/#logger_4","text":"","title":"\u5b9a\u5236Logger"},{"location":"mds/go/pkgs/zap/zap/#_3","text":"\u6211\u4eec\u8981\u505a\u7684\u7b2c\u4e00\u4e2a\u66f4\u6539\u662f\u628a\u65e5\u5fd7\u5199\u5165\u6587\u4ef6\uff0c\u800c\u4e0d\u662f\u6253\u5370\u5230\u5e94\u7528\u7a0b\u5e8f\u63a7\u5236\u53f0\u3002 \u6211\u4eec\u5c06\u4f7f\u7528zap.New(\u2026)\u65b9\u6cd5\u6765\u624b\u52a8\u4f20\u9012\u6240\u6709\u914d\u7f6e\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u50cfzap.NewProduction()\u8fd9\u6837\u7684\u9884\u7f6e\u65b9\u6cd5\u6765\u521b\u5efalogger\u3002 func New ( core zapcore . Core , options ... Option ) * Logger zapcore.Core \u9700\u8981\u4e09\u4e2a\u914d\u7f6e\uff0c\u5206\u522b\u4e3a Encoder \uff0c WriteSyncer \uff0c LogLevel . 1\u3001Encoder \u7f16\u7801\u5668(\u5982\u4f55\u5199\u5165\u65e5\u5fd7)\u3002\u6211\u4eec\u5c06\u4f7f\u7528\u5f00\u7bb1\u5373\u7528\u7684NewJSONEncoder()\uff0c\u5e76\u4f7f\u7528\u9884\u5148\u8bbe\u7f6e\u7684ProductionEncoderConfig()\u3002 zapcore . NewJSONEncoder ( zap . NewProductionEncoderConfig ()) 2\u3001WriterSyncer \u6307\u5b9a\u65e5\u5fd7\u5c06\u5199\u5230\u54ea\u91cc\u53bb\u3002\u6211\u4eec\u4f7f\u7528zapcore.AddSync()\u51fd\u6570\u5e76\u4e14\u5c06\u6253\u5f00\u7684\u6587\u4ef6\u53e5\u67c4\u4f20\u8fdb\u53bb\u3002 file , _ := os . Create ( \"./test.log\" ) writeSyncer := zapcore . AddSync ( file ) 3\u3001log level \u54ea\u79cd\u7ea7\u522b\u7684\u65e5\u5fd7\u5c06\u88ab\u5199\u5165 \u90a3\u4e48\u91cd\u65b0\u6539\u9020\u8fc7\u540e\u7684\u4ee3\u7801\u5c31\u53d8\u6210\u4e86\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50 package main import ( \"net/http\" \"os\" \"go.uber.org/zap\" \"go.uber.org/zap/zapcore\" ) var sugarlogger * zap . SugaredLogger // InitLogger ... func InitLogger () { writeSyncer := getLogWriter () encoder := getEncoder () core := zapcore . NewCore ( encoder , writeSyncer , zapcore . DebugLevel ) logger := zap . New ( core ) sugarlogger = logger . Sugar () } func getLogWriter () zapcore . WriteSyncer { file , _ := os . Create ( \"./test.log\" ) return zapcore . AddSync ( file ) } func getEncoder () zapcore . Encoder { return zapcore . NewJSONEncoder ( zap . NewProductionEncoderConfig ()) } func simpleHTTPGet ( url string ) { sugarlogger . Debug ( \"Trying to hit Get request for %s\" ) resp , err := http . Get ( url ) if err != nil { sugarlogger . Error ( \"Error fetching url...\" , zap . String ( \"url\" , url ), zap . Error ( err ), ) } else { sugarlogger . Info ( \"Success...\" , zap . String ( \"statusCode\" , resp . Status ), zap . String ( \"url\" , url ), ) resp . Body . Close () } } func main () { InitLogger () // \u5728\u7a0b\u5e8f\u9000\u51fa\u4e4b\u524d\uff0c\u628a\u7f13\u51b2\u533a\u7684\u65e5\u5fd7\u90fd\u5237\u5230\u78c1\u76d8\u91cc\u3002 defer sugarlogger . Sync () simpleHTTPGet ( \"http://www.baidu.com\" ) } \u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u8fd0\u884c\u5b8c\u4e86\u4ee5\u540e\uff0c\u53d1\u73b0\u5176\u5b9e\u7ec8\u7aef\u4ec0\u4e48\u90fd\u6ca1\u6709\u8f93\u51fa\uff0c\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u540c\u7ea7\u76ee\u5f55\u4e0b\u591a\u51fa\u6765\u4e86\u4e00\u4e2atest.log\u7684\u6587\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u4e00\u4e0b [ root@xeq-vm-197-77-opsorder-test zap-demo ] # cat test.log { \"level\" : \"debug\" , \"ts\" :1622199436.791037, \"msg\" : \"Trying to hit Get request for %s\" } { \"level\" : \"info\" , \"ts\" :1622199436.990979, \"msg\" : \"Success...{statusCode 15 0 200 OK <nil>} {url 15 0 http://www.baidu.com <nil>}\" } \u4e0a\u9762\u6211\u4f7f\u7528\u4e86Debug\u7684level\uff0c\u5176\u5b9e\u8fd8\u6709\u5f88\u591alevel\uff0c\u8fd9\u4e9b\u90fd\u662f\u5e38\u91cf\u3002 type Level int8 const ( // DebugLevel logs are typically voluminous, and are usually disabled in // production. DebugLevel Level = iota - 1 // InfoLevel is the default logging priority. InfoLevel // WarnLevel logs are more important than Info, but don't need individual // human review. WarnLevel // ErrorLevel logs are high-priority. If an application is running smoothly, // it shouldn't generate any error-level logs. ErrorLevel // DPanicLevel logs are particularly important errors. In development the // logger panics after writing the message. DPanicLevel // PanicLevel logs a message, then panics. PanicLevel // FatalLevel logs a message, then calls os.Exit(1). FatalLevel _minLevel = DebugLevel _maxLevel = FatalLevel )","title":"\u5c06\u65e5\u5fd7\u5199\u5165\u6587\u4ef6\u800c\u4e0d\u662f\u7ec8\u7aef"},{"location":"mds/go/pkgs/zap/zap/#json-encoderlog-encoder","text":"\u73b0\u5728\uff0c\u6211\u4eec\u5e0c\u671b\u5c06\u7f16\u7801\u5668\u4ece JSON Encoder \u66f4\u6539\u4e3a\u666e\u901aEncoder\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5c06 NewJSONEncoder() \u66f4\u6539\u4e3a NewConsoleEncoder() \u3002 return zapcore . NewConsoleEncoder ( zap . NewProductionEncoderConfig ()) \u90a3\u4e48\u65e5\u5fd7\u7684\u7ed3\u679c\u5c31\u662f\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50 1 .6223397950440078e+09 debug Trying to hit Get request for %s 1 .6223397961095738e+09 error Error fetching url... { url 15 0 http://www.baidu.com <nil> } { error 26 0 Get \"http://www.baidu.com\" : dial tcp: lookup www.baidu.com on 8 .8.8.8:53: read udp 172 .18.196.77:40945->8.8.8.8:53: i/o timeout }","title":"\u5c06JSON Encoder\u66f4\u6539\u4e3a\u666e\u901a\u7684Log Encoder"},{"location":"mds/go/pkgs/zap/zap/#_4","text":"\u6211\u4eec\u53d1\u73b0\u8bf4\u6bcf\u6b21\u6587\u4ef6\u90fd\u662f\u6e05\u7a7a\u91cd\u5199\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5230os\u5305\u7684\u4e00\u4e9b\u6587\u4ef6\u5c5e\u6027\uff0c\u7136\u540e\u8ba9\u6587\u4ef6\u53ef\u4ee5\u662f\u8ffd\u52a0\u7684\u3002 file , _ := os . OpenFile ( \"./test.log\" , os . O_CREATE | os . O_APPEND | os . O_RDWR , 0744 )","title":"\u6587\u4ef6\u7684\u8ffd\u52a0"},{"location":"mds/go/pkgs/zap/zap/#_5","text":"\u9274\u4e8e\u6211\u4eec\u5bf9\u914d\u7f6e\u6240\u505a\u7684\u66f4\u6539\uff0c\u6709\u4e0b\u9762\u4e24\u4e2a\u95ee\u9898\uff1a \u65f6\u95f4\u662f\u4ee5\u975e\u4eba\u7c7b\u53ef\u8bfb\u7684\u65b9\u5f0f\u5c55\u793a\uff0c\u4f8b\u59821.572161051846623e+09 \u8c03\u7528\u65b9\u51fd\u6570\u7684\u8be6\u7ec6\u4fe1\u606f\u6ca1\u6709\u663e\u793a\u5728\u65e5\u5fd7\u4e2d \u6211\u4eec\u8981\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u8986\u76d6\u9ed8\u8ba4\u7684 ProductionConfig() \uff0c\u5e76\u8fdb\u884c\u4ee5\u4e0b\u66f4\u6539: \u4fee\u6539\u65f6\u95f4\u7f16\u7801\u5668 \u5728\u65e5\u5fd7\u6587\u4ef6\u4e2d\u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u8bb0\u5f55\u65e5\u5fd7\u7ea7\u522b func getEncoder () zapcore . Encoder { encoderConfig := zap . NewProductionEncoderConfig () // \u8bbe\u7f6e\u65f6\u95f4\u683c\u5f0f\u4e3aISO8601\u7684\u4e00\u4e2a\u65f6\u95f4\u683c\u5f0f encoderConfig . EncodeTime = zapcore . ISO8601TimeEncoder // \u8bbe\u7f6e\u65e5\u5fd7\u7684\u7ea7\u522b\u4e3a\u7b54\u8c22 encoderConfig . EncodeLevel = zapcore . CapitalLevelEncoder return zapcore . NewConsoleEncoder ( encoderConfig ) } \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u4fee\u6539zap logger\u4ee3\u7801\uff0c\u6dfb\u52a0\u5c06\u8c03\u7528\u51fd\u6570\u4fe1\u606f\u8bb0\u5f55\u5230\u65e5\u5fd7\u4e2d\u7684\u529f\u80fd\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u5c06\u5728 zap.New(..) \u51fd\u6570\u4e2d\u6dfb\u52a0\u4e00\u4e2aOption\u3002 // addcaller\u5c31\u662f\u628a\u8c03\u7528\u51fd\u6570\u7684\u76f8\u5173\u4fe1\u606f\u6dfb\u52a0\u8fdb\u53bb\u3002 logger := zap . New ( core , zap . AddCaller ()) \u5f53\u4f7f\u7528\u8fd9\u4e9b\u4fee\u6539\u8fc7\u7684logger\u914d\u7f6e\u8c03\u7528\u4e0a\u8ff0\u90e8\u5206\u7684main()\u51fd\u6570\u65f6\uff0c\u4ee5\u4e0b\u8f93\u51fa\u5c06\u6253\u5370\u5728\u6587\u4ef6 test.log \u4e2d\uff0c\u90a3\u4e48\u8f93\u51fa\u7684\u7ed3\u679c\u5c31\u662f\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50\u7684\u3002 2021 -05-30T10:07:14.890+0800 DEBUG zap-demo/main.go:37 Trying to hit Get request for %s 2021 -05-30T10:07:15.066+0800 INFO zap-demo/main.go:46 Success... { statusCode 15 0 200 OK <nil> } { url 15 0 http://www.baidu.com <nil> } \u5176\u5b9e zap.NewProductionEncoderConfig \u5c31\u662f\u6784\u9020\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u90a3\u4e48\u5982\u679c\u77e5\u9053\u5b83\u662f\u6784\u9020\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u81ea\u5df1\u5176\u5b9e\u4e5f\u662f\u53ef\u4ee5\u5b9a\u5236\u7684\uff0c\u6bd4\u5982\u91cc\u9762\u7684timekey\uff0clevelkey\u7b49\u7b49\u4fe1\u606f\u3002 func NewProductionEncoderConfig () zapcore . EncoderConfig { return zapcore . EncoderConfig { TimeKey : \"ts\" , LevelKey : \"level\" , NameKey : \"logger\" , CallerKey : \"caller\" , FunctionKey : zapcore . OmitKey , MessageKey : \"msg\" , StacktraceKey : \"stacktrace\" , LineEnding : zapcore . DefaultLineEnding , EncodeLevel : zapcore . LowercaseLevelEncoder , EncodeTime : zapcore . EpochTimeEncoder , EncodeDuration : zapcore . SecondsDurationEncoder , EncodeCaller : zapcore . ShortCallerEncoder , } } \u90a3\u4e48\u5176\u5b9e\u6211\u4e0a\u9762\u7684getEncode\u4e5f\u53ef\u4ee5\u5199\u4e3a\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50\uff0c\u7136\u540e\u81ea\u5df1\u53bb\u5b9a\u5236\u4e00\u4e0b\u6211\u4eec\u7684\u65e5\u5fd7\u76f8\u5173\u7684\u4fe1\u606f\u3002 func getEncoder () zapcore . Encoder { encoderConfig := zapcore . EncoderConfig { TimeKey : \"ts\" , LevelKey : \"level\" , NameKey : \"logger\" , CallerKey : \"caller\" , FunctionKey : zapcore . OmitKey , MessageKey : \"msg\" , StacktraceKey : \"stacktrace\" , LineEnding : zapcore . DefaultLineEnding , EncodeLevel : zapcore . CapitalLevelEncoder , EncodeTime : zapcore . ISO8601TimeEncoder , EncodeDuration : zapcore . SecondsDurationEncoder , EncodeCaller : zapcore . ShortCallerEncoder , } return zapcore . NewConsoleEncoder ( encoderConfig ) } \u90a3\u4e48\u62d3\u5c55\u4e00\u4e0b\uff0c\u63a5\u4e0b\u6765\u6211\u65e2\u60f3\u8981\u5728\u6587\u4ef6\u4e2d\u5199\u5165\u53c8\u60f3\u5728\u7ec8\u7aef\u4e2d\u8f93\u51fa\u6539\u600e\u4e48\u529e\uff1f","title":"\u66f4\u6539\u65f6\u95f4\u7f16\u7801\u5e76\u6dfb\u52a0\u8c03\u7528\u8005\u8be6\u7ec6\u4fe1\u606f"},{"location":"mds/go/pkgs/zap/zap/#_6","text":"\u9996\u5148Zap\u5e93\u5e76\u4e0d\u652f\u6301\u5f52\u6863\u548c\u5207\u5272\u65e5\u5fd7\u6587\u4ef6\uff0c\u56e0\u6b64\u9700\u8981\u4e00\u4e2a\u7b2c\u4e09\u65b9\u7684\u5e93\u6765\u5b9e\u73b0\uff0c\u5c31\u662f Lumberjack \uff0c\u8fd9\u4e2a\u4e0d\u652f\u6301\u6309\u7167\u65f6\u95f4\u8fdb\u884c\u5207\u5272\u6587\u4ef6\u3002\u5f53\u7136\u5982\u679c\u8bf4\u5728\u670d\u52a1\u5668\u4e0a\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528logrotate\uff0c\u8fd9\u6837\u5c31\u65e0\u6240\u8c13\u4e86\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4e0d\u7528\u8fd9\u4e2a\u5305\u3002","title":"\u65e5\u5fd7\u7684\u5207\u5272\u5f52\u6863"},{"location":"mds/go/pkgs/zap/zap/#_7","text":"go get - u github . com / natefinch / lumberjack","title":"\u5b89\u88c5"},{"location":"mds/go/pkgs/zap/zap/#zap-loggerlumberjack","text":"\u8981\u5728zap\u4e2d\u52a0\u5165Lumberjack\u652f\u6301\uff0c\u6211\u4eec\u9700\u8981\u4fee\u6539WriteSyncer\u4ee3\u7801\u3002\u6211\u4eec\u5c06\u6309\u7167\u4e0b\u9762\u7684\u4ee3\u7801\u4fee\u6539getLogWriter()\u51fd\u6570\uff1a func getLogWriter () zapcore . WriteSyncer { lumberJackLogger := & lumberjack . Logger { Filename : \"./test.log\" , MaxSize : 10 , MaxBackups : 5 , MaxAge : 30 , Compress : false , } return zapcore . AddSync ( lumberJackLogger ) } Lumberjack Logger\u91c7\u7528\u4ee5\u4e0b\u5c5e\u6027\u4f5c\u4e3a\u8f93\u5165: Filename: \u65e5\u5fd7\u6587\u4ef6\u7684\u4f4d\u7f6e MaxSize\uff1a\u5728\u8fdb\u884c\u5207\u5272\u4e4b\u524d\uff0c\u65e5\u5fd7\u6587\u4ef6\u7684\u6700\u5927\u5927\u5c0f\uff08\u4ee5MB\u4e3a\u5355\u4f4d\uff09 MaxBackups\uff1a\u4fdd\u7559\u65e7\u6587\u4ef6\u7684\u6700\u5927\u4e2a\u6570 MaxAges\uff1a\u4fdd\u7559\u65e7\u6587\u4ef6\u7684\u6700\u5927\u5929\u6570 Compress\uff1a\u662f\u5426\u538b\u7f29/\u5f52\u6863\u65e7\u6587\u4ef6","title":"zap logger\u4e2d\u52a0\u5165Lumberjack"},{"location":"mds/go/pkgs/zap/zap/#zip-with-gin","text":"","title":"Zip with Gin"},{"location":"mds/go/pkgs/zap/zap/#gin","text":"\u9996\u5148\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u6700\u7b80\u5355\u7684gin\u9879\u76ee\uff1a func main () { r := gin . Default () r . GET ( \"/hello\" , func ( c * gin . Context ) { c . String ( \"hello liwenzhou.com!\" ) }) r . Run ( } \u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e00\u4e0b gin.Default() \u7684\u6e90\u7801\uff1a func Default () * Engine { debugPrintWARNINGDefault () engine := New () engine . Use ( Logger (), Recovery ()) return engine } \u4e5f\u5c31\u662f\u6211\u4eec\u5728\u4f7f\u7528 gin.Default() \u7684\u540c\u65f6\u662f\u7528\u5230\u4e86gin\u6846\u67b6\u5185\u7684\u4e24\u4e2a\u9ed8\u8ba4\u4e2d\u95f4\u4ef6 Logger() \u548c Recovery() \u3002 \u5176\u4e2d Logger() \u662f\u628agin\u6846\u67b6\u672c\u8eab\u7684\u65e5\u5fd7\u8f93\u51fa\u5230\u6807\u51c6\u8f93\u51fa\uff08\u6211\u4eec\u672c\u5730\u5f00\u53d1\u8c03\u8bd5\u65f6\u5728\u7ec8\u7aef\u8f93\u51fa\u7684\u90a3\u4e9b\u65e5\u5fd7\u5c31\u662f\u5b83\u7684\u529f\u52b3\uff09\uff0c\u800c Recovery() \u662f\u5728\u7a0b\u5e8f\u51fa\u73b0panic\u7684\u65f6\u5019\u6062\u590d\u73b0\u573a\u5e76\u5199\u5165500\u54cd\u5e94\u7684\u3002","title":"Gin\u6846\u67b6\u4e2d\u7684\u9ed8\u8ba4\u4e2d\u95f4\u4ef6"},{"location":"mds/go/pkgs/zap/zap/#zap","text":"\u6211\u4eec\u53ef\u4ee5\u6a21\u4effLogger()\u548cRecovery()\u7684\u5b9e\u73b0\uff0c\u4f7f\u7528\u6211\u4eec\u7684\u65e5\u5fd7\u5e93\u6765\u63a5\u6536gin\u6846\u67b6\u9ed8\u8ba4\u8f93\u51fa\u7684\u65e5\u5fd7\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u91cd\u5199\u4e86\u8fd9\u4e24\u4e2a\u4e2d\u95f4\u4ef6\u7136\u540e\u8fdb\u884c\u4e86\u5e94\u7528\u3002 package main import ( \"net\" \"net/http\" \"net/http/httputil\" \"os\" \"runtime/debug\" \"strings\" \"time\" \"github.com/gin-gonic/gin\" \"github.com/natefinch/lumberjack\" \"go.uber.org/zap\" \"go.uber.org/zap/zapcore\" ) var sugarlogger * zap . SugaredLogger // InitLogger ... func InitLogger () { writeSyncer := getLogWriter () encoder := getEncoder () core := zapcore . NewCore ( encoder , writeSyncer , zapcore . DebugLevel ) logger := zap . New ( core , zap . AddCaller ()) sugarlogger = logger . Sugar () } func getLogWriter () zapcore . WriteSyncer { luberJackLogger := & lumberjack . Logger { Filename : \"./test.log\" , MaxSize : 10 , MaxBackups : 5 , MaxAge : 30 , Compress : false , } return zapcore . AddSync ( luberJackLogger ) } func getEncoder () zapcore . Encoder { encoderConfig := zapcore . EncoderConfig { TimeKey : \"ts\" , LevelKey : \"level\" , NameKey : \"logger\" , CallerKey : \"caller\" , FunctionKey : zapcore . OmitKey , MessageKey : \"msg\" , StacktraceKey : \"stacktrace\" , LineEnding : zapcore . DefaultLineEnding , EncodeLevel : zapcore . CapitalLevelEncoder , EncodeTime : zapcore . ISO8601TimeEncoder , EncodeDuration : zapcore . SecondsDurationEncoder , EncodeCaller : zapcore . ShortCallerEncoder , } return zapcore . NewJSONEncoder ( encoderConfig ) } // GinLogger \u63a5\u6536gin\u6846\u67b6\u9ed8\u8ba4\u7684\u65e5\u5fd7 func GinLogger ( logger * zap . SugaredLogger ) gin . HandlerFunc { return func ( c * gin . Context ) { start := time . Now () path := c . Request . URL . Path query := c . Request . URL . RawQuery c . Next () cost := time . Since ( start ) logger . Info ( path , zap . Int ( \"status\" , c . Writer . Status ()), zap . String ( \"method\" , c . Request . Method ), zap . String ( \"path\" , path ), zap . String ( \"query\" , query ), zap . String ( \"ip\" , c . ClientIP ()), zap . String ( \"user-agent\" , c . Request . UserAgent ()), zap . String ( \"errors\" , c . Errors . ByType ( gin . ErrorTypePrivate ). String ()), zap . Duration ( \"cost\" , cost ), ) } } // GinRecovery recover\u6389\u9879\u76ee\u53ef\u80fd\u51fa\u73b0\u7684panic func GinRecovery ( logger * zap . SugaredLogger , stack bool ) gin . HandlerFunc { return func ( c * gin . Context ) { defer func () { if err := recover (); err != nil { // Check for a broken connection, as it is not really a // condition that warrants a panic stack trace. var brokenPipe bool if ne , ok := err .( * net . OpError ); ok { if se , ok := ne . Err .( * os . SyscallError ); ok { if strings . Contains ( strings . ToLower ( se . Error ()), \"broken pipe\" ) || strings . Contains ( strings . ToLower ( se . Error ()), \"connection reset by peer\" ) { brokenPipe = true } } } httpRequest , _ := httputil . DumpRequest ( c . Request , false ) if brokenPipe { logger . Error ( c . Request . URL . Path , zap . Any ( \"error\" , err ), zap . String ( \"request\" , string ( httpRequest )), ) // If the connection is dead, we can't write a status to it. c . Error ( err .( error )) // nolint: errcheck c . Abort () return } if stack { logger . Error ( \"[Recovery from panic]\" , zap . Any ( \"error\" , err ), zap . String ( \"request\" , string ( httpRequest )), zap . String ( \"stack\" , string ( debug . Stack ())), ) } else { logger . Error ( \"[Recovery from panic]\" , zap . Any ( \"error\" , err ), zap . String ( \"request\" , string ( httpRequest )), ) } c . AbortWithStatus ( http . StatusInternalServerError ) } }() c . Next () } } func main () { InitLogger () r := gin . New () r . Use ( GinLogger ( sugarlogger ), GinRecovery ( sugarlogger , true )) r . GET ( \"/hello\" , func ( c * gin . Context ) { c . String ( http . StatusOK , \"hello world!\" ) }) r . Run ( \":10086\" ) } \u90a3\u4e48\u5728\u5b9e\u9645\u7684gin\u9879\u76ee\u4e2d\uff0c\u6211\u4eec\u5e94\u8be5\u628a\u4e0a\u9762\u7684\u903b\u8f91\u62bd\u8c61\u51fa\u6765\u4e00\u4e2alogger.go\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5177\u4f53\u7684\u914d\u7f6e\u6587\u4ef6\u5982\u4e0b","title":"\u57fa\u4e8ezap\u7684\u4e2d\u95f4\u4ef6"},{"location":"mds/go/pkgs/zap/zap/#_8","text":"\u5728Go\u8bed\u8a00\u9879\u76ee\u4e2d\u4f7f\u7528Zap\u65e5\u5fd7\u5e93","title":"\u53c2\u8003\u6587\u6863"}]}