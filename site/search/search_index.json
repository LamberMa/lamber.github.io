{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Linux\u955c\u50cf\u6e90 \u00b6 \u963f\u91cc\u4e91\u955c\u50cf\u6e90 # Centos7 wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo # \u6216\u8005 curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo","title":"\u5e38\u7528\u8fde\u63a5"},{"location":"#linux","text":"\u963f\u91cc\u4e91\u955c\u50cf\u6e90 # Centos7 wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo # \u6216\u8005 curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo","title":"Linux\u955c\u50cf\u6e90"},{"location":"mds/dns/bind/DNS%E5%8A%AB%E6%8C%81/","text":"\u4f7f\u7528Bind RPZ\u5b9e\u73b0DNS\u52ab\u6301 \uff08DNS Hijacking\uff09 \u00b6 !!! \u4ec0\u4e48\u662frpz\uff1f RPZ(Response Policy Zone) \u9644\u5f55\uff1a \u00b6 BindRPZ\u5e38\u89c1\u7528\u6cd5 BIND DNS \u4f7f\u7528RPZ \u505a\u5c40\u90e8\u4ee3\u7406 \u4f7f\u7528 Bind9 \u5efa\u7f6e\u6df7\u5408 DNS\uff08Response Policy Zone) https://www.isc.org/rpz/ DNS Response Policy Zones Basic Example for Response-Policy-Zones with BIND BIND 9 Administrator Reference Manual http://web.mit.edu/darwin/src/modules/bind/bind/doc/html/config.html https://www.cnblogs.com/f-ck-need-u/p/7367503.html#auto_id_19","title":"4. DNS\u52ab\u6301"},{"location":"mds/dns/bind/DNS%E5%8A%AB%E6%8C%81/#bind-rpzdns-dns-hijacking","text":"!!! \u4ec0\u4e48\u662frpz\uff1f RPZ(Response Policy Zone)","title":"\u4f7f\u7528Bind RPZ\u5b9e\u73b0DNS\u52ab\u6301 \uff08DNS Hijacking\uff09"},{"location":"mds/dns/bind/DNS%E5%8A%AB%E6%8C%81/#_1","text":"BindRPZ\u5e38\u89c1\u7528\u6cd5 BIND DNS \u4f7f\u7528RPZ \u505a\u5c40\u90e8\u4ee3\u7406 \u4f7f\u7528 Bind9 \u5efa\u7f6e\u6df7\u5408 DNS\uff08Response Policy Zone) https://www.isc.org/rpz/ DNS Response Policy Zones Basic Example for Response-Policy-Zones with BIND BIND 9 Administrator Reference Manual http://web.mit.edu/darwin/src/modules/bind/bind/doc/html/config.html https://www.cnblogs.com/f-ck-need-u/p/7367503.html#auto_id_19","title":"\u9644\u5f55\uff1a"},{"location":"mds/dns/bind/%E5%8C%BA%E5%9F%9F%E9%97%B4%E5%90%8C%E6%AD%A5/","text":"\u533a\u57df\u4f20\u9012\u4e0e\u533a\u57df\u7c7b\u578b \u00b6 \u533a\u57df \u63cf\u8ff0 \u4e3b\u8981Primary DNS\u7684\u4e00\u4e2a\u8bfb\u5199\u526f\u672c \u8f85\u52a9Secondary DNS\u7684\u4e00\u4e2a\u53ea\u8bfb\u526f\u672c\uff0c\u9700\u8981\u6307\u5b9a\u590d\u5236\u7684master \u5b58\u6839Stub \u53ea\u5305\u542b\u7528\u4e8e\u5b9a\u4f4d\u540d\u79f0\u670d\u52a1\u5668\u7684\u8bb0\u5f55\u7684\u533a\u57df\uff0c\u9700\u8981\u6307\u5b9a\u590d\u5236\u7684Master \u6d3b\u52a8\u76ee\u5f55\u96c6\u6210\uff08ActiveDirectoryIntegrated\uff09 \u533a\u57df\u6570\u636e\u4fdd\u5b58\u5728\u6d3b\u52a8\u76ee\u5f55\u800c\u4e0d\u662f\u4fdd\u5b58\u5728\u533a\u57df\u6587\u4ef6\u4e2d\uff08\u5fae\u8f6f\u72ec\u6709\uff09 \u6ce8\u610fBind\u5e76\u4e0d\u652f\u6301\u6700\u540e\u4e00\u79cd\u6d3b\u52a8\u76ee\u5f55\u96c6\u6210\u7684\u65b9\u5f0f\u3002 \u533a\u57df\u4f20\u9012\u652f\u6301\u7684\u662f\u589e\u91cf\u533a\u57df\u4f20\u9012 \u533a\u57df\u4f20\u9012\u7684\u5b89\u5168\u6027 \u00b6 \u4f7f\u7528allow-transfer\u6765\u5b9e\u73b0\u5b89\u5168\u52a0\u56fa\uff0c\u5982\u679c\u8bf4\u7f3a\u5c11allow-transfer\u914d\u7f6e\uff0c\u90a3\u4e48\u5c31\u4f1a\u5141\u8bb8\u6240\u6709\u4e3b\u673a\u7684\u533a\u57df\u4f20\u9012\u8bf7\u6c42\u3002 \u65b9\u68481\uff1aallow-transfer \u00b6 \u6307\u5b9a\u5730\u5740\u5339\u914d\u5217\u8868 allow-transfer { address_match_list }; \u5982\uff1a\u5168\u5c40\u914d\u7f6e options { ... // \u9ed8\u8ba4\u62d2\u7edd\u6240\u6709 allow-transfer { none ; } ; } ... \u6307\u5b9azone\u8fdb\u884c\u914d\u7f6e zone \"example.com\" IN { .... // \u4e3a\u6307\u5b9azone\u663e\u793a\u7684\u6307\u5b9a allow-transfer { localhost ; 192 .168.1.232 ; 172 .16.1.0/24 ; } ; } \u8fdb\u884c\u6d4b\u8bd5\uff0c\u5982 host -t AXFR kuaishou.com 1 .1.1.1 \u65b9\u68482\uff1aTSIG \u00b6 TSIG\uff08TransactionSignature\uff09\u4f7f\u7528\u7b7e\u540d\u7684\u5bc6\u94a5\u8fdb\u884c\u9a8c\u8bc1\uff0c\u8fd9\u6837\u7684\u65b9\u5f0f\u5b89\u5168\u6027\u4f1a\u9ad8\u5f88\u591a\u3002 \u533a\u57df\u4f20\u9012\u7684\u65f6\u673a \u00b6 \u4e3bDNS\u670d\u52a1\u5668\u7684\u901a\u77e5\u673a\u5236 \u5f53Zone\u6570\u636e\u6587\u4ef6\u6709\u53d8\u5316\uff0c\u4e3bDNS\u670d\u52a1\u5668\u4f1a\u9ed8\u8ba4\u901a\u77e5\u8f85\u52a9DNS\u670d\u52a1\u5668 \u9ed8\u8ba4\u662f\u901a\u77e5Zone\u4e2dNS\u8bb0\u5f55\u6240\u6307\u5b9a\u7684DNS\u670d\u52a1\u5668 \u8f85\u52a9DNS\u670d\u52a1\u5668\u6536\u5230\u901a\u77e5\u7684\u65f6\u5019\uff0c\u8054\u7cfb\u4e3bDNS\u670d\u52a1\u5668\uff0c\u5bf9\u6bd4\u5e8f\u5217\u53f7\u5e76\u8fdb\u884c\u540c\u6b65 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528rndc\u89e6\u53d1\u6570\u636e\u540c\u6b65 rndc notify example.com \u8f85\u52a9DNS\u670d\u52a1\u5668\uff1a \u6839\u636eSOA\u8bb0\u5f55\u7684Refresh\u53c2\u6570\uff0c\u5b9a\u671f\u8054\u7cfb\u4e3b\u670d\u52a1\u5668\uff0c\u5bf9\u6bd4\u5e8f\u5217\u53f7\u5e76\u8fdb\u884c\u6570\u636e\u540c\u6b65 \u5982\u679c\u67d0\u6b21Refresh\u5931\u8d25\uff0c\u6839\u636eSOA\u8bb0\u5f55\u7684Retry\u53c2\u6570\u6240\u8bbe\u7f6e\u7684\u95f4\u9694\u8fdb\u884c\u5c1d\u8bd5\u3002 \u6216\u8005\u4f7f\u7528\u547d\u4ee4\u8fdb\u884c\u91cd\u65b0\u540c\u6b65\u4f20\u8f93\uff0c\u5982 rndc retransfer example.com","title":"2. \u533a\u57df\u95f4\u540c\u6b65"},{"location":"mds/dns/bind/%E5%8C%BA%E5%9F%9F%E9%97%B4%E5%90%8C%E6%AD%A5/#_1","text":"\u533a\u57df \u63cf\u8ff0 \u4e3b\u8981Primary DNS\u7684\u4e00\u4e2a\u8bfb\u5199\u526f\u672c \u8f85\u52a9Secondary DNS\u7684\u4e00\u4e2a\u53ea\u8bfb\u526f\u672c\uff0c\u9700\u8981\u6307\u5b9a\u590d\u5236\u7684master \u5b58\u6839Stub \u53ea\u5305\u542b\u7528\u4e8e\u5b9a\u4f4d\u540d\u79f0\u670d\u52a1\u5668\u7684\u8bb0\u5f55\u7684\u533a\u57df\uff0c\u9700\u8981\u6307\u5b9a\u590d\u5236\u7684Master \u6d3b\u52a8\u76ee\u5f55\u96c6\u6210\uff08ActiveDirectoryIntegrated\uff09 \u533a\u57df\u6570\u636e\u4fdd\u5b58\u5728\u6d3b\u52a8\u76ee\u5f55\u800c\u4e0d\u662f\u4fdd\u5b58\u5728\u533a\u57df\u6587\u4ef6\u4e2d\uff08\u5fae\u8f6f\u72ec\u6709\uff09 \u6ce8\u610fBind\u5e76\u4e0d\u652f\u6301\u6700\u540e\u4e00\u79cd\u6d3b\u52a8\u76ee\u5f55\u96c6\u6210\u7684\u65b9\u5f0f\u3002 \u533a\u57df\u4f20\u9012\u652f\u6301\u7684\u662f\u589e\u91cf\u533a\u57df\u4f20\u9012","title":"\u533a\u57df\u4f20\u9012\u4e0e\u533a\u57df\u7c7b\u578b"},{"location":"mds/dns/bind/%E5%8C%BA%E5%9F%9F%E9%97%B4%E5%90%8C%E6%AD%A5/#_2","text":"\u4f7f\u7528allow-transfer\u6765\u5b9e\u73b0\u5b89\u5168\u52a0\u56fa\uff0c\u5982\u679c\u8bf4\u7f3a\u5c11allow-transfer\u914d\u7f6e\uff0c\u90a3\u4e48\u5c31\u4f1a\u5141\u8bb8\u6240\u6709\u4e3b\u673a\u7684\u533a\u57df\u4f20\u9012\u8bf7\u6c42\u3002","title":"\u533a\u57df\u4f20\u9012\u7684\u5b89\u5168\u6027"},{"location":"mds/dns/bind/%E5%8C%BA%E5%9F%9F%E9%97%B4%E5%90%8C%E6%AD%A5/#1allow-transfer","text":"\u6307\u5b9a\u5730\u5740\u5339\u914d\u5217\u8868 allow-transfer { address_match_list }; \u5982\uff1a\u5168\u5c40\u914d\u7f6e options { ... // \u9ed8\u8ba4\u62d2\u7edd\u6240\u6709 allow-transfer { none ; } ; } ... \u6307\u5b9azone\u8fdb\u884c\u914d\u7f6e zone \"example.com\" IN { .... // \u4e3a\u6307\u5b9azone\u663e\u793a\u7684\u6307\u5b9a allow-transfer { localhost ; 192 .168.1.232 ; 172 .16.1.0/24 ; } ; } \u8fdb\u884c\u6d4b\u8bd5\uff0c\u5982 host -t AXFR kuaishou.com 1 .1.1.1","title":"\u65b9\u68481\uff1aallow-transfer"},{"location":"mds/dns/bind/%E5%8C%BA%E5%9F%9F%E9%97%B4%E5%90%8C%E6%AD%A5/#2tsig","text":"TSIG\uff08TransactionSignature\uff09\u4f7f\u7528\u7b7e\u540d\u7684\u5bc6\u94a5\u8fdb\u884c\u9a8c\u8bc1\uff0c\u8fd9\u6837\u7684\u65b9\u5f0f\u5b89\u5168\u6027\u4f1a\u9ad8\u5f88\u591a\u3002","title":"\u65b9\u68482\uff1aTSIG"},{"location":"mds/dns/bind/%E5%8C%BA%E5%9F%9F%E9%97%B4%E5%90%8C%E6%AD%A5/#_3","text":"\u4e3bDNS\u670d\u52a1\u5668\u7684\u901a\u77e5\u673a\u5236 \u5f53Zone\u6570\u636e\u6587\u4ef6\u6709\u53d8\u5316\uff0c\u4e3bDNS\u670d\u52a1\u5668\u4f1a\u9ed8\u8ba4\u901a\u77e5\u8f85\u52a9DNS\u670d\u52a1\u5668 \u9ed8\u8ba4\u662f\u901a\u77e5Zone\u4e2dNS\u8bb0\u5f55\u6240\u6307\u5b9a\u7684DNS\u670d\u52a1\u5668 \u8f85\u52a9DNS\u670d\u52a1\u5668\u6536\u5230\u901a\u77e5\u7684\u65f6\u5019\uff0c\u8054\u7cfb\u4e3bDNS\u670d\u52a1\u5668\uff0c\u5bf9\u6bd4\u5e8f\u5217\u53f7\u5e76\u8fdb\u884c\u540c\u6b65 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528rndc\u89e6\u53d1\u6570\u636e\u540c\u6b65 rndc notify example.com \u8f85\u52a9DNS\u670d\u52a1\u5668\uff1a \u6839\u636eSOA\u8bb0\u5f55\u7684Refresh\u53c2\u6570\uff0c\u5b9a\u671f\u8054\u7cfb\u4e3b\u670d\u52a1\u5668\uff0c\u5bf9\u6bd4\u5e8f\u5217\u53f7\u5e76\u8fdb\u884c\u6570\u636e\u540c\u6b65 \u5982\u679c\u67d0\u6b21Refresh\u5931\u8d25\uff0c\u6839\u636eSOA\u8bb0\u5f55\u7684Retry\u53c2\u6570\u6240\u8bbe\u7f6e\u7684\u95f4\u9694\u8fdb\u884c\u5c1d\u8bd5\u3002 \u6216\u8005\u4f7f\u7528\u547d\u4ee4\u8fdb\u884c\u91cd\u65b0\u540c\u6b65\u4f20\u8f93\uff0c\u5982 rndc retransfer example.com","title":"\u533a\u57df\u4f20\u9012\u7684\u65f6\u673a"},{"location":"mds/dns/bind/%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/","text":"\u5728\u672a\u542f\u7528chroot\u7684\u60c5\u51b5\u4e0b\uff0c\u4e3b\u8981\u9700\u8981\u5907\u4efd\u7684\u6587\u4ef6\u5305\u542b\u5982\u4e0b\u7684\u6587\u4ef6 named\u914d\u7f6e\u6587\u4ef6 /etc/named.comf /etc/named.* /etc/rndc.key /etc/rndc.conf \u533a\u57df\u6570\u636e\u6587\u4ef6 /var/named/* \u624b\u5de5\u5907\u4efd \u00b6 \u5176\u5b9e\u5728\u6bcf\u6b21\u63a8\u9001\u7684\u65f6\u5019\u8fdb\u884c\u624b\u52a8\u5907\u4efd\u5c31\u53ef\u4ee5\uff0c\u6bcf\u4e00\u4e2a\u6587\u4ef6\u6ca1\u6709\u90a3\u4e48\u5927\uff0c\u6240\u4ee5\u8bf4\u7406\u8bba\u6765\u8bb2\u4e5f\u4e0d\u7528\u8fdb\u884c\u6253\u5305\u538b\u7f29\u3002\u76f4\u63a5\u4f7f\u7528\u6587\u4ef6\u76ee\u5f55+\u8f6f\u8fde\u63a5\u7684\u65b9\u5f0f\u5c31\u53ef\u4ee5\u4e86\u3002","title":"3. \u5907\u4efd\u4e0e\u6062\u590d"},{"location":"mds/dns/bind/%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/#_1","text":"\u5176\u5b9e\u5728\u6bcf\u6b21\u63a8\u9001\u7684\u65f6\u5019\u8fdb\u884c\u624b\u52a8\u5907\u4efd\u5c31\u53ef\u4ee5\uff0c\u6bcf\u4e00\u4e2a\u6587\u4ef6\u6ca1\u6709\u90a3\u4e48\u5927\uff0c\u6240\u4ee5\u8bf4\u7406\u8bba\u6765\u8bb2\u4e5f\u4e0d\u7528\u8fdb\u884c\u6253\u5305\u538b\u7f29\u3002\u76f4\u63a5\u4f7f\u7528\u6587\u4ef6\u76ee\u5f55+\u8f6f\u8fde\u63a5\u7684\u65b9\u5f0f\u5c31\u53ef\u4ee5\u4e86\u3002","title":"\u624b\u5de5\u5907\u4efd"},{"location":"mds/dns/bind/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/","text":"","title":"5. \u6700\u4f73\u5b9e\u8df5"},{"location":"mds/dns/bind/%E7%9B%91%E6%8E%A7/Prometheus%E7%9B%91%E6%8E%A7Bind/","text":"\u4f7f\u7528BindExporter\u5b9e\u73b0BindDNS\u7684\u6570\u636e\u76d1\u63a7\uff0c\u5177\u4f53\u53c2\u8003 Github BindExporter \u5b89\u88c5BindExporter \u00b6 # \u4e0b\u8f7dBindExporter\u7684\u5b89\u88c5\u5305 cd /opt wget https://github.com/prometheus-community/bind_exporter/releases/download/v0.4.0/bind_exporter-0.4.0.linux-amd64.tar.gz # \u89e3\u538b\u538b\u7f29\u5305 tar xf bind_exporter-0.4.0.linux-amd64.tar.gz mkdir -p /usr/local/exporters/ mv bind_exporter-0.4.0.linux-amd64 /usr/local/exporters/bind_exporter \u7f16\u8f91systemd\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u56e0\u4e3a\u6211\u4eec\u7684systemd\u662f\u542f\u52a8bindExporter\u7684\u65f6\u5019\u662f\u4ee5named\u7528\u6237\u6765\u542f\u52a8\u7684\uff0c\u6240\u4ee5\u8bf4\u8981\u5148\u5b89\u88c5bind\uff0c\u521d\u59cb\u5316\u597dnamed\u7528\u6237\u548c\u7ec4 vim /usr/lib/systemd/system/bind_exporter.service [ Unit ] Description = bind_exporter Documentation = https://github.com/digitalocean/bind_exporter Wants = network-online.target After = network-online.target [ Service ] Type = simple User = named Group = named ExecReload = /bin/kill -HUP $MAINPID ExecStart = /usr/local/exporters/bind_exporter/bind_exporter \\ --bind.pid-file = /var/run/named/named.pid \\ --bind.timeout = 20s \\ --web.listen-address = 0 .0.0.0:9119 \\ --web.telemetry-path = /metrics \\ --bind.stats-url = http://localhost:53/ \\ --bind.stats-groups = server,view,tasks SyslogIdentifier = bind_exporter Restart = always [ Install ] WantedBy = multi-user.target \u7136\u540e\u91cd\u8f7d\u5e76\u91cd\u542fsystemd\u670d\u52a1 systemctl daemon-reload systemctl start bind_exporter systemctl status bind_exporter systemctl enable bind_exporter \u5982\u679c\u51fa\u73b0\u542f\u52a8\u5931\u8d25\u7684\u9519\u8bef \u53ef\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5bf9\u5e94\u7684/usr/local/exporters\u76ee\u5f55\u672c\u8eab\u662f\u5426\u6709other\u7684x\u6743\u9650\uff0c\u5982\u679c\u6ca1\u6709\u6743\u9650\u7684\u8bdd\uff0cnamed\u7528\u6237\u662f\u8fdb\u4e0d\u5230\u8fd9\u4e2a\u76ee\u5f55\u7684\uff0c\u81ea\u7136BindExporter\u4e5f\u662f\u65e0\u6cd5\u542f\u52a8 \u63a5\u4e0b\u6765\uff0c\u5728 /etc/named.conf \u4e2d\u6dfb\u52a0\u5982\u4e0b\u5185\u5bb9\uff0c\u6ce8\u610f\u201cstatistics-channels\u201d\u662f\u4e0e\u201coptions\u201d\u5e76\u5217\u7684\uff0c\u800c\u4e0d\u662f\u4f4d\u4e8e\u201coptions\u201d\u5185\u90e8 statistics-channels { inet 127 .0.0.1 port 53 allow { 127 .0.0.1 ; } ; } ; \u91cd\u542fbind named-checkconf systemctl restart named \u7136\u540e\u5c31\u53ef\u4ee5\u6d4b\u8bd5\u4e00\u4e0b\u662f\u5426\u6b63\u5e38\u66b4\u9732\u51fa\u6765\u4e86\u5bf9\u5e94\u7684metrics [ root@cd-ocg-b-vm-48-42-bind-dns-master ~ ] # curl localhost:9119/metrics | grep bind_zone % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 22857 0 22857 0 0 72539 0 --:--:-- --:--:-- --:--:-- 72792 # HELP bind_zone_serial Zone serial number. # TYPE bind_zone_serial counter bind_zone_serial { view = \"_default\" ,zone_name = \"0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.IP6.ARPA\" } 0 bind_zone_serial { view = \"_default\" ,zone_name = \"0.in-addr.arpa\" } 0 bind_zone_serial { view = \"_default\" ,zone_name = \"1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa\" } 0 bind_zone_serial { view = \"_default\" ,zone_name = \"1.0.0.127.in-addr.arpa\" } 0 bind_zone_serial { view = \"_default\" ,zone_name = \"10.IN-ADDR.ARPA\" } 0 bind_zone_serial { view = \"_default\" ,zone_name = \"100.100.IN-ADDR.ARPA\" } 0 bind_zone_serial { view = \"_default\" ,zone_name = \"100.51.198.IN-ADDR.ARPA\" } 0 bind_zone_serial { view = \"_default\" ,zone_name = \"101.100.IN-ADDR.ARPA\" } 0 \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026 \u63a5\u4e0b\u6765\u8bb0\u5f97\u8c03\u6574\u5bf9\u5e94\u7684\u9632\u706b\u5899 -A INPUT -p tcp -m state --state NEW -m tcp --dport 9119 -j ACCEPT Prometheus\u63a5\u5165Exporter \u00b6","title":"\u4f7f\u7528Prometheus\u76d1\u63a7"},{"location":"mds/dns/bind/%E7%9B%91%E6%8E%A7/Prometheus%E7%9B%91%E6%8E%A7Bind/#bindexporter","text":"# \u4e0b\u8f7dBindExporter\u7684\u5b89\u88c5\u5305 cd /opt wget https://github.com/prometheus-community/bind_exporter/releases/download/v0.4.0/bind_exporter-0.4.0.linux-amd64.tar.gz # \u89e3\u538b\u538b\u7f29\u5305 tar xf bind_exporter-0.4.0.linux-amd64.tar.gz mkdir -p /usr/local/exporters/ mv bind_exporter-0.4.0.linux-amd64 /usr/local/exporters/bind_exporter \u7f16\u8f91systemd\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u56e0\u4e3a\u6211\u4eec\u7684systemd\u662f\u542f\u52a8bindExporter\u7684\u65f6\u5019\u662f\u4ee5named\u7528\u6237\u6765\u542f\u52a8\u7684\uff0c\u6240\u4ee5\u8bf4\u8981\u5148\u5b89\u88c5bind\uff0c\u521d\u59cb\u5316\u597dnamed\u7528\u6237\u548c\u7ec4 vim /usr/lib/systemd/system/bind_exporter.service [ Unit ] Description = bind_exporter Documentation = https://github.com/digitalocean/bind_exporter Wants = network-online.target After = network-online.target [ Service ] Type = simple User = named Group = named ExecReload = /bin/kill -HUP $MAINPID ExecStart = /usr/local/exporters/bind_exporter/bind_exporter \\ --bind.pid-file = /var/run/named/named.pid \\ --bind.timeout = 20s \\ --web.listen-address = 0 .0.0.0:9119 \\ --web.telemetry-path = /metrics \\ --bind.stats-url = http://localhost:53/ \\ --bind.stats-groups = server,view,tasks SyslogIdentifier = bind_exporter Restart = always [ Install ] WantedBy = multi-user.target \u7136\u540e\u91cd\u8f7d\u5e76\u91cd\u542fsystemd\u670d\u52a1 systemctl daemon-reload systemctl start bind_exporter systemctl status bind_exporter systemctl enable bind_exporter \u5982\u679c\u51fa\u73b0\u542f\u52a8\u5931\u8d25\u7684\u9519\u8bef \u53ef\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5bf9\u5e94\u7684/usr/local/exporters\u76ee\u5f55\u672c\u8eab\u662f\u5426\u6709other\u7684x\u6743\u9650\uff0c\u5982\u679c\u6ca1\u6709\u6743\u9650\u7684\u8bdd\uff0cnamed\u7528\u6237\u662f\u8fdb\u4e0d\u5230\u8fd9\u4e2a\u76ee\u5f55\u7684\uff0c\u81ea\u7136BindExporter\u4e5f\u662f\u65e0\u6cd5\u542f\u52a8 \u63a5\u4e0b\u6765\uff0c\u5728 /etc/named.conf \u4e2d\u6dfb\u52a0\u5982\u4e0b\u5185\u5bb9\uff0c\u6ce8\u610f\u201cstatistics-channels\u201d\u662f\u4e0e\u201coptions\u201d\u5e76\u5217\u7684\uff0c\u800c\u4e0d\u662f\u4f4d\u4e8e\u201coptions\u201d\u5185\u90e8 statistics-channels { inet 127 .0.0.1 port 53 allow { 127 .0.0.1 ; } ; } ; \u91cd\u542fbind named-checkconf systemctl restart named \u7136\u540e\u5c31\u53ef\u4ee5\u6d4b\u8bd5\u4e00\u4e0b\u662f\u5426\u6b63\u5e38\u66b4\u9732\u51fa\u6765\u4e86\u5bf9\u5e94\u7684metrics [ root@cd-ocg-b-vm-48-42-bind-dns-master ~ ] # curl localhost:9119/metrics | grep bind_zone % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 22857 0 22857 0 0 72539 0 --:--:-- --:--:-- --:--:-- 72792 # HELP bind_zone_serial Zone serial number. # TYPE bind_zone_serial counter bind_zone_serial { view = \"_default\" ,zone_name = \"0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.IP6.ARPA\" } 0 bind_zone_serial { view = \"_default\" ,zone_name = \"0.in-addr.arpa\" } 0 bind_zone_serial { view = \"_default\" ,zone_name = \"1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa\" } 0 bind_zone_serial { view = \"_default\" ,zone_name = \"1.0.0.127.in-addr.arpa\" } 0 bind_zone_serial { view = \"_default\" ,zone_name = \"10.IN-ADDR.ARPA\" } 0 bind_zone_serial { view = \"_default\" ,zone_name = \"100.100.IN-ADDR.ARPA\" } 0 bind_zone_serial { view = \"_default\" ,zone_name = \"100.51.198.IN-ADDR.ARPA\" } 0 bind_zone_serial { view = \"_default\" ,zone_name = \"101.100.IN-ADDR.ARPA\" } 0 \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026 \u63a5\u4e0b\u6765\u8bb0\u5f97\u8c03\u6574\u5bf9\u5e94\u7684\u9632\u706b\u5899 -A INPUT -p tcp -m state --state NEW -m tcp --dport 9119 -j ACCEPT","title":"\u5b89\u88c5BindExporter"},{"location":"mds/dns/bind/%E7%9B%91%E6%8E%A7/Prometheus%E7%9B%91%E6%8E%A7Bind/#prometheusexporter","text":"","title":"Prometheus\u63a5\u5165Exporter"},{"location":"mds/dns/bind/%E7%9B%91%E6%8E%A7/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7/","text":"","title":"\u81ea\u5b9a\u4e49\u76d1\u63a7"},{"location":"mds/dns/bind/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%9F%E8%83%BD/","text":"Bind Configuration Parser \u00b6 \u4e3b\u8981\u529f\u80fd\u662f\u89e3\u6790bind\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u53ef\u4ee5\u5b9e\u73b0\u6587\u4ef6\u7684\u589e\u5220\u6539\u67e5\uff0c\u5e76\u53ef\u4ee5\u6839\u636e\u62bd\u8c61\u51fa\u6765\u7684\u5185\u5bb9\u7ed3\u5408\u6570\u636e\u5e93\u7b49\u5185\u5bb9\u8fdb\u884c\u7ba1\u7406\uff0c\u8ba9\u7ba1\u7406\u7aef\u53ef\u4ee5\u4f7f\u7528mysql\uff0c\u4f46\u662f\u5b9e\u9645\u4e1a\u52a1\u63d0\u4f9b\u8d70BindDNS\u81ea\u5df1\u7684\u5185\u5bb9\u548c\u529f\u80fd\u3002 bind\u7684\u914d\u7f6e\u6587\u4ef6\u548cNginx\u7684\u662f\u6bd4\u8f83\u7c7b\u4f3c\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u4e5f\u53ef\u4ee5\u770bNginx\u914d\u7f6e\u7ba1\u7406\u7684\u4e00\u4e9b\u5b9e\u73b0\u811a\u672c\u3002 \u53c2\u8003\u9644\u5f55\uff1a \u00b6 Ruby\u5199\u7684GlobalDNS\uff0c\u4ec5\u4f9b\u53c2\u8003 namedparser bind2other bindparser bind9_parser nginx\u914d\u7f6e\u76f8\u5173\u7684\u89e3\u6790\u5de5\u5177\uff0c\u53ef\u4ee5\u7528\u6765\u53c2\u8003 https://github.com/lytics/confl.git https://github.com/recoye/config https://github.com/Sid-Sun/nginx-auto-config.git https://github.com/bilalcaliskan/nginx-conf-generator.git zone\u914d\u7f6e\u7ba1\u7406 https://github.com/jforman/binder https://github.com/oznu/dns-zone-blacklist.git https://github.com/bwesterb/go-zonefile https://github.com/tjl2/dnsadmin https://github.com/cego/cfzone/blob/master/recordCollection.go https://github.com/ant30/bind9-zone-editor https://github.com/shahwahed/BindZoneMaker https://github.com/igor47/dnsparser/blob/master/dnsparser.py https://github.com/GertBurger/zoneparser/blob/master/zoneparser/ init .py https://github.com/plinss/bindtool https://github.com/joemiller/dns_compare","title":"7. \u81ea\u5b9a\u4e49\u529f\u80fd"},{"location":"mds/dns/bind/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%9F%E8%83%BD/#bind-configuration-parser","text":"\u4e3b\u8981\u529f\u80fd\u662f\u89e3\u6790bind\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u53ef\u4ee5\u5b9e\u73b0\u6587\u4ef6\u7684\u589e\u5220\u6539\u67e5\uff0c\u5e76\u53ef\u4ee5\u6839\u636e\u62bd\u8c61\u51fa\u6765\u7684\u5185\u5bb9\u7ed3\u5408\u6570\u636e\u5e93\u7b49\u5185\u5bb9\u8fdb\u884c\u7ba1\u7406\uff0c\u8ba9\u7ba1\u7406\u7aef\u53ef\u4ee5\u4f7f\u7528mysql\uff0c\u4f46\u662f\u5b9e\u9645\u4e1a\u52a1\u63d0\u4f9b\u8d70BindDNS\u81ea\u5df1\u7684\u5185\u5bb9\u548c\u529f\u80fd\u3002 bind\u7684\u914d\u7f6e\u6587\u4ef6\u548cNginx\u7684\u662f\u6bd4\u8f83\u7c7b\u4f3c\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u4e5f\u53ef\u4ee5\u770bNginx\u914d\u7f6e\u7ba1\u7406\u7684\u4e00\u4e9b\u5b9e\u73b0\u811a\u672c\u3002","title":"Bind Configuration Parser"},{"location":"mds/dns/bind/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%9F%E8%83%BD/#_1","text":"Ruby\u5199\u7684GlobalDNS\uff0c\u4ec5\u4f9b\u53c2\u8003 namedparser bind2other bindparser bind9_parser nginx\u914d\u7f6e\u76f8\u5173\u7684\u89e3\u6790\u5de5\u5177\uff0c\u53ef\u4ee5\u7528\u6765\u53c2\u8003 https://github.com/lytics/confl.git https://github.com/recoye/config https://github.com/Sid-Sun/nginx-auto-config.git https://github.com/bilalcaliskan/nginx-conf-generator.git zone\u914d\u7f6e\u7ba1\u7406 https://github.com/jforman/binder https://github.com/oznu/dns-zone-blacklist.git https://github.com/bwesterb/go-zonefile https://github.com/tjl2/dnsadmin https://github.com/cego/cfzone/blob/master/recordCollection.go https://github.com/ant30/bind9-zone-editor https://github.com/shahwahed/BindZoneMaker https://github.com/igor47/dnsparser/blob/master/dnsparser.py https://github.com/GertBurger/zoneparser/blob/master/zoneparser/ init .py https://github.com/plinss/bindtool https://github.com/joemiller/dns_compare","title":"\u53c2\u8003\u9644\u5f55\uff1a"},{"location":"mds/dns/bind/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/","text":"\u5982\u4f55\u52ab\u6301\u4efb\u610f\u57df\u540d\u67e5\u8be2\u8fd4\u56de\u56fa\u5b9a\u5730\u5740\uff1f \u00b6 \u8ba9Bind9\u5bf9\u4efb\u610f\u57df\u540d\u67e5\u8be2\u90fd\u8fd4\u56de\u56fa\u5b9a\u7684IP\u5730\u5740","title":"6. \u5e38\u89c1\u95ee\u9898\u5904\u7406"},{"location":"mds/dns/bind/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/#_1","text":"\u8ba9Bind9\u5bf9\u4efb\u610f\u57df\u540d\u67e5\u8be2\u90fd\u8fd4\u56de\u56fa\u5b9a\u7684IP\u5730\u5740","title":"\u5982\u4f55\u52ab\u6301\u4efb\u610f\u57df\u540d\u67e5\u8be2\u8fd4\u56de\u56fa\u5b9a\u5730\u5740\uff1f"},{"location":"mds/dns/dnsmasq/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","text":"","title":"Dnsmasq\u57fa\u672c\u4f7f\u7528"},{"location":"mds/go/advanced/rpc/1-rpc%E7%AE%80%E4%BB%8B/","text":"","title":"1. RPC\u7b80\u4ecb"},{"location":"mds/go/advanced/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E4%BC%98%E9%9B%85%E7%9A%84Go%E9%A1%B9%E7%9B%AE/","text":"","title":"2. \u7f16\u5199\u4f18\u96c5Go\u9879\u76ee"},{"location":"mds/go/advanced/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/%E8%A7%84%E8%8C%83%E7%AE%80%E4%BB%8B/","text":"\u6ca1\u6709\u7edf\u4e00\u7684\u89c4\u8303\u4f1a\u9020\u6210\u54ea\u4e9b\u95ee\u9898 - \u4ee3\u7801\u98ce\u683c\u4e0d\u4e00 - \u76ee\u5f55\u6742\u4e71\u65e0\u7ae0\uff1a\u6ca1\u6709\u7edf\u4e00\u7684\u76ee\u5f55\u89c4\u8303\uff0c\u53ef\u80fd\u540c\u4e00\u7c7b\u7684\u529f\u80fd\u653e\u5728\u4e0d\u540c\u7684\u76ee\u5f55\u4e0d\u540c\u7684\u6587\u4ef6\u7b49\u3002\u8fd9\u6837\u4f1a\u964d\u4f4e\u4ee3\u7801\u7684\u53ef\u7ef4\u62a4\u6027\u3002 - \u63a5\u53e3\u4e0d\u7edf\u4e00 - \u9519\u8bef\u7801\u4e0d\u89c4\u8303 \u89c4\u8303\u6982\u8ff0 \u00b6 \u6709\u54ea\u4e9b\u5730\u65b9\u9700\u8981\u5b9a\u5236\u89c4\u8303 - \u975e\u7f16\u7801\u7c7b\u89c4\u8303\uff0c\u4e3b\u8981\u5305\u542b\u5f00\u6e90\u89c4\u8303\uff0c\u6587\u6863\u89c4\u8303\uff0c\u7248\u672c\u89c4\u8303\uff0ccommit\u89c4\u8303\u548c\u53d1\u5e03\u89c4\u8303 - \u7f16\u7801\u7c7b\u89c4\u8303\uff0c\u6bd4\u5982\u76ee\u5f55\u89c4\u8303\uff0c\u4ee3\u7801\u89c4\u8303\uff0c\u63a5\u53e3\u89c4\u8303\uff0c\u65e5\u5fd7\u89c4\u8303\u548c\u9519\u8bef\u7801\u89c4\u8303\u3002 \u5f00\u6e90\u89c4\u8303 \u00b6 \u6587\u6863\u89c4\u8303 \u00b6 README\u89c4\u8303 \u00b6 \u9879\u76ee\u6587\u6863\u89c4\u8303 \u00b6 API\u63a5\u53e3\u6587\u6863 \u00b6 \u7f16\u5199\u8be6\u5c3d\u7684\u501f\u53e3\u6587\u6863\u4fbf\u4e8e\u524d\u540e\u7aef\u5f00\u53d1\u5b8c\u6210\u4ee5\u540e\u76f4\u63a5\u8fdb\u884c\u8054\u8c03\uff0c\u63d0\u9ad8\u5f00\u53d1\u6548\u7387\u3002\u9879\u76ee\u540e\u671f\uff0c\u8fd8\u53ef\u4ee5\u63d0\u4f9b\u7ed9\u4f7f\u7528\u8005\uff0c\u964d\u4f4e\u7ec4\u4ef6\u7684\u4f7f\u7528\u95e8\u69db\u7684\u540c\u65f6\u51cf\u5c11\u6c9f\u901a\u7684\u6210\u672c\u3002 \u7f16\u5199\u501f\u53e3\u6587\u6863\u53ef\u4ee5\u4f7f\u7528Word\uff0c\u5de5\u5177\uff08\u6bd4\u5982\u4e00\u4e9b\u7f16\u8f91\u5668\uff0c\u5728\u7ebf\u6587\u6863\u7b49\uff09\uff0c\u901a\u8fc7\u6ce8\u91ca\u751f\u6210\u548c\u7f16\u5199Markdown\u683c\u5f0f\u6587\u6863\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u7684\u56fe\u3002 \u76f8\u5bf9\u6765\u8bb2\uff0c\u901a\u8fc7\u6ce8\u91ca\u4ee5\u53camarkdown\u6765\u751f\u6210\u6587\u6863\u7684\u65b9\u5f0f\u4f7f\u7528\u7684\u8f83\u591a\uff0c\u6211\u4e2a\u4eba\u4f7f\u7528markdown\u4e5f\u662f\u4e60\u60ef\u4e86\uff0c\u5404\u79cd\u6027\u8d28\u7684\u6587\u6863\u5176\u5b9e\u90fd\u5728\u4f7f\u7528markdown \u76f8\u6bd4\u901a\u8fc7\u6ce8\u91ca\u751f\u6210\u7684\u65b9\u5f0f\uff0c\u7f16\u5199markdown\u683c\u5f0f\u7684\u501f\u53e3\u6587\u6863\u56ca\uff0c\u80fd\u8868\u8fbe\u66f4\u4e30\u5bcc\u7684\u5185\u5bb9\u548c\u683c\u5f0f\uff0c\u4e0d\u9700\u8981\u5728\u4ee3\u7801\u4e2d\u6dfb\u52a0\u5927\u91cf\u6ce8\u91ca\u3002 \u76f8\u6bd4word\uff0cmarkdown\u5360\u7528\u7a7a\u95f4\u66f4\u5c0f\uff0c\u80fd\u968f\u7740\u4ee3\u7801\u4ed3\u5e93\u4e00\u8d77\u53d1\u5e03\uff0c\u65b9\u4fbfAPI\u6587\u6863\u7684\u5206\u53d1\u548c\u67e5\u627e\u3002 \u76f8\u6bd4\u5728\u7ebf\u5de5\u5177\uff0cmarkdown\u683c\u5f0f\u7684\u6587\u6863\u514d\u53bb\u4e86\u7b2c\u4e09\u65b9\u5e73\u53f0\u7684\u4f9d\u8d56\u548c\u7f51\u7edc\u7684\u9650\u5236\u3002 API\u6587\u6863\u8981\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a \u5b8c\u6574\u7684API\u63a5\u53e3\u4ecb\u7ecd\u6587\u6863 API\u63a5\u53e3\u53d8\u66f4\u5386\u53f2\u6587\u6863 \u901a\u7528\u8bf4\u660e \u6570\u636e\u7ed3\u6784\u8bf4\u660e \u9519\u8bef\u7801\u63cf\u8ff0\u548c API\u63a5\u53e3\u4f7f\u7528\u6587\u6863\uff1a\u63a5\u53e3\u63cf\u8ff0\u3001\u8bf7\u6c42\u65b9\u6cd5\u3001\u8bf7\u6c42\u53c2\u6570\u3001\u8f93\u51fa\u53c2\u6570\u3001\u8bf7\u6c42\u793a\u4f8b\u3001\u54cd\u5e94\u793a\u4f8b","title":"1. \u89c4\u8303\u7b80\u4ecb"},{"location":"mds/go/advanced/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/%E8%A7%84%E8%8C%83%E7%AE%80%E4%BB%8B/#_1","text":"\u6709\u54ea\u4e9b\u5730\u65b9\u9700\u8981\u5b9a\u5236\u89c4\u8303 - \u975e\u7f16\u7801\u7c7b\u89c4\u8303\uff0c\u4e3b\u8981\u5305\u542b\u5f00\u6e90\u89c4\u8303\uff0c\u6587\u6863\u89c4\u8303\uff0c\u7248\u672c\u89c4\u8303\uff0ccommit\u89c4\u8303\u548c\u53d1\u5e03\u89c4\u8303 - \u7f16\u7801\u7c7b\u89c4\u8303\uff0c\u6bd4\u5982\u76ee\u5f55\u89c4\u8303\uff0c\u4ee3\u7801\u89c4\u8303\uff0c\u63a5\u53e3\u89c4\u8303\uff0c\u65e5\u5fd7\u89c4\u8303\u548c\u9519\u8bef\u7801\u89c4\u8303\u3002","title":"\u89c4\u8303\u6982\u8ff0"},{"location":"mds/go/advanced/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/%E8%A7%84%E8%8C%83%E7%AE%80%E4%BB%8B/#_2","text":"","title":"\u5f00\u6e90\u89c4\u8303"},{"location":"mds/go/advanced/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/%E8%A7%84%E8%8C%83%E7%AE%80%E4%BB%8B/#_3","text":"","title":"\u6587\u6863\u89c4\u8303"},{"location":"mds/go/advanced/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/%E8%A7%84%E8%8C%83%E7%AE%80%E4%BB%8B/#readme","text":"","title":"README\u89c4\u8303"},{"location":"mds/go/advanced/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/%E8%A7%84%E8%8C%83%E7%AE%80%E4%BB%8B/#_4","text":"","title":"\u9879\u76ee\u6587\u6863\u89c4\u8303"},{"location":"mds/go/advanced/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/%E8%A7%84%E8%8C%83%E7%AE%80%E4%BB%8B/#api","text":"\u7f16\u5199\u8be6\u5c3d\u7684\u501f\u53e3\u6587\u6863\u4fbf\u4e8e\u524d\u540e\u7aef\u5f00\u53d1\u5b8c\u6210\u4ee5\u540e\u76f4\u63a5\u8fdb\u884c\u8054\u8c03\uff0c\u63d0\u9ad8\u5f00\u53d1\u6548\u7387\u3002\u9879\u76ee\u540e\u671f\uff0c\u8fd8\u53ef\u4ee5\u63d0\u4f9b\u7ed9\u4f7f\u7528\u8005\uff0c\u964d\u4f4e\u7ec4\u4ef6\u7684\u4f7f\u7528\u95e8\u69db\u7684\u540c\u65f6\u51cf\u5c11\u6c9f\u901a\u7684\u6210\u672c\u3002 \u7f16\u5199\u501f\u53e3\u6587\u6863\u53ef\u4ee5\u4f7f\u7528Word\uff0c\u5de5\u5177\uff08\u6bd4\u5982\u4e00\u4e9b\u7f16\u8f91\u5668\uff0c\u5728\u7ebf\u6587\u6863\u7b49\uff09\uff0c\u901a\u8fc7\u6ce8\u91ca\u751f\u6210\u548c\u7f16\u5199Markdown\u683c\u5f0f\u6587\u6863\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u7684\u56fe\u3002 \u76f8\u5bf9\u6765\u8bb2\uff0c\u901a\u8fc7\u6ce8\u91ca\u4ee5\u53camarkdown\u6765\u751f\u6210\u6587\u6863\u7684\u65b9\u5f0f\u4f7f\u7528\u7684\u8f83\u591a\uff0c\u6211\u4e2a\u4eba\u4f7f\u7528markdown\u4e5f\u662f\u4e60\u60ef\u4e86\uff0c\u5404\u79cd\u6027\u8d28\u7684\u6587\u6863\u5176\u5b9e\u90fd\u5728\u4f7f\u7528markdown \u76f8\u6bd4\u901a\u8fc7\u6ce8\u91ca\u751f\u6210\u7684\u65b9\u5f0f\uff0c\u7f16\u5199markdown\u683c\u5f0f\u7684\u501f\u53e3\u6587\u6863\u56ca\uff0c\u80fd\u8868\u8fbe\u66f4\u4e30\u5bcc\u7684\u5185\u5bb9\u548c\u683c\u5f0f\uff0c\u4e0d\u9700\u8981\u5728\u4ee3\u7801\u4e2d\u6dfb\u52a0\u5927\u91cf\u6ce8\u91ca\u3002 \u76f8\u6bd4word\uff0cmarkdown\u5360\u7528\u7a7a\u95f4\u66f4\u5c0f\uff0c\u80fd\u968f\u7740\u4ee3\u7801\u4ed3\u5e93\u4e00\u8d77\u53d1\u5e03\uff0c\u65b9\u4fbfAPI\u6587\u6863\u7684\u5206\u53d1\u548c\u67e5\u627e\u3002 \u76f8\u6bd4\u5728\u7ebf\u5de5\u5177\uff0cmarkdown\u683c\u5f0f\u7684\u6587\u6863\u514d\u53bb\u4e86\u7b2c\u4e09\u65b9\u5e73\u53f0\u7684\u4f9d\u8d56\u548c\u7f51\u7edc\u7684\u9650\u5236\u3002 API\u6587\u6863\u8981\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a \u5b8c\u6574\u7684API\u63a5\u53e3\u4ecb\u7ecd\u6587\u6863 API\u63a5\u53e3\u53d8\u66f4\u5386\u53f2\u6587\u6863 \u901a\u7528\u8bf4\u660e \u6570\u636e\u7ed3\u6784\u8bf4\u660e \u9519\u8bef\u7801\u63cf\u8ff0\u548c API\u63a5\u53e3\u4f7f\u7528\u6587\u6863\uff1a\u63a5\u53e3\u63cf\u8ff0\u3001\u8bf7\u6c42\u65b9\u6cd5\u3001\u8bf7\u6c42\u53c2\u6570\u3001\u8f93\u51fa\u53c2\u6570\u3001\u8bf7\u6c42\u793a\u4f8b\u3001\u54cd\u5e94\u793a\u4f8b","title":"API\u63a5\u53e3\u6587\u6863"},{"location":"mds/go/advanced/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F/","text":"","title":"2. \u521b\u5efa\u578b\u6a21\u5f0f"},{"location":"mds/go/advanced/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AE%80%E4%BB%8B/","text":"\u8bbe\u8ba1\u6a21\u5f0f\u662f\u5565\u5462\uff1f\u7b80\u5355\u6765\u8bf4\uff0c\u5c31\u662f\u5c06\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u9700\u8981\u91cd\u590d\u6027\u89e3\u51b3\u7684\u7f16\u7801\u573a\u666f\uff0c\u6309\u6700\u4f73\u5b9e\u8df5\u7684\u65b9\u5f0f\u62bd\u8c61\u6210\u4e00\u4e2a\u6a21\u578b\uff0c\u6a21\u578b\u63cf\u8ff0\u7684\u89e3\u51b3\u65b9\u6cd5\u5c31\u662f\u8bbe\u8ba1\u6a21\u5f0f\u3002\u4f7f\u7528\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u53ef\u4ee5\u4f7f\u4ee3\u7801\u66f4\u6613\u4e8e\u7406\u89e3\uff0c\u4fdd\u8bc1\u4ee3\u7801\u7684\u91cd\u7528\u6027\u548c\u53ef\u9760\u6027\u3002 \u5728\u8f6f\u4ef6\u9886\u57df\uff0cGoF\uff08\u56db\u4eba\u5e2e\uff0c\u5168\u62fc Gang of Four\uff09\u9996\u6b21\u7cfb\u7edf\u5316\u63d0\u51fa\u4e86 3 \u5927\u7c7b\u3001\u5171 25 \u79cd\u53ef\u590d\u7528\u7684\u7ecf\u5178\u8bbe\u8ba1\u65b9\u6848\uff0c\u6765\u89e3\u51b3\u5e38\u89c1\u7684\u8f6f\u4ef6\u8bbe\u8ba1\u95ee\u9898\uff0c\u4e3a\u53ef\u590d\u7528\u8f6f\u4ef6\u8bbe\u8ba1\u5960\u5b9a\u4e86\u4e00\u5b9a\u7684\u7406\u8bba\u57fa\u7840\u3002\u4ece\u603b\u4f53\u4e0a\u8bf4\uff0c\u8fd9\u4e9b\u8bbe\u8ba1\u6a21\u5f0f\u53ef\u4ee5\u5206\u4e3a\u521b\u5efa\u578b\u6a21\u5f0f\u3001\u7ed3\u6784\u578b\u6a21\u5f0f\u3001\u884c\u4e3a\u578b\u6a21\u5f0f 3 \u5927\u7c7b\uff0c\u7528\u6765\u5b8c\u6210\u4e0d\u540c\u7684\u573a\u666f\u3002\u5176\u4e2d\uff0c\u7b80\u5355\u5de5\u5382\u6a21\u5f0f\u3001\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f\u548c\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f\u90fd\u5c5e\u4e8e\u5de5\u5382\u6a21\u5f0f\u3002","title":"1. \u7b80\u4ecb"},{"location":"mds/go/app/command/flag/flag/","text":"\u5728golang\u4e2d\u6709\u5f88\u591a\u65b9\u5f0f\u6765\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u6bd4\u5982\u5e38\u89c1\u7684\u6709pflag\uff0ccobra\uff08Kubernetes\u4e2d\u7528\u5230\u4e86\u8be5\u5e93\uff09\u7b49\u3002\u5f53\u7136\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u7cfb\u7edf\u9ed8\u8ba4\u7684 os.Args \u3002\u4f46\u662f\u5728Go \u6807\u51c6\u5e93\u4e2d\u63d0\u4f9b\u4e86flag\u5e93\u53ef\u4ee5\u5b9e\u73b0\u8be5\u529f\u80fd\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u6765\u770b\u4e00\u4e0b\u3002","title":"flag"},{"location":"mds/go/app/command/pflag/","text":"","title":"pflag"},{"location":"mds/go/app/config/viper/","text":"","title":"3. \u914d\u7f6e\u89e3\u6790"},{"location":"mds/go/app/log/zap/zap/","text":"\u4ecb\u7ecd \u00b6 \u5728\u8bb8\u591aGo\u8bed\u8a00\u9879\u76ee\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u597d\u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\u80fd\u591f\u63d0\u4f9b\u4e0b\u9762\u8fd9\u4e9b\u529f\u80fd\uff1a \u80fd\u591f\u5c06\u4e8b\u4ef6\u8bb0\u5f55\u5230\u6587\u4ef6\u4e2d\uff0c\u800c\u4e0d\u662f\u5e94\u7528\u7a0b\u5e8f\u63a7\u5236\u53f0\u3002 \u65e5\u5fd7\u5207\u5272-\u80fd\u591f\u6839\u636e\u6587\u4ef6\u5927\u5c0f\u3001\u65f6\u95f4\u6216\u95f4\u9694\u7b49\u6765\u5207\u5272\u65e5\u5fd7\u6587\u4ef6\u3002 \u652f\u6301\u4e0d\u540c\u7684\u65e5\u5fd7\u7ea7\u522b\u3002\u4f8b\u5982INFO\uff0cDEBUG\uff0cERROR\u7b49\u3002 \u80fd\u591f\u6253\u5370\u57fa\u672c\u4fe1\u606f\uff0c\u5982\u8c03\u7528\u6587\u4ef6/\u51fd\u6570\u540d\u548c\u884c\u53f7\uff0c\u65e5\u5fd7\u65f6\u95f4\u7b49\u3002 \u9ed8\u8ba4\u7684Go Logger \u00b6 \u5728\u4ecb\u7ecdUber-go\u7684zap\u5305\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u5148\u770b\u770bGo\u8bed\u8a00\u63d0\u4f9b\u7684\u57fa\u672c\u65e5\u5fd7\u529f\u80fd\u3002Go\u8bed\u8a00\u63d0\u4f9b\u7684\u9ed8\u8ba4\u65e5\u5fd7\u5305\u662f https://golang.org/pkg/log/ \u5b9e\u73b0GoLogger \u00b6 \u8bbe\u7f6eLogger \u00b6 \u5b9e\u73b0\u4e00\u4e2aGo\u8bed\u8a00\u4e2d\u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\u975e\u5e38\u7b80\u5355\u2014\u2014\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u65e5\u5fd7\u6587\u4ef6\uff0c\u7136\u540e\u8bbe\u7f6e\u5b83\u4e3a\u65e5\u5fd7\u7684\u8f93\u51fa\u4f4d\u7f6e\u3002 func SetupLogger () { logFileLocation , _ := os . OpenFile ( \"/Users/q1mi/test.log\" , os . O_CREATE | os . O_APPEND | os . O_RDWR , 0744 ) log . SetOutput ( logFileLocation ) } \u4f7f\u7528Logger \u00b6 \u8ba9\u6211\u4eec\u6765\u5199\u4e00\u4e9b\u865a\u62df\u7684\u4ee3\u7801\u6765\u4f7f\u7528\u8fd9\u4e2a\u65e5\u5fd7\u8bb0\u5f55\u5668\u3002 \u5728\u5f53\u524d\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u5efa\u7acb\u4e00\u4e2a\u5230URL\u7684HTTP\u8fde\u63a5\uff0c\u5e76\u5c06\u72b6\u6001\u4ee3\u7801/\u9519\u8bef\u8bb0\u5f55\u5230\u65e5\u5fd7\u6587\u4ef6\u4e2d\u3002 func simpleHttpGet ( url string ) { resp , err := http . Get ( url ) if err != nil { log . Printf ( \"Error fetching url %s : %s\" , url , err . Error ()) } else { log . Printf ( \"Status Code for %s : %s\" , url , resp . Status ) resp . Body . Close () } } logger\u7684\u8fd0\u884c \u00b6 \u73b0\u5728\u8ba9\u6211\u4eec\u6267\u884c\u4e0a\u9762\u7684\u4ee3\u7801\u5e76\u67e5\u770b\u65e5\u5fd7\u8bb0\u5f55\u5668\u7684\u8fd0\u884c\u60c5\u51b5\u3002 func main () { SetupLogger () simpleHttpGet ( \"www.google.com\" ) simpleHttpGet ( \"http://www.google.com\" ) } \u5f53\u6211\u4eec\u6267\u884c\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u80fd\u770b\u5230\u4e00\u4e2atest.log\u6587\u4ef6\u88ab\u521b\u5efa\uff0c\u4e0b\u9762\u7684\u5185\u5bb9\u4f1a\u88ab\u6dfb\u52a0\u5230\u8fd9\u4e2a\u65e5\u5fd7\u6587\u4ef6\u4e2d\u3002 2019 /05/24 01 :14:13 Error fetching url www.google.com : Get www.google.com: unsupported protocol scheme \"\" 2019 /05/24 01 :14:14 Status Code for http://www.google.com : 200 OK Go Logger\u7684\u4f18\u52bf\u548c\u52a3\u52bf \u00b6 \u4f18\u52bf \u5b83\u6700\u5927\u7684\u4f18\u70b9\u662f\u4f7f\u7528\u975e\u5e38\u7b80\u5355\u3002\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u4efb\u4f55io.Writer\u4f5c\u4e3a\u65e5\u5fd7\u8bb0\u5f55\u8f93\u51fa\u5e76\u5411\u5176\u53d1\u9001\u8981\u5199\u5165\u7684\u65e5\u5fd7\u3002 \u52a3\u52bf \u4ec5\u9650\u57fa\u672c\u7684\u65e5\u5fd7\u7ea7\u522b \u53ea\u6709\u4e00\u4e2aPrint\u9009\u9879\u3002\u4e0d\u652f\u6301INFO/DEBUG\u7b49\u591a\u4e2a\u7ea7\u522b\u3002 \u5bf9\u4e8e\u9519\u8bef\u65e5\u5fd7\uff0c\u5b83\u6709Fatal\u548cPanic Fatal\u65e5\u5fd7\u901a\u8fc7\u8c03\u7528os.Exit(1)\u6765\u7ed3\u675f\u7a0b\u5e8f Panic\u65e5\u5fd7\u5728\u5199\u5165\u65e5\u5fd7\u6d88\u606f\u4e4b\u540e\u629b\u51fa\u4e00\u4e2apanic \u4f46\u662f\u5b83\u7f3a\u5c11\u4e00\u4e2aERROR\u65e5\u5fd7\u7ea7\u522b\uff0c\u8fd9\u4e2a\u7ea7\u522b\u53ef\u4ee5\u5728\u4e0d\u629b\u51fapanic\u6216\u9000\u51fa\u7a0b\u5e8f\u7684\u60c5\u51b5\u4e0b\u8bb0\u5f55\u9519\u8bef \u7f3a\u4e4f\u65e5\u5fd7\u683c\u5f0f\u5316\u7684\u80fd\u529b\u2014\u2014\u4f8b\u5982\u8bb0\u5f55\u8c03\u7528\u8005\u7684\u51fd\u6570\u540d\u548c\u884c\u53f7\uff0c\u683c\u5f0f\u5316\u65e5\u671f\u548c\u65f6\u95f4\u683c\u5f0f\u3002\u7b49\u7b49\u3002 \u4e0d\u63d0\u4f9b\u65e5\u5fd7\u5207\u5272\u7684\u80fd\u529b\u3002 Uber Zap \u00b6 Zap\u662f\u975e\u5e38\u5feb\u7684\u3001\u7ed3\u6784\u5316\u7684\uff0c\u5206\u65e5\u5fd7\u7ea7\u522b\u7684Go\u65e5\u5fd7\u5e93\u3002 \u4e3a\u4ec0\u4e48\u9009\u62e9Uber-go zap \u00b6 \u5b83\u540c\u65f6\u63d0\u4f9b\u4e86\u7ed3\u6784\u5316\u65e5\u5fd7\u8bb0\u5f55\u548cprintf\u98ce\u683c\u7684\u65e5\u5fd7\u8bb0\u5f55 \u5b83\u975e\u5e38\u7684\u5feb \u6839\u636eUber-go Zap\u7684\u6587\u6863\uff0c\u5b83\u7684\u6027\u80fd\u6bd4\u7c7b\u4f3c\u7684\u7ed3\u6784\u5316\u65e5\u5fd7\u5305\u66f4\u597d\u2014\u2014\u4e5f\u6bd4\u6807\u51c6\u5e93\u66f4\u5feb\u3002 \u4ee5\u4e0b\u662fZap\u53d1\u5e03\u7684\u57fa\u51c6\u6d4b\u8bd5\u4fe1\u606f \u8bb0\u5f55\u4e00\u6761\u6d88\u606f\u548c10\u4e2a\u5b57\u6bb5: \u8bb0\u5f55\u4e00\u4e2a\u9759\u6001\u5b57\u7b26\u4e32\uff0c\u6ca1\u6709\u4efb\u4f55\u4e0a\u4e0b\u6587\u6216printf\u98ce\u683c\u7684\u6a21\u677f\uff1a \u5b89\u88c5 \u00b6 \u8fd0\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u5b89\u88c5zap go get -u go.uber.org/zap \u914d\u7f6eZap Logger \u00b6 Zap\u63d0\u4f9b\u4e86\u4e24\u79cd\u7c7b\u578b\u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\u2014Sugared Logger\u548cLogger\u3002 \u5728\u6027\u80fd\u5f88\u597d\u4f46\u4e0d\u662f\u5f88\u5173\u952e\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u4f7f\u7528SugaredLogger\u3002\u5b83\u6bd4\u5176\u4ed6\u7ed3\u6784\u5316\u65e5\u5fd7\u8bb0\u5f55\u5305\u5feb4-10\u500d\uff0c\u5e76\u4e14\u652f\u6301\u7ed3\u6784\u5316\u548cprintf\u98ce\u683c\u7684\u65e5\u5fd7\u8bb0\u5f55\u3002 \u5728\u6bcf\u4e00\u5fae\u79d2\u548c\u6bcf\u4e00\u6b21\u5185\u5b58\u5206\u914d\u90fd\u5f88\u91cd\u8981\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u4f7f\u7528Logger\u3002\u5b83\u751a\u81f3\u6bd4SugaredLogger\u66f4\u5feb\uff0c\u5185\u5b58\u5206\u914d\u6b21\u6570\u4e5f\u66f4\u5c11\uff0c\u4f46\u5b83\u53ea\u652f\u6301\u5f3a\u7c7b\u578b\u7684\u7ed3\u6784\u5316\u65e5\u5fd7\u8bb0\u5f55\u3002 Logger \u00b6 \u901a\u8fc7\u8c03\u7528 zap.NewProduction() / zap.NewDevelopment() \u6216\u8005 zap.Example() \u521b\u5efa\u4e00\u4e2aLogger\u3002 \u4e0a\u9762\u7684\u6bcf\u4e00\u4e2a\u51fd\u6570\u90fd\u5c06\u521b\u5efa\u4e00\u4e2alogger\u3002\u552f\u4e00\u7684\u533a\u522b\u5728\u4e8e\u5b83\u5c06\u8bb0\u5f55\u7684\u4fe1\u606f\u4e0d\u540c\u3002\u4f8b\u5982production logger\u9ed8\u8ba4\u8bb0\u5f55\u8c03\u7528\u51fd\u6570\u4fe1\u606f\u3001\u65e5\u671f\u548c\u65f6\u95f4\u7b49\u3002 \u901a\u8fc7Logger\u8c03\u7528Info/Error\u7b49\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u65e5\u5fd7\u90fd\u4f1a\u6253\u5370\u5230\u5e94\u7528\u7a0b\u5e8f\u7684console\u754c\u9762\u3002 \u6211\u4eec\u9996\u5148\u4f7f\u7528\u666e\u901a\u7684logger\u6765\u505a\u4e00\u4e2a\u7b80\u5355\u7684\u6d4b\u8bd5 package main import ( \"net/http\" \"go.uber.org/zap\" ) var logger * zap . Logger // InitProductionLogger ... func InitProductionLogger () { logger , _ = zap . NewProduction () } func simpleHTTPGet ( url string ) { resp , err := http . Get ( url ) if err != nil { logger . Error ( \"Error fetching url...\" , zap . String ( \"url\" , url ), zap . Error ( err ), ) } else { logger . Info ( \"Success...\" , zap . String ( \"statusCode\" , resp . Status ), zap . String ( \"url\" , url ), ) resp . Body . Close () } } func main () { InitProductionLogger () // \u5728\u7a0b\u5e8f\u9000\u51fa\u4e4b\u524d\uff0c\u628a\u7f13\u51b2\u533a\u7684\u65e5\u5fd7\u90fd\u5237\u5230\u78c1\u76d8\u91cc\u3002 defer logger . Sync () simpleHTTPGet ( \"http://www.baidu.com\" ) } \u6700\u540e\u6253\u5370\u51fa\u6765\u7684\u7ed3\u679c\u5982\u4e0b\uff1a [ root@xeq-vm-197-77-opsorder-test zap-demo ] # go run main.go { \"level\" : \"info\" , \"ts\" :1622196068.7713954, \"caller\" : \"zap-demo/main.go:25\" , \"msg\" : \"Success...\" , \"statusCode\" : \"200 OK\" , \"url\" : \"http://www.baidu.com\" } \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u521b\u5efa\u4e86\u4e00\u4e2aLogger\uff0c\u7136\u540e\u4f7f\u7528Info/ Error\u7b49Logger\u65b9\u6cd5\u8bb0\u5f55\u6d88\u606f\u3002\u65e5\u5fd7\u8bb0\u5f55\u5668\u7684\u8bed\u6cd5\u662f\u8fd9\u6837\u7684 func ( log * Logger ) MethodXXX ( msg string , fields ... Field ) \u8fd9\u4e2a MethodXXX \u53ef\u80fd\u662fInfo,Error,Debug,Panic\u7b49\u7b49\uff0c\u6bcf\u4e00\u4e2a\u65b9\u6cd5\u90fd\u63a5\u6536\u4e00\u4e2a\u6d88\u606f\u5b57\u7b26\u4e32\u8fd8\u6709\u4efb\u610f\u6570\u91cf\u7684 zapcore.Field \u53c2\u6570\uff0c\u4ee5Info\u7ea7\u522b\u7684\u65e5\u5fd7\u4e3a\u4f8b // Info logs a message at InfoLevel. The message includes any fields passed // at the log site, as well as any fields accumulated on the logger. func ( log * Logger ) Info ( msg string , fields ... Field ) { if ce := log . check ( InfoLevel , msg ); ce != nil { ce . Write ( fields ... ) } } SugarLogger \u00b6 SugarLogger\u7684\u8c03\u7528\u65b9\u5f0f\u548cLogger\u5927\u540c\u5c0f\u5f02\uff0c\u7a0d\u5fae\u6709\u4e00\u4e9b\u4e0d\u592a\u4e00\u6837\u7684\u5730\u65b9 \u5927\u90e8\u5206\u7684\u5b9e\u73b0\u57fa\u672c\u90fd\u76f8\u540c\u3002 \u60df\u4e00\u7684\u533a\u522b\u662f\uff0c\u6211\u4eec\u901a\u8fc7\u8c03\u7528\u4e3blogger\u7684. Sugar()\u65b9\u6cd5\u6765\u83b7\u53d6\u4e00\u4e2aSugaredLogger\u3002 \u7136\u540e\u4f7f\u7528SugaredLogger\u4ee5printf\u683c\u5f0f\u8bb0\u5f55\u8bed\u53e5 package main import ( \"net/http\" \"go.uber.org/zap\" ) var sugarlogger * zap . SugaredLogger // InitProductionSugarLogger ... func InitProductionSugarLogger () { logger , _ := zap . NewProduction () sugarlogger = logger . Sugar () } func simpleHTTPGet ( url string ) { sugarlogger . Debug ( \"Trying to hit Get request for %s\" ) resp , err := http . Get ( url ) if err != nil { sugarlogger . Error ( \"Error fetching url...\" , zap . String ( \"url\" , url ), zap . Error ( err ), ) } else { sugarlogger . Info ( \"Success...\" , zap . String ( \"statusCode\" , resp . Status ), zap . String ( \"url\" , url ), ) resp . Body . Close () } } func main () { InitProductionSugarLogger () // \u5728\u7a0b\u5e8f\u9000\u51fa\u4e4b\u524d\uff0c\u628a\u7f13\u51b2\u533a\u7684\u65e5\u5fd7\u90fd\u5237\u5230\u78c1\u76d8\u91cc\u3002 defer sugarlogger . Sync () simpleHTTPGet ( \"http://www.baidu.com\" ) } \u8f93\u51fa\u7684\u7ed3\u679c\u4e3a [ root@xeq-vm-197-77-opsorder-test zap-demo ] # go run main.go { \"level\" : \"info\" , \"ts\" :1622198680.0117903, \"caller\" : \"zap-demo/main.go:26\" , \"msg\" : \"Success...{statusCode 15 0 200 OK <nil>} {url 15 0 http://www.baidu.com <nil>}\" } \u521a\u624d\u7528\u7684\u662f zap.NewProduction \uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u7528\u4e00\u4e0bdevelop\u7684\u8bd5\u8bd5 // InitProductionSugarLogger ... func InitProductionSugarLogger () { logger , _ := zap . NewDevelopment () sugarlogger = logger . Sugar () } \u7136\u540e\u6211\u4eec\u518d\u770b\u4e00\u4e0b\u65e5\u5fd7\u7684\u6570\u636e [ root@xeq-vm-197-77-opsorder-test zap-demo ] # go run main.go 2021 -05-28T18:47:35.750+0800 DEBUG zap-demo/main.go:17 Trying to hit Get request for %s 2021 -05-28T18:47:35.941+0800 INFO zap-demo/main.go:26 Success... { statusCode 15 0 200 OK <nil> } { url 15 0 http://www.baidu.com <nil> } \u8fd9\u4e2a\u5c31\u662f\u5f00\u53d1\u73af\u5883\uff0c\u6bd4\u8f83\u9002\u5408\u5728\u7ec8\u7aef\u8f93\u51fa\u7684\u65e5\u5fd7\u4e86\u3002 \u5b9a\u5236Logger \u00b6 \u5c06\u65e5\u5fd7\u5199\u5165\u6587\u4ef6\u800c\u4e0d\u662f\u7ec8\u7aef \u00b6 \u6211\u4eec\u8981\u505a\u7684\u7b2c\u4e00\u4e2a\u66f4\u6539\u662f\u628a\u65e5\u5fd7\u5199\u5165\u6587\u4ef6\uff0c\u800c\u4e0d\u662f\u6253\u5370\u5230\u5e94\u7528\u7a0b\u5e8f\u63a7\u5236\u53f0\u3002 \u6211\u4eec\u5c06\u4f7f\u7528zap.New(\u2026)\u65b9\u6cd5\u6765\u624b\u52a8\u4f20\u9012\u6240\u6709\u914d\u7f6e\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u50cfzap.NewProduction()\u8fd9\u6837\u7684\u9884\u7f6e\u65b9\u6cd5\u6765\u521b\u5efalogger\u3002 func New ( core zapcore . Core , options ... Option ) * Logger zapcore.Core \u9700\u8981\u4e09\u4e2a\u914d\u7f6e\uff0c\u5206\u522b\u4e3a Encoder \uff0c WriteSyncer \uff0c LogLevel . 1\u3001Encoder \u7f16\u7801\u5668(\u5982\u4f55\u5199\u5165\u65e5\u5fd7)\u3002\u6211\u4eec\u5c06\u4f7f\u7528\u5f00\u7bb1\u5373\u7528\u7684NewJSONEncoder()\uff0c\u5e76\u4f7f\u7528\u9884\u5148\u8bbe\u7f6e\u7684ProductionEncoderConfig()\u3002 zapcore . NewJSONEncoder ( zap . NewProductionEncoderConfig ()) 2\u3001WriterSyncer \u6307\u5b9a\u65e5\u5fd7\u5c06\u5199\u5230\u54ea\u91cc\u53bb\u3002\u6211\u4eec\u4f7f\u7528zapcore.AddSync()\u51fd\u6570\u5e76\u4e14\u5c06\u6253\u5f00\u7684\u6587\u4ef6\u53e5\u67c4\u4f20\u8fdb\u53bb\u3002 file , _ := os . Create ( \"./test.log\" ) writeSyncer := zapcore . AddSync ( file ) 3\u3001log level \u54ea\u79cd\u7ea7\u522b\u7684\u65e5\u5fd7\u5c06\u88ab\u5199\u5165 \u90a3\u4e48\u91cd\u65b0\u6539\u9020\u8fc7\u540e\u7684\u4ee3\u7801\u5c31\u53d8\u6210\u4e86\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50 package main import ( \"net/http\" \"os\" \"go.uber.org/zap\" \"go.uber.org/zap/zapcore\" ) var sugarlogger * zap . SugaredLogger // InitLogger ... func InitLogger () { writeSyncer := getLogWriter () encoder := getEncoder () core := zapcore . NewCore ( encoder , writeSyncer , zapcore . DebugLevel ) logger := zap . New ( core ) sugarlogger = logger . Sugar () } func getLogWriter () zapcore . WriteSyncer { file , _ := os . Create ( \"./test.log\" ) return zapcore . AddSync ( file ) } func getEncoder () zapcore . Encoder { return zapcore . NewJSONEncoder ( zap . NewProductionEncoderConfig ()) } func simpleHTTPGet ( url string ) { sugarlogger . Debug ( \"Trying to hit Get request for %s\" ) resp , err := http . Get ( url ) if err != nil { sugarlogger . Error ( \"Error fetching url...\" , zap . String ( \"url\" , url ), zap . Error ( err ), ) } else { sugarlogger . Info ( \"Success...\" , zap . String ( \"statusCode\" , resp . Status ), zap . String ( \"url\" , url ), ) resp . Body . Close () } } func main () { InitLogger () // \u5728\u7a0b\u5e8f\u9000\u51fa\u4e4b\u524d\uff0c\u628a\u7f13\u51b2\u533a\u7684\u65e5\u5fd7\u90fd\u5237\u5230\u78c1\u76d8\u91cc\u3002 defer sugarlogger . Sync () simpleHTTPGet ( \"http://www.baidu.com\" ) } \u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u8fd0\u884c\u5b8c\u4e86\u4ee5\u540e\uff0c\u53d1\u73b0\u5176\u5b9e\u7ec8\u7aef\u4ec0\u4e48\u90fd\u6ca1\u6709\u8f93\u51fa\uff0c\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u540c\u7ea7\u76ee\u5f55\u4e0b\u591a\u51fa\u6765\u4e86\u4e00\u4e2atest.log\u7684\u6587\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u4e00\u4e0b [ root@xeq-vm-197-77-opsorder-test zap-demo ] # cat test.log { \"level\" : \"debug\" , \"ts\" :1622199436.791037, \"msg\" : \"Trying to hit Get request for %s\" } { \"level\" : \"info\" , \"ts\" :1622199436.990979, \"msg\" : \"Success...{statusCode 15 0 200 OK <nil>} {url 15 0 http://www.baidu.com <nil>}\" } \u4e0a\u9762\u6211\u4f7f\u7528\u4e86Debug\u7684level\uff0c\u5176\u5b9e\u8fd8\u6709\u5f88\u591alevel\uff0c\u8fd9\u4e9b\u90fd\u662f\u5e38\u91cf\u3002 type Level int8 const ( // DebugLevel logs are typically voluminous, and are usually disabled in // production. DebugLevel Level = iota - 1 // InfoLevel is the default logging priority. InfoLevel // WarnLevel logs are more important than Info, but don't need individual // human review. WarnLevel // ErrorLevel logs are high-priority. If an application is running smoothly, // it shouldn't generate any error-level logs. ErrorLevel // DPanicLevel logs are particularly important errors. In development the // logger panics after writing the message. DPanicLevel // PanicLevel logs a message, then panics. PanicLevel // FatalLevel logs a message, then calls os.Exit(1). FatalLevel _minLevel = DebugLevel _maxLevel = FatalLevel ) \u5c06JSON Encoder\u66f4\u6539\u4e3a\u666e\u901a\u7684Log Encoder \u00b6 \u73b0\u5728\uff0c\u6211\u4eec\u5e0c\u671b\u5c06\u7f16\u7801\u5668\u4ece JSON Encoder \u66f4\u6539\u4e3a\u666e\u901aEncoder\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5c06 NewJSONEncoder() \u66f4\u6539\u4e3a NewConsoleEncoder() \u3002 return zapcore . NewConsoleEncoder ( zap . NewProductionEncoderConfig ()) \u90a3\u4e48\u65e5\u5fd7\u7684\u7ed3\u679c\u5c31\u662f\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50 1 .6223397950440078e+09 debug Trying to hit Get request for %s 1 .6223397961095738e+09 error Error fetching url... { url 15 0 http://www.baidu.com <nil> } { error 26 0 Get \"http://www.baidu.com\" : dial tcp: lookup www.baidu.com on 8 .8.8.8:53: read udp 172 .18.196.77:40945->8.8.8.8:53: i/o timeout } \u6587\u4ef6\u7684\u8ffd\u52a0 \u00b6 \u6211\u4eec\u53d1\u73b0\u8bf4\u6bcf\u6b21\u6587\u4ef6\u90fd\u662f\u6e05\u7a7a\u91cd\u5199\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5230os\u5305\u7684\u4e00\u4e9b\u6587\u4ef6\u5c5e\u6027\uff0c\u7136\u540e\u8ba9\u6587\u4ef6\u53ef\u4ee5\u662f\u8ffd\u52a0\u7684\u3002 file , _ := os . OpenFile ( \"./test.log\" , os . O_CREATE | os . O_APPEND | os . O_RDWR , 0744 ) \u66f4\u6539\u65f6\u95f4\u7f16\u7801\u5e76\u6dfb\u52a0\u8c03\u7528\u8005\u8be6\u7ec6\u4fe1\u606f \u00b6 \u9274\u4e8e\u6211\u4eec\u5bf9\u914d\u7f6e\u6240\u505a\u7684\u66f4\u6539\uff0c\u6709\u4e0b\u9762\u4e24\u4e2a\u95ee\u9898\uff1a \u65f6\u95f4\u662f\u4ee5\u975e\u4eba\u7c7b\u53ef\u8bfb\u7684\u65b9\u5f0f\u5c55\u793a\uff0c\u4f8b\u59821.572161051846623e+09 \u8c03\u7528\u65b9\u51fd\u6570\u7684\u8be6\u7ec6\u4fe1\u606f\u6ca1\u6709\u663e\u793a\u5728\u65e5\u5fd7\u4e2d \u6211\u4eec\u8981\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u8986\u76d6\u9ed8\u8ba4\u7684 ProductionConfig() \uff0c\u5e76\u8fdb\u884c\u4ee5\u4e0b\u66f4\u6539: \u4fee\u6539\u65f6\u95f4\u7f16\u7801\u5668 \u5728\u65e5\u5fd7\u6587\u4ef6\u4e2d\u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u8bb0\u5f55\u65e5\u5fd7\u7ea7\u522b func getEncoder () zapcore . Encoder { encoderConfig := zap . NewProductionEncoderConfig () // \u8bbe\u7f6e\u65f6\u95f4\u683c\u5f0f\u4e3aISO8601\u7684\u4e00\u4e2a\u65f6\u95f4\u683c\u5f0f encoderConfig . EncodeTime = zapcore . ISO8601TimeEncoder // \u8bbe\u7f6e\u65e5\u5fd7\u7684\u7ea7\u522b\u4e3a\u7b54\u8c22 encoderConfig . EncodeLevel = zapcore . CapitalLevelEncoder return zapcore . NewConsoleEncoder ( encoderConfig ) } \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u4fee\u6539zap logger\u4ee3\u7801\uff0c\u6dfb\u52a0\u5c06\u8c03\u7528\u51fd\u6570\u4fe1\u606f\u8bb0\u5f55\u5230\u65e5\u5fd7\u4e2d\u7684\u529f\u80fd\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u5c06\u5728 zap.New(..) \u51fd\u6570\u4e2d\u6dfb\u52a0\u4e00\u4e2aOption\u3002 // addcaller\u5c31\u662f\u628a\u8c03\u7528\u51fd\u6570\u7684\u76f8\u5173\u4fe1\u606f\u6dfb\u52a0\u8fdb\u53bb\u3002 logger := zap . New ( core , zap . AddCaller ()) \u5f53\u4f7f\u7528\u8fd9\u4e9b\u4fee\u6539\u8fc7\u7684logger\u914d\u7f6e\u8c03\u7528\u4e0a\u8ff0\u90e8\u5206\u7684main()\u51fd\u6570\u65f6\uff0c\u4ee5\u4e0b\u8f93\u51fa\u5c06\u6253\u5370\u5728\u6587\u4ef6 test.log \u4e2d\uff0c\u90a3\u4e48\u8f93\u51fa\u7684\u7ed3\u679c\u5c31\u662f\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50\u7684\u3002 2021 -05-30T10:07:14.890+0800 DEBUG zap-demo/main.go:37 Trying to hit Get request for %s 2021 -05-30T10:07:15.066+0800 INFO zap-demo/main.go:46 Success... { statusCode 15 0 200 OK <nil> } { url 15 0 http://www.baidu.com <nil> } \u5176\u5b9e zap.NewProductionEncoderConfig \u5c31\u662f\u6784\u9020\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u90a3\u4e48\u5982\u679c\u77e5\u9053\u5b83\u662f\u6784\u9020\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u81ea\u5df1\u5176\u5b9e\u4e5f\u662f\u53ef\u4ee5\u5b9a\u5236\u7684\uff0c\u6bd4\u5982\u91cc\u9762\u7684timekey\uff0clevelkey\u7b49\u7b49\u4fe1\u606f\u3002 func NewProductionEncoderConfig () zapcore . EncoderConfig { return zapcore . EncoderConfig { TimeKey : \"ts\" , LevelKey : \"level\" , NameKey : \"logger\" , CallerKey : \"caller\" , FunctionKey : zapcore . OmitKey , MessageKey : \"msg\" , StacktraceKey : \"stacktrace\" , LineEnding : zapcore . DefaultLineEnding , EncodeLevel : zapcore . LowercaseLevelEncoder , EncodeTime : zapcore . EpochTimeEncoder , EncodeDuration : zapcore . SecondsDurationEncoder , EncodeCaller : zapcore . ShortCallerEncoder , } } \u90a3\u4e48\u5176\u5b9e\u6211\u4e0a\u9762\u7684getEncode\u4e5f\u53ef\u4ee5\u5199\u4e3a\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50\uff0c\u7136\u540e\u81ea\u5df1\u53bb\u5b9a\u5236\u4e00\u4e0b\u6211\u4eec\u7684\u65e5\u5fd7\u76f8\u5173\u7684\u4fe1\u606f\u3002 func getEncoder () zapcore . Encoder { encoderConfig := zapcore . EncoderConfig { TimeKey : \"ts\" , LevelKey : \"level\" , NameKey : \"logger\" , CallerKey : \"caller\" , FunctionKey : zapcore . OmitKey , MessageKey : \"msg\" , StacktraceKey : \"stacktrace\" , LineEnding : zapcore . DefaultLineEnding , EncodeLevel : zapcore . CapitalLevelEncoder , EncodeTime : zapcore . ISO8601TimeEncoder , EncodeDuration : zapcore . SecondsDurationEncoder , EncodeCaller : zapcore . ShortCallerEncoder , } return zapcore . NewConsoleEncoder ( encoderConfig ) } \u90a3\u4e48\u62d3\u5c55\u4e00\u4e0b\uff0c\u63a5\u4e0b\u6765\u6211\u65e2\u60f3\u8981\u5728\u6587\u4ef6\u4e2d\u5199\u5165\u53c8\u60f3\u5728\u7ec8\u7aef\u4e2d\u8f93\u51fa\u6539\u600e\u4e48\u529e\uff1f \u65e5\u5fd7\u7684\u5207\u5272\u5f52\u6863 \u00b6 \u9996\u5148Zap\u5e93\u5e76\u4e0d\u652f\u6301\u5f52\u6863\u548c\u5207\u5272\u65e5\u5fd7\u6587\u4ef6\uff0c\u56e0\u6b64\u9700\u8981\u4e00\u4e2a\u7b2c\u4e09\u65b9\u7684\u5e93\u6765\u5b9e\u73b0\uff0c\u5c31\u662f Lumberjack \uff0c\u8fd9\u4e2a\u4e0d\u652f\u6301\u6309\u7167\u65f6\u95f4\u8fdb\u884c\u5207\u5272\u6587\u4ef6\u3002\u5f53\u7136\u5982\u679c\u8bf4\u5728\u670d\u52a1\u5668\u4e0a\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528logrotate\uff0c\u8fd9\u6837\u5c31\u65e0\u6240\u8c13\u4e86\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4e0d\u7528\u8fd9\u4e2a\u5305\u3002 \u5b89\u88c5 \u00b6 go get - u github . com / natefinch / lumberjack zap logger\u4e2d\u52a0\u5165Lumberjack \u00b6 \u8981\u5728zap\u4e2d\u52a0\u5165Lumberjack\u652f\u6301\uff0c\u6211\u4eec\u9700\u8981\u4fee\u6539WriteSyncer\u4ee3\u7801\u3002\u6211\u4eec\u5c06\u6309\u7167\u4e0b\u9762\u7684\u4ee3\u7801\u4fee\u6539getLogWriter()\u51fd\u6570\uff1a func getLogWriter () zapcore . WriteSyncer { lumberJackLogger := & lumberjack . Logger { Filename : \"./test.log\" , MaxSize : 10 , MaxBackups : 5 , MaxAge : 30 , Compress : false , } return zapcore . AddSync ( lumberJackLogger ) } Lumberjack Logger\u91c7\u7528\u4ee5\u4e0b\u5c5e\u6027\u4f5c\u4e3a\u8f93\u5165: Filename: \u65e5\u5fd7\u6587\u4ef6\u7684\u4f4d\u7f6e MaxSize\uff1a\u5728\u8fdb\u884c\u5207\u5272\u4e4b\u524d\uff0c\u65e5\u5fd7\u6587\u4ef6\u7684\u6700\u5927\u5927\u5c0f\uff08\u4ee5MB\u4e3a\u5355\u4f4d\uff09 MaxBackups\uff1a\u4fdd\u7559\u65e7\u6587\u4ef6\u7684\u6700\u5927\u4e2a\u6570 MaxAges\uff1a\u4fdd\u7559\u65e7\u6587\u4ef6\u7684\u6700\u5927\u5929\u6570 Compress\uff1a\u662f\u5426\u538b\u7f29/\u5f52\u6863\u65e7\u6587\u4ef6 Zip with Gin \u00b6 Gin\u6846\u67b6\u4e2d\u7684\u9ed8\u8ba4\u4e2d\u95f4\u4ef6 \u00b6 \u9996\u5148\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u6700\u7b80\u5355\u7684gin\u9879\u76ee\uff1a func main () { r := gin . Default () r . GET ( \"/hello\" , func ( c * gin . Context ) { c . String ( \"hello liwenzhou.com!\" ) }) r . Run ( } \u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e00\u4e0b gin.Default() \u7684\u6e90\u7801\uff1a func Default () * Engine { debugPrintWARNINGDefault () engine := New () engine . Use ( Logger (), Recovery ()) return engine } \u4e5f\u5c31\u662f\u6211\u4eec\u5728\u4f7f\u7528 gin.Default() \u7684\u540c\u65f6\u662f\u7528\u5230\u4e86gin\u6846\u67b6\u5185\u7684\u4e24\u4e2a\u9ed8\u8ba4\u4e2d\u95f4\u4ef6 Logger() \u548c Recovery() \u3002 \u5176\u4e2d Logger() \u662f\u628agin\u6846\u67b6\u672c\u8eab\u7684\u65e5\u5fd7\u8f93\u51fa\u5230\u6807\u51c6\u8f93\u51fa\uff08\u6211\u4eec\u672c\u5730\u5f00\u53d1\u8c03\u8bd5\u65f6\u5728\u7ec8\u7aef\u8f93\u51fa\u7684\u90a3\u4e9b\u65e5\u5fd7\u5c31\u662f\u5b83\u7684\u529f\u52b3\uff09\uff0c\u800c Recovery() \u662f\u5728\u7a0b\u5e8f\u51fa\u73b0panic\u7684\u65f6\u5019\u6062\u590d\u73b0\u573a\u5e76\u5199\u5165500\u54cd\u5e94\u7684\u3002 \u57fa\u4e8ezap\u7684\u4e2d\u95f4\u4ef6 \u00b6 \u6211\u4eec\u53ef\u4ee5\u6a21\u4effLogger()\u548cRecovery()\u7684\u5b9e\u73b0\uff0c\u4f7f\u7528\u6211\u4eec\u7684\u65e5\u5fd7\u5e93\u6765\u63a5\u6536gin\u6846\u67b6\u9ed8\u8ba4\u8f93\u51fa\u7684\u65e5\u5fd7\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u91cd\u5199\u4e86\u8fd9\u4e24\u4e2a\u4e2d\u95f4\u4ef6\u7136\u540e\u8fdb\u884c\u4e86\u5e94\u7528\u3002 package main import ( \"net\" \"net/http\" \"net/http/httputil\" \"os\" \"runtime/debug\" \"strings\" \"time\" \"github.com/gin-gonic/gin\" \"github.com/natefinch/lumberjack\" \"go.uber.org/zap\" \"go.uber.org/zap/zapcore\" ) var sugarlogger * zap . SugaredLogger // InitLogger ... func InitLogger () { writeSyncer := getLogWriter () encoder := getEncoder () core := zapcore . NewCore ( encoder , writeSyncer , zapcore . DebugLevel ) logger := zap . New ( core , zap . AddCaller ()) sugarlogger = logger . Sugar () } func getLogWriter () zapcore . WriteSyncer { luberJackLogger := & lumberjack . Logger { Filename : \"./test.log\" , MaxSize : 10 , MaxBackups : 5 , MaxAge : 30 , Compress : false , } return zapcore . AddSync ( luberJackLogger ) } func getEncoder () zapcore . Encoder { encoderConfig := zapcore . EncoderConfig { TimeKey : \"ts\" , LevelKey : \"level\" , NameKey : \"logger\" , CallerKey : \"caller\" , FunctionKey : zapcore . OmitKey , MessageKey : \"msg\" , StacktraceKey : \"stacktrace\" , LineEnding : zapcore . DefaultLineEnding , EncodeLevel : zapcore . CapitalLevelEncoder , EncodeTime : zapcore . ISO8601TimeEncoder , EncodeDuration : zapcore . SecondsDurationEncoder , EncodeCaller : zapcore . ShortCallerEncoder , } return zapcore . NewJSONEncoder ( encoderConfig ) } // GinLogger \u63a5\u6536gin\u6846\u67b6\u9ed8\u8ba4\u7684\u65e5\u5fd7 func GinLogger ( logger * zap . SugaredLogger ) gin . HandlerFunc { return func ( c * gin . Context ) { start := time . Now () path := c . Request . URL . Path query := c . Request . URL . RawQuery c . Next () cost := time . Since ( start ) logger . Info ( path , zap . Int ( \"status\" , c . Writer . Status ()), zap . String ( \"method\" , c . Request . Method ), zap . String ( \"path\" , path ), zap . String ( \"query\" , query ), zap . String ( \"ip\" , c . ClientIP ()), zap . String ( \"user-agent\" , c . Request . UserAgent ()), zap . String ( \"errors\" , c . Errors . ByType ( gin . ErrorTypePrivate ). String ()), zap . Duration ( \"cost\" , cost ), ) } } // GinRecovery recover\u6389\u9879\u76ee\u53ef\u80fd\u51fa\u73b0\u7684panic func GinRecovery ( logger * zap . SugaredLogger , stack bool ) gin . HandlerFunc { return func ( c * gin . Context ) { defer func () { if err := recover (); err != nil { // Check for a broken connection, as it is not really a // condition that warrants a panic stack trace. var brokenPipe bool if ne , ok := err .( * net . OpError ); ok { if se , ok := ne . Err .( * os . SyscallError ); ok { if strings . Contains ( strings . ToLower ( se . Error ()), \"broken pipe\" ) || strings . Contains ( strings . ToLower ( se . Error ()), \"connection reset by peer\" ) { brokenPipe = true } } } httpRequest , _ := httputil . DumpRequest ( c . Request , false ) if brokenPipe { logger . Error ( c . Request . URL . Path , zap . Any ( \"error\" , err ), zap . String ( \"request\" , string ( httpRequest )), ) // If the connection is dead, we can't write a status to it. c . Error ( err .( error )) // nolint: errcheck c . Abort () return } if stack { logger . Error ( \"[Recovery from panic]\" , zap . Any ( \"error\" , err ), zap . String ( \"request\" , string ( httpRequest )), zap . String ( \"stack\" , string ( debug . Stack ())), ) } else { logger . Error ( \"[Recovery from panic]\" , zap . Any ( \"error\" , err ), zap . String ( \"request\" , string ( httpRequest )), ) } c . AbortWithStatus ( http . StatusInternalServerError ) } }() c . Next () } } func main () { InitLogger () r := gin . New () r . Use ( GinLogger ( sugarlogger ), GinRecovery ( sugarlogger , true )) r . GET ( \"/hello\" , func ( c * gin . Context ) { c . String ( http . StatusOK , \"hello world!\" ) }) r . Run ( \":10086\" ) } \u90a3\u4e48\u5728\u5b9e\u9645\u7684gin\u9879\u76ee\u4e2d\uff0c\u6211\u4eec\u5e94\u8be5\u628a\u4e0a\u9762\u7684\u903b\u8f91\u62bd\u8c61\u51fa\u6765\u4e00\u4e2alogger.go\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5177\u4f53\u7684\u914d\u7f6e\u6587\u4ef6\u5982\u4e0b \u53c2\u8003\u6587\u6863 \u00b6 \u5728Go\u8bed\u8a00\u9879\u76ee\u4e2d\u4f7f\u7528Zap\u65e5\u5fd7\u5e93","title":"zap"},{"location":"mds/go/app/log/zap/zap/#_1","text":"\u5728\u8bb8\u591aGo\u8bed\u8a00\u9879\u76ee\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u597d\u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\u80fd\u591f\u63d0\u4f9b\u4e0b\u9762\u8fd9\u4e9b\u529f\u80fd\uff1a \u80fd\u591f\u5c06\u4e8b\u4ef6\u8bb0\u5f55\u5230\u6587\u4ef6\u4e2d\uff0c\u800c\u4e0d\u662f\u5e94\u7528\u7a0b\u5e8f\u63a7\u5236\u53f0\u3002 \u65e5\u5fd7\u5207\u5272-\u80fd\u591f\u6839\u636e\u6587\u4ef6\u5927\u5c0f\u3001\u65f6\u95f4\u6216\u95f4\u9694\u7b49\u6765\u5207\u5272\u65e5\u5fd7\u6587\u4ef6\u3002 \u652f\u6301\u4e0d\u540c\u7684\u65e5\u5fd7\u7ea7\u522b\u3002\u4f8b\u5982INFO\uff0cDEBUG\uff0cERROR\u7b49\u3002 \u80fd\u591f\u6253\u5370\u57fa\u672c\u4fe1\u606f\uff0c\u5982\u8c03\u7528\u6587\u4ef6/\u51fd\u6570\u540d\u548c\u884c\u53f7\uff0c\u65e5\u5fd7\u65f6\u95f4\u7b49\u3002","title":"\u4ecb\u7ecd"},{"location":"mds/go/app/log/zap/zap/#go-logger","text":"\u5728\u4ecb\u7ecdUber-go\u7684zap\u5305\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u5148\u770b\u770bGo\u8bed\u8a00\u63d0\u4f9b\u7684\u57fa\u672c\u65e5\u5fd7\u529f\u80fd\u3002Go\u8bed\u8a00\u63d0\u4f9b\u7684\u9ed8\u8ba4\u65e5\u5fd7\u5305\u662f https://golang.org/pkg/log/","title":"\u9ed8\u8ba4\u7684Go Logger"},{"location":"mds/go/app/log/zap/zap/#gologger","text":"","title":"\u5b9e\u73b0GoLogger"},{"location":"mds/go/app/log/zap/zap/#logger","text":"\u5b9e\u73b0\u4e00\u4e2aGo\u8bed\u8a00\u4e2d\u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\u975e\u5e38\u7b80\u5355\u2014\u2014\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u65e5\u5fd7\u6587\u4ef6\uff0c\u7136\u540e\u8bbe\u7f6e\u5b83\u4e3a\u65e5\u5fd7\u7684\u8f93\u51fa\u4f4d\u7f6e\u3002 func SetupLogger () { logFileLocation , _ := os . OpenFile ( \"/Users/q1mi/test.log\" , os . O_CREATE | os . O_APPEND | os . O_RDWR , 0744 ) log . SetOutput ( logFileLocation ) }","title":"\u8bbe\u7f6eLogger"},{"location":"mds/go/app/log/zap/zap/#logger_1","text":"\u8ba9\u6211\u4eec\u6765\u5199\u4e00\u4e9b\u865a\u62df\u7684\u4ee3\u7801\u6765\u4f7f\u7528\u8fd9\u4e2a\u65e5\u5fd7\u8bb0\u5f55\u5668\u3002 \u5728\u5f53\u524d\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u5efa\u7acb\u4e00\u4e2a\u5230URL\u7684HTTP\u8fde\u63a5\uff0c\u5e76\u5c06\u72b6\u6001\u4ee3\u7801/\u9519\u8bef\u8bb0\u5f55\u5230\u65e5\u5fd7\u6587\u4ef6\u4e2d\u3002 func simpleHttpGet ( url string ) { resp , err := http . Get ( url ) if err != nil { log . Printf ( \"Error fetching url %s : %s\" , url , err . Error ()) } else { log . Printf ( \"Status Code for %s : %s\" , url , resp . Status ) resp . Body . Close () } }","title":"\u4f7f\u7528Logger"},{"location":"mds/go/app/log/zap/zap/#logger_2","text":"\u73b0\u5728\u8ba9\u6211\u4eec\u6267\u884c\u4e0a\u9762\u7684\u4ee3\u7801\u5e76\u67e5\u770b\u65e5\u5fd7\u8bb0\u5f55\u5668\u7684\u8fd0\u884c\u60c5\u51b5\u3002 func main () { SetupLogger () simpleHttpGet ( \"www.google.com\" ) simpleHttpGet ( \"http://www.google.com\" ) } \u5f53\u6211\u4eec\u6267\u884c\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u80fd\u770b\u5230\u4e00\u4e2atest.log\u6587\u4ef6\u88ab\u521b\u5efa\uff0c\u4e0b\u9762\u7684\u5185\u5bb9\u4f1a\u88ab\u6dfb\u52a0\u5230\u8fd9\u4e2a\u65e5\u5fd7\u6587\u4ef6\u4e2d\u3002 2019 /05/24 01 :14:13 Error fetching url www.google.com : Get www.google.com: unsupported protocol scheme \"\" 2019 /05/24 01 :14:14 Status Code for http://www.google.com : 200 OK","title":"logger\u7684\u8fd0\u884c"},{"location":"mds/go/app/log/zap/zap/#go-logger_1","text":"\u4f18\u52bf \u5b83\u6700\u5927\u7684\u4f18\u70b9\u662f\u4f7f\u7528\u975e\u5e38\u7b80\u5355\u3002\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u4efb\u4f55io.Writer\u4f5c\u4e3a\u65e5\u5fd7\u8bb0\u5f55\u8f93\u51fa\u5e76\u5411\u5176\u53d1\u9001\u8981\u5199\u5165\u7684\u65e5\u5fd7\u3002 \u52a3\u52bf \u4ec5\u9650\u57fa\u672c\u7684\u65e5\u5fd7\u7ea7\u522b \u53ea\u6709\u4e00\u4e2aPrint\u9009\u9879\u3002\u4e0d\u652f\u6301INFO/DEBUG\u7b49\u591a\u4e2a\u7ea7\u522b\u3002 \u5bf9\u4e8e\u9519\u8bef\u65e5\u5fd7\uff0c\u5b83\u6709Fatal\u548cPanic Fatal\u65e5\u5fd7\u901a\u8fc7\u8c03\u7528os.Exit(1)\u6765\u7ed3\u675f\u7a0b\u5e8f Panic\u65e5\u5fd7\u5728\u5199\u5165\u65e5\u5fd7\u6d88\u606f\u4e4b\u540e\u629b\u51fa\u4e00\u4e2apanic \u4f46\u662f\u5b83\u7f3a\u5c11\u4e00\u4e2aERROR\u65e5\u5fd7\u7ea7\u522b\uff0c\u8fd9\u4e2a\u7ea7\u522b\u53ef\u4ee5\u5728\u4e0d\u629b\u51fapanic\u6216\u9000\u51fa\u7a0b\u5e8f\u7684\u60c5\u51b5\u4e0b\u8bb0\u5f55\u9519\u8bef \u7f3a\u4e4f\u65e5\u5fd7\u683c\u5f0f\u5316\u7684\u80fd\u529b\u2014\u2014\u4f8b\u5982\u8bb0\u5f55\u8c03\u7528\u8005\u7684\u51fd\u6570\u540d\u548c\u884c\u53f7\uff0c\u683c\u5f0f\u5316\u65e5\u671f\u548c\u65f6\u95f4\u683c\u5f0f\u3002\u7b49\u7b49\u3002 \u4e0d\u63d0\u4f9b\u65e5\u5fd7\u5207\u5272\u7684\u80fd\u529b\u3002","title":"Go Logger\u7684\u4f18\u52bf\u548c\u52a3\u52bf"},{"location":"mds/go/app/log/zap/zap/#uber-zap","text":"Zap\u662f\u975e\u5e38\u5feb\u7684\u3001\u7ed3\u6784\u5316\u7684\uff0c\u5206\u65e5\u5fd7\u7ea7\u522b\u7684Go\u65e5\u5fd7\u5e93\u3002","title":"Uber Zap"},{"location":"mds/go/app/log/zap/zap/#uber-go-zap","text":"\u5b83\u540c\u65f6\u63d0\u4f9b\u4e86\u7ed3\u6784\u5316\u65e5\u5fd7\u8bb0\u5f55\u548cprintf\u98ce\u683c\u7684\u65e5\u5fd7\u8bb0\u5f55 \u5b83\u975e\u5e38\u7684\u5feb \u6839\u636eUber-go Zap\u7684\u6587\u6863\uff0c\u5b83\u7684\u6027\u80fd\u6bd4\u7c7b\u4f3c\u7684\u7ed3\u6784\u5316\u65e5\u5fd7\u5305\u66f4\u597d\u2014\u2014\u4e5f\u6bd4\u6807\u51c6\u5e93\u66f4\u5feb\u3002 \u4ee5\u4e0b\u662fZap\u53d1\u5e03\u7684\u57fa\u51c6\u6d4b\u8bd5\u4fe1\u606f \u8bb0\u5f55\u4e00\u6761\u6d88\u606f\u548c10\u4e2a\u5b57\u6bb5: \u8bb0\u5f55\u4e00\u4e2a\u9759\u6001\u5b57\u7b26\u4e32\uff0c\u6ca1\u6709\u4efb\u4f55\u4e0a\u4e0b\u6587\u6216printf\u98ce\u683c\u7684\u6a21\u677f\uff1a","title":"\u4e3a\u4ec0\u4e48\u9009\u62e9Uber-go zap"},{"location":"mds/go/app/log/zap/zap/#_2","text":"\u8fd0\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u5b89\u88c5zap go get -u go.uber.org/zap","title":"\u5b89\u88c5"},{"location":"mds/go/app/log/zap/zap/#zap-logger","text":"Zap\u63d0\u4f9b\u4e86\u4e24\u79cd\u7c7b\u578b\u7684\u65e5\u5fd7\u8bb0\u5f55\u5668\u2014Sugared Logger\u548cLogger\u3002 \u5728\u6027\u80fd\u5f88\u597d\u4f46\u4e0d\u662f\u5f88\u5173\u952e\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u4f7f\u7528SugaredLogger\u3002\u5b83\u6bd4\u5176\u4ed6\u7ed3\u6784\u5316\u65e5\u5fd7\u8bb0\u5f55\u5305\u5feb4-10\u500d\uff0c\u5e76\u4e14\u652f\u6301\u7ed3\u6784\u5316\u548cprintf\u98ce\u683c\u7684\u65e5\u5fd7\u8bb0\u5f55\u3002 \u5728\u6bcf\u4e00\u5fae\u79d2\u548c\u6bcf\u4e00\u6b21\u5185\u5b58\u5206\u914d\u90fd\u5f88\u91cd\u8981\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u4f7f\u7528Logger\u3002\u5b83\u751a\u81f3\u6bd4SugaredLogger\u66f4\u5feb\uff0c\u5185\u5b58\u5206\u914d\u6b21\u6570\u4e5f\u66f4\u5c11\uff0c\u4f46\u5b83\u53ea\u652f\u6301\u5f3a\u7c7b\u578b\u7684\u7ed3\u6784\u5316\u65e5\u5fd7\u8bb0\u5f55\u3002","title":"\u914d\u7f6eZap Logger"},{"location":"mds/go/app/log/zap/zap/#logger_3","text":"\u901a\u8fc7\u8c03\u7528 zap.NewProduction() / zap.NewDevelopment() \u6216\u8005 zap.Example() \u521b\u5efa\u4e00\u4e2aLogger\u3002 \u4e0a\u9762\u7684\u6bcf\u4e00\u4e2a\u51fd\u6570\u90fd\u5c06\u521b\u5efa\u4e00\u4e2alogger\u3002\u552f\u4e00\u7684\u533a\u522b\u5728\u4e8e\u5b83\u5c06\u8bb0\u5f55\u7684\u4fe1\u606f\u4e0d\u540c\u3002\u4f8b\u5982production logger\u9ed8\u8ba4\u8bb0\u5f55\u8c03\u7528\u51fd\u6570\u4fe1\u606f\u3001\u65e5\u671f\u548c\u65f6\u95f4\u7b49\u3002 \u901a\u8fc7Logger\u8c03\u7528Info/Error\u7b49\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u65e5\u5fd7\u90fd\u4f1a\u6253\u5370\u5230\u5e94\u7528\u7a0b\u5e8f\u7684console\u754c\u9762\u3002 \u6211\u4eec\u9996\u5148\u4f7f\u7528\u666e\u901a\u7684logger\u6765\u505a\u4e00\u4e2a\u7b80\u5355\u7684\u6d4b\u8bd5 package main import ( \"net/http\" \"go.uber.org/zap\" ) var logger * zap . Logger // InitProductionLogger ... func InitProductionLogger () { logger , _ = zap . NewProduction () } func simpleHTTPGet ( url string ) { resp , err := http . Get ( url ) if err != nil { logger . Error ( \"Error fetching url...\" , zap . String ( \"url\" , url ), zap . Error ( err ), ) } else { logger . Info ( \"Success...\" , zap . String ( \"statusCode\" , resp . Status ), zap . String ( \"url\" , url ), ) resp . Body . Close () } } func main () { InitProductionLogger () // \u5728\u7a0b\u5e8f\u9000\u51fa\u4e4b\u524d\uff0c\u628a\u7f13\u51b2\u533a\u7684\u65e5\u5fd7\u90fd\u5237\u5230\u78c1\u76d8\u91cc\u3002 defer logger . Sync () simpleHTTPGet ( \"http://www.baidu.com\" ) } \u6700\u540e\u6253\u5370\u51fa\u6765\u7684\u7ed3\u679c\u5982\u4e0b\uff1a [ root@xeq-vm-197-77-opsorder-test zap-demo ] # go run main.go { \"level\" : \"info\" , \"ts\" :1622196068.7713954, \"caller\" : \"zap-demo/main.go:25\" , \"msg\" : \"Success...\" , \"statusCode\" : \"200 OK\" , \"url\" : \"http://www.baidu.com\" } \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u521b\u5efa\u4e86\u4e00\u4e2aLogger\uff0c\u7136\u540e\u4f7f\u7528Info/ Error\u7b49Logger\u65b9\u6cd5\u8bb0\u5f55\u6d88\u606f\u3002\u65e5\u5fd7\u8bb0\u5f55\u5668\u7684\u8bed\u6cd5\u662f\u8fd9\u6837\u7684 func ( log * Logger ) MethodXXX ( msg string , fields ... Field ) \u8fd9\u4e2a MethodXXX \u53ef\u80fd\u662fInfo,Error,Debug,Panic\u7b49\u7b49\uff0c\u6bcf\u4e00\u4e2a\u65b9\u6cd5\u90fd\u63a5\u6536\u4e00\u4e2a\u6d88\u606f\u5b57\u7b26\u4e32\u8fd8\u6709\u4efb\u610f\u6570\u91cf\u7684 zapcore.Field \u53c2\u6570\uff0c\u4ee5Info\u7ea7\u522b\u7684\u65e5\u5fd7\u4e3a\u4f8b // Info logs a message at InfoLevel. The message includes any fields passed // at the log site, as well as any fields accumulated on the logger. func ( log * Logger ) Info ( msg string , fields ... Field ) { if ce := log . check ( InfoLevel , msg ); ce != nil { ce . Write ( fields ... ) } }","title":"Logger"},{"location":"mds/go/app/log/zap/zap/#sugarlogger","text":"SugarLogger\u7684\u8c03\u7528\u65b9\u5f0f\u548cLogger\u5927\u540c\u5c0f\u5f02\uff0c\u7a0d\u5fae\u6709\u4e00\u4e9b\u4e0d\u592a\u4e00\u6837\u7684\u5730\u65b9 \u5927\u90e8\u5206\u7684\u5b9e\u73b0\u57fa\u672c\u90fd\u76f8\u540c\u3002 \u60df\u4e00\u7684\u533a\u522b\u662f\uff0c\u6211\u4eec\u901a\u8fc7\u8c03\u7528\u4e3blogger\u7684. Sugar()\u65b9\u6cd5\u6765\u83b7\u53d6\u4e00\u4e2aSugaredLogger\u3002 \u7136\u540e\u4f7f\u7528SugaredLogger\u4ee5printf\u683c\u5f0f\u8bb0\u5f55\u8bed\u53e5 package main import ( \"net/http\" \"go.uber.org/zap\" ) var sugarlogger * zap . SugaredLogger // InitProductionSugarLogger ... func InitProductionSugarLogger () { logger , _ := zap . NewProduction () sugarlogger = logger . Sugar () } func simpleHTTPGet ( url string ) { sugarlogger . Debug ( \"Trying to hit Get request for %s\" ) resp , err := http . Get ( url ) if err != nil { sugarlogger . Error ( \"Error fetching url...\" , zap . String ( \"url\" , url ), zap . Error ( err ), ) } else { sugarlogger . Info ( \"Success...\" , zap . String ( \"statusCode\" , resp . Status ), zap . String ( \"url\" , url ), ) resp . Body . Close () } } func main () { InitProductionSugarLogger () // \u5728\u7a0b\u5e8f\u9000\u51fa\u4e4b\u524d\uff0c\u628a\u7f13\u51b2\u533a\u7684\u65e5\u5fd7\u90fd\u5237\u5230\u78c1\u76d8\u91cc\u3002 defer sugarlogger . Sync () simpleHTTPGet ( \"http://www.baidu.com\" ) } \u8f93\u51fa\u7684\u7ed3\u679c\u4e3a [ root@xeq-vm-197-77-opsorder-test zap-demo ] # go run main.go { \"level\" : \"info\" , \"ts\" :1622198680.0117903, \"caller\" : \"zap-demo/main.go:26\" , \"msg\" : \"Success...{statusCode 15 0 200 OK <nil>} {url 15 0 http://www.baidu.com <nil>}\" } \u521a\u624d\u7528\u7684\u662f zap.NewProduction \uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u7528\u4e00\u4e0bdevelop\u7684\u8bd5\u8bd5 // InitProductionSugarLogger ... func InitProductionSugarLogger () { logger , _ := zap . NewDevelopment () sugarlogger = logger . Sugar () } \u7136\u540e\u6211\u4eec\u518d\u770b\u4e00\u4e0b\u65e5\u5fd7\u7684\u6570\u636e [ root@xeq-vm-197-77-opsorder-test zap-demo ] # go run main.go 2021 -05-28T18:47:35.750+0800 DEBUG zap-demo/main.go:17 Trying to hit Get request for %s 2021 -05-28T18:47:35.941+0800 INFO zap-demo/main.go:26 Success... { statusCode 15 0 200 OK <nil> } { url 15 0 http://www.baidu.com <nil> } \u8fd9\u4e2a\u5c31\u662f\u5f00\u53d1\u73af\u5883\uff0c\u6bd4\u8f83\u9002\u5408\u5728\u7ec8\u7aef\u8f93\u51fa\u7684\u65e5\u5fd7\u4e86\u3002","title":"SugarLogger"},{"location":"mds/go/app/log/zap/zap/#logger_4","text":"","title":"\u5b9a\u5236Logger"},{"location":"mds/go/app/log/zap/zap/#_3","text":"\u6211\u4eec\u8981\u505a\u7684\u7b2c\u4e00\u4e2a\u66f4\u6539\u662f\u628a\u65e5\u5fd7\u5199\u5165\u6587\u4ef6\uff0c\u800c\u4e0d\u662f\u6253\u5370\u5230\u5e94\u7528\u7a0b\u5e8f\u63a7\u5236\u53f0\u3002 \u6211\u4eec\u5c06\u4f7f\u7528zap.New(\u2026)\u65b9\u6cd5\u6765\u624b\u52a8\u4f20\u9012\u6240\u6709\u914d\u7f6e\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u50cfzap.NewProduction()\u8fd9\u6837\u7684\u9884\u7f6e\u65b9\u6cd5\u6765\u521b\u5efalogger\u3002 func New ( core zapcore . Core , options ... Option ) * Logger zapcore.Core \u9700\u8981\u4e09\u4e2a\u914d\u7f6e\uff0c\u5206\u522b\u4e3a Encoder \uff0c WriteSyncer \uff0c LogLevel . 1\u3001Encoder \u7f16\u7801\u5668(\u5982\u4f55\u5199\u5165\u65e5\u5fd7)\u3002\u6211\u4eec\u5c06\u4f7f\u7528\u5f00\u7bb1\u5373\u7528\u7684NewJSONEncoder()\uff0c\u5e76\u4f7f\u7528\u9884\u5148\u8bbe\u7f6e\u7684ProductionEncoderConfig()\u3002 zapcore . NewJSONEncoder ( zap . NewProductionEncoderConfig ()) 2\u3001WriterSyncer \u6307\u5b9a\u65e5\u5fd7\u5c06\u5199\u5230\u54ea\u91cc\u53bb\u3002\u6211\u4eec\u4f7f\u7528zapcore.AddSync()\u51fd\u6570\u5e76\u4e14\u5c06\u6253\u5f00\u7684\u6587\u4ef6\u53e5\u67c4\u4f20\u8fdb\u53bb\u3002 file , _ := os . Create ( \"./test.log\" ) writeSyncer := zapcore . AddSync ( file ) 3\u3001log level \u54ea\u79cd\u7ea7\u522b\u7684\u65e5\u5fd7\u5c06\u88ab\u5199\u5165 \u90a3\u4e48\u91cd\u65b0\u6539\u9020\u8fc7\u540e\u7684\u4ee3\u7801\u5c31\u53d8\u6210\u4e86\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50 package main import ( \"net/http\" \"os\" \"go.uber.org/zap\" \"go.uber.org/zap/zapcore\" ) var sugarlogger * zap . SugaredLogger // InitLogger ... func InitLogger () { writeSyncer := getLogWriter () encoder := getEncoder () core := zapcore . NewCore ( encoder , writeSyncer , zapcore . DebugLevel ) logger := zap . New ( core ) sugarlogger = logger . Sugar () } func getLogWriter () zapcore . WriteSyncer { file , _ := os . Create ( \"./test.log\" ) return zapcore . AddSync ( file ) } func getEncoder () zapcore . Encoder { return zapcore . NewJSONEncoder ( zap . NewProductionEncoderConfig ()) } func simpleHTTPGet ( url string ) { sugarlogger . Debug ( \"Trying to hit Get request for %s\" ) resp , err := http . Get ( url ) if err != nil { sugarlogger . Error ( \"Error fetching url...\" , zap . String ( \"url\" , url ), zap . Error ( err ), ) } else { sugarlogger . Info ( \"Success...\" , zap . String ( \"statusCode\" , resp . Status ), zap . String ( \"url\" , url ), ) resp . Body . Close () } } func main () { InitLogger () // \u5728\u7a0b\u5e8f\u9000\u51fa\u4e4b\u524d\uff0c\u628a\u7f13\u51b2\u533a\u7684\u65e5\u5fd7\u90fd\u5237\u5230\u78c1\u76d8\u91cc\u3002 defer sugarlogger . Sync () simpleHTTPGet ( \"http://www.baidu.com\" ) } \u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u8fd0\u884c\u5b8c\u4e86\u4ee5\u540e\uff0c\u53d1\u73b0\u5176\u5b9e\u7ec8\u7aef\u4ec0\u4e48\u90fd\u6ca1\u6709\u8f93\u51fa\uff0c\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u540c\u7ea7\u76ee\u5f55\u4e0b\u591a\u51fa\u6765\u4e86\u4e00\u4e2atest.log\u7684\u6587\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u4e00\u4e0b [ root@xeq-vm-197-77-opsorder-test zap-demo ] # cat test.log { \"level\" : \"debug\" , \"ts\" :1622199436.791037, \"msg\" : \"Trying to hit Get request for %s\" } { \"level\" : \"info\" , \"ts\" :1622199436.990979, \"msg\" : \"Success...{statusCode 15 0 200 OK <nil>} {url 15 0 http://www.baidu.com <nil>}\" } \u4e0a\u9762\u6211\u4f7f\u7528\u4e86Debug\u7684level\uff0c\u5176\u5b9e\u8fd8\u6709\u5f88\u591alevel\uff0c\u8fd9\u4e9b\u90fd\u662f\u5e38\u91cf\u3002 type Level int8 const ( // DebugLevel logs are typically voluminous, and are usually disabled in // production. DebugLevel Level = iota - 1 // InfoLevel is the default logging priority. InfoLevel // WarnLevel logs are more important than Info, but don't need individual // human review. WarnLevel // ErrorLevel logs are high-priority. If an application is running smoothly, // it shouldn't generate any error-level logs. ErrorLevel // DPanicLevel logs are particularly important errors. In development the // logger panics after writing the message. DPanicLevel // PanicLevel logs a message, then panics. PanicLevel // FatalLevel logs a message, then calls os.Exit(1). FatalLevel _minLevel = DebugLevel _maxLevel = FatalLevel )","title":"\u5c06\u65e5\u5fd7\u5199\u5165\u6587\u4ef6\u800c\u4e0d\u662f\u7ec8\u7aef"},{"location":"mds/go/app/log/zap/zap/#json-encoderlog-encoder","text":"\u73b0\u5728\uff0c\u6211\u4eec\u5e0c\u671b\u5c06\u7f16\u7801\u5668\u4ece JSON Encoder \u66f4\u6539\u4e3a\u666e\u901aEncoder\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5c06 NewJSONEncoder() \u66f4\u6539\u4e3a NewConsoleEncoder() \u3002 return zapcore . NewConsoleEncoder ( zap . NewProductionEncoderConfig ()) \u90a3\u4e48\u65e5\u5fd7\u7684\u7ed3\u679c\u5c31\u662f\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50 1 .6223397950440078e+09 debug Trying to hit Get request for %s 1 .6223397961095738e+09 error Error fetching url... { url 15 0 http://www.baidu.com <nil> } { error 26 0 Get \"http://www.baidu.com\" : dial tcp: lookup www.baidu.com on 8 .8.8.8:53: read udp 172 .18.196.77:40945->8.8.8.8:53: i/o timeout }","title":"\u5c06JSON Encoder\u66f4\u6539\u4e3a\u666e\u901a\u7684Log Encoder"},{"location":"mds/go/app/log/zap/zap/#_4","text":"\u6211\u4eec\u53d1\u73b0\u8bf4\u6bcf\u6b21\u6587\u4ef6\u90fd\u662f\u6e05\u7a7a\u91cd\u5199\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5230os\u5305\u7684\u4e00\u4e9b\u6587\u4ef6\u5c5e\u6027\uff0c\u7136\u540e\u8ba9\u6587\u4ef6\u53ef\u4ee5\u662f\u8ffd\u52a0\u7684\u3002 file , _ := os . OpenFile ( \"./test.log\" , os . O_CREATE | os . O_APPEND | os . O_RDWR , 0744 )","title":"\u6587\u4ef6\u7684\u8ffd\u52a0"},{"location":"mds/go/app/log/zap/zap/#_5","text":"\u9274\u4e8e\u6211\u4eec\u5bf9\u914d\u7f6e\u6240\u505a\u7684\u66f4\u6539\uff0c\u6709\u4e0b\u9762\u4e24\u4e2a\u95ee\u9898\uff1a \u65f6\u95f4\u662f\u4ee5\u975e\u4eba\u7c7b\u53ef\u8bfb\u7684\u65b9\u5f0f\u5c55\u793a\uff0c\u4f8b\u59821.572161051846623e+09 \u8c03\u7528\u65b9\u51fd\u6570\u7684\u8be6\u7ec6\u4fe1\u606f\u6ca1\u6709\u663e\u793a\u5728\u65e5\u5fd7\u4e2d \u6211\u4eec\u8981\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u8986\u76d6\u9ed8\u8ba4\u7684 ProductionConfig() \uff0c\u5e76\u8fdb\u884c\u4ee5\u4e0b\u66f4\u6539: \u4fee\u6539\u65f6\u95f4\u7f16\u7801\u5668 \u5728\u65e5\u5fd7\u6587\u4ef6\u4e2d\u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u8bb0\u5f55\u65e5\u5fd7\u7ea7\u522b func getEncoder () zapcore . Encoder { encoderConfig := zap . NewProductionEncoderConfig () // \u8bbe\u7f6e\u65f6\u95f4\u683c\u5f0f\u4e3aISO8601\u7684\u4e00\u4e2a\u65f6\u95f4\u683c\u5f0f encoderConfig . EncodeTime = zapcore . ISO8601TimeEncoder // \u8bbe\u7f6e\u65e5\u5fd7\u7684\u7ea7\u522b\u4e3a\u7b54\u8c22 encoderConfig . EncodeLevel = zapcore . CapitalLevelEncoder return zapcore . NewConsoleEncoder ( encoderConfig ) } \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u4fee\u6539zap logger\u4ee3\u7801\uff0c\u6dfb\u52a0\u5c06\u8c03\u7528\u51fd\u6570\u4fe1\u606f\u8bb0\u5f55\u5230\u65e5\u5fd7\u4e2d\u7684\u529f\u80fd\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u5c06\u5728 zap.New(..) \u51fd\u6570\u4e2d\u6dfb\u52a0\u4e00\u4e2aOption\u3002 // addcaller\u5c31\u662f\u628a\u8c03\u7528\u51fd\u6570\u7684\u76f8\u5173\u4fe1\u606f\u6dfb\u52a0\u8fdb\u53bb\u3002 logger := zap . New ( core , zap . AddCaller ()) \u5f53\u4f7f\u7528\u8fd9\u4e9b\u4fee\u6539\u8fc7\u7684logger\u914d\u7f6e\u8c03\u7528\u4e0a\u8ff0\u90e8\u5206\u7684main()\u51fd\u6570\u65f6\uff0c\u4ee5\u4e0b\u8f93\u51fa\u5c06\u6253\u5370\u5728\u6587\u4ef6 test.log \u4e2d\uff0c\u90a3\u4e48\u8f93\u51fa\u7684\u7ed3\u679c\u5c31\u662f\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50\u7684\u3002 2021 -05-30T10:07:14.890+0800 DEBUG zap-demo/main.go:37 Trying to hit Get request for %s 2021 -05-30T10:07:15.066+0800 INFO zap-demo/main.go:46 Success... { statusCode 15 0 200 OK <nil> } { url 15 0 http://www.baidu.com <nil> } \u5176\u5b9e zap.NewProductionEncoderConfig \u5c31\u662f\u6784\u9020\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u90a3\u4e48\u5982\u679c\u77e5\u9053\u5b83\u662f\u6784\u9020\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u81ea\u5df1\u5176\u5b9e\u4e5f\u662f\u53ef\u4ee5\u5b9a\u5236\u7684\uff0c\u6bd4\u5982\u91cc\u9762\u7684timekey\uff0clevelkey\u7b49\u7b49\u4fe1\u606f\u3002 func NewProductionEncoderConfig () zapcore . EncoderConfig { return zapcore . EncoderConfig { TimeKey : \"ts\" , LevelKey : \"level\" , NameKey : \"logger\" , CallerKey : \"caller\" , FunctionKey : zapcore . OmitKey , MessageKey : \"msg\" , StacktraceKey : \"stacktrace\" , LineEnding : zapcore . DefaultLineEnding , EncodeLevel : zapcore . LowercaseLevelEncoder , EncodeTime : zapcore . EpochTimeEncoder , EncodeDuration : zapcore . SecondsDurationEncoder , EncodeCaller : zapcore . ShortCallerEncoder , } } \u90a3\u4e48\u5176\u5b9e\u6211\u4e0a\u9762\u7684getEncode\u4e5f\u53ef\u4ee5\u5199\u4e3a\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50\uff0c\u7136\u540e\u81ea\u5df1\u53bb\u5b9a\u5236\u4e00\u4e0b\u6211\u4eec\u7684\u65e5\u5fd7\u76f8\u5173\u7684\u4fe1\u606f\u3002 func getEncoder () zapcore . Encoder { encoderConfig := zapcore . EncoderConfig { TimeKey : \"ts\" , LevelKey : \"level\" , NameKey : \"logger\" , CallerKey : \"caller\" , FunctionKey : zapcore . OmitKey , MessageKey : \"msg\" , StacktraceKey : \"stacktrace\" , LineEnding : zapcore . DefaultLineEnding , EncodeLevel : zapcore . CapitalLevelEncoder , EncodeTime : zapcore . ISO8601TimeEncoder , EncodeDuration : zapcore . SecondsDurationEncoder , EncodeCaller : zapcore . ShortCallerEncoder , } return zapcore . NewConsoleEncoder ( encoderConfig ) } \u90a3\u4e48\u62d3\u5c55\u4e00\u4e0b\uff0c\u63a5\u4e0b\u6765\u6211\u65e2\u60f3\u8981\u5728\u6587\u4ef6\u4e2d\u5199\u5165\u53c8\u60f3\u5728\u7ec8\u7aef\u4e2d\u8f93\u51fa\u6539\u600e\u4e48\u529e\uff1f","title":"\u66f4\u6539\u65f6\u95f4\u7f16\u7801\u5e76\u6dfb\u52a0\u8c03\u7528\u8005\u8be6\u7ec6\u4fe1\u606f"},{"location":"mds/go/app/log/zap/zap/#_6","text":"\u9996\u5148Zap\u5e93\u5e76\u4e0d\u652f\u6301\u5f52\u6863\u548c\u5207\u5272\u65e5\u5fd7\u6587\u4ef6\uff0c\u56e0\u6b64\u9700\u8981\u4e00\u4e2a\u7b2c\u4e09\u65b9\u7684\u5e93\u6765\u5b9e\u73b0\uff0c\u5c31\u662f Lumberjack \uff0c\u8fd9\u4e2a\u4e0d\u652f\u6301\u6309\u7167\u65f6\u95f4\u8fdb\u884c\u5207\u5272\u6587\u4ef6\u3002\u5f53\u7136\u5982\u679c\u8bf4\u5728\u670d\u52a1\u5668\u4e0a\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528logrotate\uff0c\u8fd9\u6837\u5c31\u65e0\u6240\u8c13\u4e86\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4e0d\u7528\u8fd9\u4e2a\u5305\u3002","title":"\u65e5\u5fd7\u7684\u5207\u5272\u5f52\u6863"},{"location":"mds/go/app/log/zap/zap/#_7","text":"go get - u github . com / natefinch / lumberjack","title":"\u5b89\u88c5"},{"location":"mds/go/app/log/zap/zap/#zap-loggerlumberjack","text":"\u8981\u5728zap\u4e2d\u52a0\u5165Lumberjack\u652f\u6301\uff0c\u6211\u4eec\u9700\u8981\u4fee\u6539WriteSyncer\u4ee3\u7801\u3002\u6211\u4eec\u5c06\u6309\u7167\u4e0b\u9762\u7684\u4ee3\u7801\u4fee\u6539getLogWriter()\u51fd\u6570\uff1a func getLogWriter () zapcore . WriteSyncer { lumberJackLogger := & lumberjack . Logger { Filename : \"./test.log\" , MaxSize : 10 , MaxBackups : 5 , MaxAge : 30 , Compress : false , } return zapcore . AddSync ( lumberJackLogger ) } Lumberjack Logger\u91c7\u7528\u4ee5\u4e0b\u5c5e\u6027\u4f5c\u4e3a\u8f93\u5165: Filename: \u65e5\u5fd7\u6587\u4ef6\u7684\u4f4d\u7f6e MaxSize\uff1a\u5728\u8fdb\u884c\u5207\u5272\u4e4b\u524d\uff0c\u65e5\u5fd7\u6587\u4ef6\u7684\u6700\u5927\u5927\u5c0f\uff08\u4ee5MB\u4e3a\u5355\u4f4d\uff09 MaxBackups\uff1a\u4fdd\u7559\u65e7\u6587\u4ef6\u7684\u6700\u5927\u4e2a\u6570 MaxAges\uff1a\u4fdd\u7559\u65e7\u6587\u4ef6\u7684\u6700\u5927\u5929\u6570 Compress\uff1a\u662f\u5426\u538b\u7f29/\u5f52\u6863\u65e7\u6587\u4ef6","title":"zap logger\u4e2d\u52a0\u5165Lumberjack"},{"location":"mds/go/app/log/zap/zap/#zip-with-gin","text":"","title":"Zip with Gin"},{"location":"mds/go/app/log/zap/zap/#gin","text":"\u9996\u5148\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u6700\u7b80\u5355\u7684gin\u9879\u76ee\uff1a func main () { r := gin . Default () r . GET ( \"/hello\" , func ( c * gin . Context ) { c . String ( \"hello liwenzhou.com!\" ) }) r . Run ( } \u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e00\u4e0b gin.Default() \u7684\u6e90\u7801\uff1a func Default () * Engine { debugPrintWARNINGDefault () engine := New () engine . Use ( Logger (), Recovery ()) return engine } \u4e5f\u5c31\u662f\u6211\u4eec\u5728\u4f7f\u7528 gin.Default() \u7684\u540c\u65f6\u662f\u7528\u5230\u4e86gin\u6846\u67b6\u5185\u7684\u4e24\u4e2a\u9ed8\u8ba4\u4e2d\u95f4\u4ef6 Logger() \u548c Recovery() \u3002 \u5176\u4e2d Logger() \u662f\u628agin\u6846\u67b6\u672c\u8eab\u7684\u65e5\u5fd7\u8f93\u51fa\u5230\u6807\u51c6\u8f93\u51fa\uff08\u6211\u4eec\u672c\u5730\u5f00\u53d1\u8c03\u8bd5\u65f6\u5728\u7ec8\u7aef\u8f93\u51fa\u7684\u90a3\u4e9b\u65e5\u5fd7\u5c31\u662f\u5b83\u7684\u529f\u52b3\uff09\uff0c\u800c Recovery() \u662f\u5728\u7a0b\u5e8f\u51fa\u73b0panic\u7684\u65f6\u5019\u6062\u590d\u73b0\u573a\u5e76\u5199\u5165500\u54cd\u5e94\u7684\u3002","title":"Gin\u6846\u67b6\u4e2d\u7684\u9ed8\u8ba4\u4e2d\u95f4\u4ef6"},{"location":"mds/go/app/log/zap/zap/#zap","text":"\u6211\u4eec\u53ef\u4ee5\u6a21\u4effLogger()\u548cRecovery()\u7684\u5b9e\u73b0\uff0c\u4f7f\u7528\u6211\u4eec\u7684\u65e5\u5fd7\u5e93\u6765\u63a5\u6536gin\u6846\u67b6\u9ed8\u8ba4\u8f93\u51fa\u7684\u65e5\u5fd7\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u91cd\u5199\u4e86\u8fd9\u4e24\u4e2a\u4e2d\u95f4\u4ef6\u7136\u540e\u8fdb\u884c\u4e86\u5e94\u7528\u3002 package main import ( \"net\" \"net/http\" \"net/http/httputil\" \"os\" \"runtime/debug\" \"strings\" \"time\" \"github.com/gin-gonic/gin\" \"github.com/natefinch/lumberjack\" \"go.uber.org/zap\" \"go.uber.org/zap/zapcore\" ) var sugarlogger * zap . SugaredLogger // InitLogger ... func InitLogger () { writeSyncer := getLogWriter () encoder := getEncoder () core := zapcore . NewCore ( encoder , writeSyncer , zapcore . DebugLevel ) logger := zap . New ( core , zap . AddCaller ()) sugarlogger = logger . Sugar () } func getLogWriter () zapcore . WriteSyncer { luberJackLogger := & lumberjack . Logger { Filename : \"./test.log\" , MaxSize : 10 , MaxBackups : 5 , MaxAge : 30 , Compress : false , } return zapcore . AddSync ( luberJackLogger ) } func getEncoder () zapcore . Encoder { encoderConfig := zapcore . EncoderConfig { TimeKey : \"ts\" , LevelKey : \"level\" , NameKey : \"logger\" , CallerKey : \"caller\" , FunctionKey : zapcore . OmitKey , MessageKey : \"msg\" , StacktraceKey : \"stacktrace\" , LineEnding : zapcore . DefaultLineEnding , EncodeLevel : zapcore . CapitalLevelEncoder , EncodeTime : zapcore . ISO8601TimeEncoder , EncodeDuration : zapcore . SecondsDurationEncoder , EncodeCaller : zapcore . ShortCallerEncoder , } return zapcore . NewJSONEncoder ( encoderConfig ) } // GinLogger \u63a5\u6536gin\u6846\u67b6\u9ed8\u8ba4\u7684\u65e5\u5fd7 func GinLogger ( logger * zap . SugaredLogger ) gin . HandlerFunc { return func ( c * gin . Context ) { start := time . Now () path := c . Request . URL . Path query := c . Request . URL . RawQuery c . Next () cost := time . Since ( start ) logger . Info ( path , zap . Int ( \"status\" , c . Writer . Status ()), zap . String ( \"method\" , c . Request . Method ), zap . String ( \"path\" , path ), zap . String ( \"query\" , query ), zap . String ( \"ip\" , c . ClientIP ()), zap . String ( \"user-agent\" , c . Request . UserAgent ()), zap . String ( \"errors\" , c . Errors . ByType ( gin . ErrorTypePrivate ). String ()), zap . Duration ( \"cost\" , cost ), ) } } // GinRecovery recover\u6389\u9879\u76ee\u53ef\u80fd\u51fa\u73b0\u7684panic func GinRecovery ( logger * zap . SugaredLogger , stack bool ) gin . HandlerFunc { return func ( c * gin . Context ) { defer func () { if err := recover (); err != nil { // Check for a broken connection, as it is not really a // condition that warrants a panic stack trace. var brokenPipe bool if ne , ok := err .( * net . OpError ); ok { if se , ok := ne . Err .( * os . SyscallError ); ok { if strings . Contains ( strings . ToLower ( se . Error ()), \"broken pipe\" ) || strings . Contains ( strings . ToLower ( se . Error ()), \"connection reset by peer\" ) { brokenPipe = true } } } httpRequest , _ := httputil . DumpRequest ( c . Request , false ) if brokenPipe { logger . Error ( c . Request . URL . Path , zap . Any ( \"error\" , err ), zap . String ( \"request\" , string ( httpRequest )), ) // If the connection is dead, we can't write a status to it. c . Error ( err .( error )) // nolint: errcheck c . Abort () return } if stack { logger . Error ( \"[Recovery from panic]\" , zap . Any ( \"error\" , err ), zap . String ( \"request\" , string ( httpRequest )), zap . String ( \"stack\" , string ( debug . Stack ())), ) } else { logger . Error ( \"[Recovery from panic]\" , zap . Any ( \"error\" , err ), zap . String ( \"request\" , string ( httpRequest )), ) } c . AbortWithStatus ( http . StatusInternalServerError ) } }() c . Next () } } func main () { InitLogger () r := gin . New () r . Use ( GinLogger ( sugarlogger ), GinRecovery ( sugarlogger , true )) r . GET ( \"/hello\" , func ( c * gin . Context ) { c . String ( http . StatusOK , \"hello world!\" ) }) r . Run ( \":10086\" ) } \u90a3\u4e48\u5728\u5b9e\u9645\u7684gin\u9879\u76ee\u4e2d\uff0c\u6211\u4eec\u5e94\u8be5\u628a\u4e0a\u9762\u7684\u903b\u8f91\u62bd\u8c61\u51fa\u6765\u4e00\u4e2alogger.go\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5177\u4f53\u7684\u914d\u7f6e\u6587\u4ef6\u5982\u4e0b","title":"\u57fa\u4e8ezap\u7684\u4e2d\u95f4\u4ef6"},{"location":"mds/go/app/log/zap/zap/#_8","text":"\u5728Go\u8bed\u8a00\u9879\u76ee\u4e2d\u4f7f\u7528Zap\u65e5\u5fd7\u5e93","title":"\u53c2\u8003\u6587\u6863"},{"location":"mds/go/basic/gotype/","text":"Type\u5173\u952e\u5b57 \u00b6 type\u662fgo\u8bed\u6cd5\u91cc\u91cd\u8981\u7684\u5173\u952e\u5b57\uff0ctype\u7edd\u4e0d\u53ea\u662f\u5bf9\u5e94\u7684c\u6216\u8005c++\u4e2d\u7684typedef\u3002\u641e\u6e05\u695atype\u7684\u4f5c\u7528\uff0c\u5c31\u5bb9\u6613\u7406\u89e3go\u4e2d\u7684\u6838\u5fc3\u6982\u5ff5struct\uff0cinterface\uff0c\u51fd\u6570\u7684\u5e94\u7528\u3002 1\u3001\u5b9a\u4e49\u7ed3\u6784\u4f53 \u00b6 package main import \"fmt\" type person struct { name string // \u6ce8\u610f\u540e\u9762\u4e0d\u80fd\u6709\u9017\u53f7 age int } func main () { p1 := person { name : \"maxiaoyu\" , // \u6ce8\u610f\u540e\u9762\u8981\u6dfb\u52a0\u9017\u53f7 age : 1 , // \u6ce8\u610f\u5982\u679c\u4e0b\u9762\u7684}\u63d0\u5230\u8fd9\u91cc\u6765\uff0c\u90a3\u4e48\u9017\u53f7\u53ef\u4ee5\u7701\u7565\u3002 } p2 := person { // \u521d\u59cb\u5316\u5b57\u6bb5\u4e5f\u4e0d\u4e00\u5b9a\u8981\u5168\u90e8\u6307\u5b9a\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\u4f1a\u88ab\u81ea\u52a8\u521d\u59cb\u5316\u4e3a\u5f53\u524d\u7c7b\u578b\u7684\u201c\u96f6\u503c\u201d age : 2 , } fmt . Println ( p1 . name ) fmt . Println ( p1 . age ) fmt . Println ( p2 . name ) // \u8f93\u51fa\u7a7a\u5b57\u7b26\u4e32 fmt . Println ( p2 . age ) } 2\u3001\u7c7b\u578b\u91cd\u547d\u540d \u00b6 \u5bf9\u7c7b\u578b\u8fdb\u884c\u91cd\u547d\u540d\uff0c\u76f8\u5f53\u4e8e\u7c7b\u578b\u7684\u7b49\u4ef7\u5b9a\u4e49\uff0c\u4f46\u662f\u662f\u5c5e\u4e8e\u4e0d\u540c\u7684\u4e24\u4e2a\u7c7b\u578b\u3002 package main import \"fmt\" type name string func main () { var myname name = \"lamber\" // \u5176\u5b9e\u5e95\u5c42\u5c31\u662f\u5b57\u7b26\u4e32\u7c7b\u578b l := [] byte ( myname ) fmt . Println ( len ( l )) } \u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e9b\u7279\u6027\u5b9a\u4e49\u4e00\u7cfb\u5217\u7684\u65b9\u6cd5\uff0c\u63d0\u4f9b\u4e00\u4e9b\u6269\u5c55\u7684\u529f\u80fd\u3002 package main import \"fmt\" type name string func ( n name ) length () int { return len ( n ) } func main () { var myname name = \"lamber\" // \u5176\u5b9e\u5e95\u5c42\u5c31\u662f\u5b57\u7b26\u4e32\u7c7b\u578b fmt . Println ( myname . length ()) } 3\u3001\u7ed3\u6784\u4f53\u5185\u533f\u540d\u6210\u5458 \u00b6 import \"fmt\" type person struct { string } func main () { p := person { string : \"lamber\" , // \u4e5f\u53ef\u4ee5\u8fd9\u6837\uff1aperson{\"lamber\"} } fmt . Println ( p . string ) } 4\u3001\u5b9a\u4e49\u63a5\u53e3 \u00b6 5\u3001\u5b9a\u4e49\u51fd\u6570\u7c7b\u578b \u00b6","title":"Go Type\u8be6\u89e3"},{"location":"mds/go/basic/gotype/#type","text":"type\u662fgo\u8bed\u6cd5\u91cc\u91cd\u8981\u7684\u5173\u952e\u5b57\uff0ctype\u7edd\u4e0d\u53ea\u662f\u5bf9\u5e94\u7684c\u6216\u8005c++\u4e2d\u7684typedef\u3002\u641e\u6e05\u695atype\u7684\u4f5c\u7528\uff0c\u5c31\u5bb9\u6613\u7406\u89e3go\u4e2d\u7684\u6838\u5fc3\u6982\u5ff5struct\uff0cinterface\uff0c\u51fd\u6570\u7684\u5e94\u7528\u3002","title":"Type\u5173\u952e\u5b57"},{"location":"mds/go/basic/gotype/#1","text":"package main import \"fmt\" type person struct { name string // \u6ce8\u610f\u540e\u9762\u4e0d\u80fd\u6709\u9017\u53f7 age int } func main () { p1 := person { name : \"maxiaoyu\" , // \u6ce8\u610f\u540e\u9762\u8981\u6dfb\u52a0\u9017\u53f7 age : 1 , // \u6ce8\u610f\u5982\u679c\u4e0b\u9762\u7684}\u63d0\u5230\u8fd9\u91cc\u6765\uff0c\u90a3\u4e48\u9017\u53f7\u53ef\u4ee5\u7701\u7565\u3002 } p2 := person { // \u521d\u59cb\u5316\u5b57\u6bb5\u4e5f\u4e0d\u4e00\u5b9a\u8981\u5168\u90e8\u6307\u5b9a\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\u4f1a\u88ab\u81ea\u52a8\u521d\u59cb\u5316\u4e3a\u5f53\u524d\u7c7b\u578b\u7684\u201c\u96f6\u503c\u201d age : 2 , } fmt . Println ( p1 . name ) fmt . Println ( p1 . age ) fmt . Println ( p2 . name ) // \u8f93\u51fa\u7a7a\u5b57\u7b26\u4e32 fmt . Println ( p2 . age ) }","title":"1\u3001\u5b9a\u4e49\u7ed3\u6784\u4f53"},{"location":"mds/go/basic/gotype/#2","text":"\u5bf9\u7c7b\u578b\u8fdb\u884c\u91cd\u547d\u540d\uff0c\u76f8\u5f53\u4e8e\u7c7b\u578b\u7684\u7b49\u4ef7\u5b9a\u4e49\uff0c\u4f46\u662f\u662f\u5c5e\u4e8e\u4e0d\u540c\u7684\u4e24\u4e2a\u7c7b\u578b\u3002 package main import \"fmt\" type name string func main () { var myname name = \"lamber\" // \u5176\u5b9e\u5e95\u5c42\u5c31\u662f\u5b57\u7b26\u4e32\u7c7b\u578b l := [] byte ( myname ) fmt . Println ( len ( l )) } \u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e9b\u7279\u6027\u5b9a\u4e49\u4e00\u7cfb\u5217\u7684\u65b9\u6cd5\uff0c\u63d0\u4f9b\u4e00\u4e9b\u6269\u5c55\u7684\u529f\u80fd\u3002 package main import \"fmt\" type name string func ( n name ) length () int { return len ( n ) } func main () { var myname name = \"lamber\" // \u5176\u5b9e\u5e95\u5c42\u5c31\u662f\u5b57\u7b26\u4e32\u7c7b\u578b fmt . Println ( myname . length ()) }","title":"2\u3001\u7c7b\u578b\u91cd\u547d\u540d"},{"location":"mds/go/basic/gotype/#3","text":"import \"fmt\" type person struct { string } func main () { p := person { string : \"lamber\" , // \u4e5f\u53ef\u4ee5\u8fd9\u6837\uff1aperson{\"lamber\"} } fmt . Println ( p . string ) }","title":"3\u3001\u7ed3\u6784\u4f53\u5185\u533f\u540d\u6210\u5458"},{"location":"mds/go/basic/gotype/#4","text":"","title":"4\u3001\u5b9a\u4e49\u63a5\u53e3"},{"location":"mds/go/basic/gotype/#5","text":"","title":"5\u3001\u5b9a\u4e49\u51fd\u6570\u7c7b\u578b"},{"location":"mds/go/basic/go%E6%B5%8B%E8%AF%95/","text":"go\u4e2d\u7684\u6d4b\u8bd5\u6587\u4ef6\u5fc5\u987b\u8981\u4ee5 _test.go \u7ed3\u5c3e\u5355\u5143\u6d4b\u8bd5\u6e90\u7801\u6587\u4ef6\u53ef\u4ee5\u7531\u591a\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff08\u53ef\u4ee5\u7406\u89e3\u4e3a\u51fd\u6570\uff09\u7ec4\u6210\uff0c\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u7684\u540d\u79f0\u9700\u8981\u4ee5 Test \u4e3a\u524d\u7f00\uff0c\u4f8b\u5982\uff1a func TestXxx ( t * testing . T ){ //...... } \u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b\u6709\u4ee5\u4e0b\u51e0\u70b9\u9700\u8981\u6ce8\u610f\uff1a \u6d4b\u8bd5\u7528\u4f8b\u6587\u4ef6\u4e0d\u4f1a\u53c2\u4e0e\u6b63\u5e38\u6e90\u7801\u7684\u7f16\u8bd1\uff0c\u4e0d\u4f1a\u88ab\u5305\u542b\u5230\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\uff1b \u6d4b\u8bd5\u7528\u4f8b\u7684\u6587\u4ef6\u540d\u5fc5\u987b\u4ee5_test.go\u7ed3\u5c3e\uff1b \u9700\u8981\u4f7f\u7528 import \u5bfc\u5165 testing \u5305\uff1b \u6d4b\u8bd5\u51fd\u6570\u7684\u540d\u79f0\u8981\u4ee5Test\u6216Benchmark\u5f00\u5934\uff0c\u540e\u9762\u53ef\u4ee5\u8ddf\u4efb\u610f\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u4f46\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u5fc5\u987b\u5927\u5199\uff0c\u4f8b\u5982 TestAbc()\uff0c\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u6587\u4ef6\u4e2d\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u6d4b\u8bd5\u51fd\u6570\uff1b \u5355\u5143\u6d4b\u8bd5\u5219\u4ee5(t *testing.T)\u4f5c\u4e3a\u53c2\u6570\uff0c\u6027\u80fd\u6d4b\u8bd5\u4ee5(t *testing.B)\u505a\u4e3a\u53c2\u6570\uff1b \u6d4b\u8bd5\u7528\u4f8b\u6587\u4ef6\u4f7f\u7528go test\u547d\u4ee4\u6765\u6267\u884c\uff0c\u6e90\u7801\u4e2d\u4e0d\u9700\u8981 main() \u51fd\u6570\u4f5c\u4e3a\u5165\u53e3\uff0c\u6240\u6709\u4ee5_test.go\u7ed3\u5c3e\u7684\u6e90\u7801\u6587\u4ef6\u5185\u4ee5Test\u5f00\u5934\u7684\u51fd\u6570\u90fd\u4f1a\u81ea\u52a8\u6267\u884c\u3002 \u51fd\u6570\u4e2d\u901a\u8fc7\u8c03\u7528 testing.T \u7684 Error , Errorf , FailNow , Fatal , FatalIf \u65b9\u6cd5\uff0c\u8bf4\u660e\u6d4b\u8bd5\u4e0d\u901a\u8fc7\uff0c\u8c03\u7528 Log \u65b9\u6cd5\u7528\u6765\u8bb0\u5f55\u6d4b\u8bd5\u7684\u4fe1\u606f\u3002 Go\u8bed\u8a00\u6d4b\u8bd5\u5206\u7c7b \u00b6 Go\u8bed\u8a00\u7684 testing \u5305\u63d0\u4f9b\u4e86\u4e09\u79cd\u6d4b\u8bd5\u65b9\u5f0f\uff0c\u5206\u522b\u662f\u5355\u5143\uff08\u529f\u80fd\uff09\u6d4b\u8bd5\u3001\u6027\u80fd\uff08\u538b\u529b\uff09\u6d4b\u8bd5\u548c\u8986\u76d6\u7387\u6d4b\u8bd5\u3002\u5176\u4e2dXXX\u4e3a\u8981\u6d4b\u8bd5\u65b9\u6cd5\u7684\u540d\u79f0\u3002 \u5355\u5143\u6d4b\u8bd5\uff1aTestXXX (t *testing.T) \u57fa\u51c6\uff08\u6027\u80fd/\u538b\u529b\uff09\u6d4b\u8bd5\uff1aBenchmarkXXX (b *testing.B) Main \u51fd\u6570\u6d4b\u8bd5\uff1aTestMain (m *testing.M) \u63a7\u5236\u53f0\u6d4b\u8bd5 ExampleXXX () \u5355\u5143\u6d4b\u8bd5 \u00b6 \u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6bd4\u5982\uff0c\u5f53\u524d\u76ee\u5f55\u4e0b\u6709\u4e24\u4e2ademo\u6587\u4ef6 [ root@xeq-vm-197-77-opsorder-test lesson2 ] # ls -l total 12 -rw-r--r-- 1 root root 96 Aug 9 14 :45 demo.go -rw-r--r-- 1 root root 134 Aug 9 14 :47 demo_test.go -rw-r--r-- 1 root root 32 Aug 9 14 :48 go.mod \u5176\u4e2ddemo\u7684\u5185\u5bb9\u4e3a package demo // GetArea ... func GetArea ( weight , height int ) int { return weight * height } demo_test.go\u7684\u5185\u5bb9\u4e3a package demo import \"testing\" func TestGetArea ( t * testing . T ) { area := GetArea ( 40 , 50 ) if area != 2000 { t . Error ( \"\u5931\u8d25\" ) } } \u6211\u4eec\u6267\u884c\u6d4b\u8bd5 # \u76f4\u63a5\u4f7f\u7528go test\u9ed8\u8ba4\u662f\u4e0d\u4f1a\u663e\u793a\u6d4b\u8bd5\u901a\u8fc7\u7684\u4fe1\u606f\u7684\uff0c\u53ea\u4f1a\u663e\u793a\u6d4b\u8bd5\u5931\u8d25\u7684\u4fe1\u606f\uff0c\u5982\u679c\u8bf4\u60f3\u8981\u67e5\u770b\u6d4b\u8bd5\u901a\u8fc7\u7684\u4fe1\u606f\u53ef\u4ee5\u5e26\u4e0a-v\u53c2\u6570\u3002 [ root@xeq-vm-197-77-opsorder-test lesson2 ] # go test -v === RUN TestGetArea --- PASS: TestGetArea ( 0 .00s ) PASS ok gostudy/lesson2 0 .005s \u538b\u529b\u6d4b\u8bd5 \u00b6 \u6539\u9020\u4e00\u4e0b demo_test.go \u6587\u4ef6 package demo import \"testing\" func BenchmarkGetArea ( t * testing . B ) { for i := 0 ; i < t . N ; i ++ { GetArea ( 40 , 50 ) } } \u8fd9\u91ccbenchmark\u538b\u529b\u6d4b\u8bd5\uff0c\u7528\u7684\u5c31\u662f *testing.B \uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u6267\u884c\u7684\u7ed3\u679c [ root@xeq-vm-197-77-opsorder-test lesson2 ] # go test -bench=\".\" goos: linux goarch: amd64 pkg: gostudy/lesson2 cpu: Intel Core Processor ( Broadwell ) BenchmarkGetArea-8 1000000000 0 .4688 ns/op PASS ok gostudy/lesson2 0 .528s \u8fd9\u91cc\u663e\u793a\u8fd0\u884c\u4e8610\u4ebf\u6b21\uff0c\u6bcf\u4e00\u6b21\u5faa\u73af\u8017\u65f60.4688 ns\u3002\u538b\u529b\u6d4b\u8bd5\u9700\u8981\u6ce8\u610f\u4ee5\u4e0b\u51e0\u4e2a\u70b9 go test \u4e0d\u4f1a\u9ed8\u8ba4\u6267\u884c\u538b\u529b\u6d4b\u8bd5\u7684\u51fd\u6570\uff0c\u5982\u679c\u8981\u6267\u884c\u538b\u529b\u6d4b\u8bd5\u9700\u8981\u5e26\u4e0a\u53c2\u6570-bench \u8986\u76d6\u7387\u6d4b\u8bd5 \u00b6 \u8986\u76d6\u7387\u6d4b\u8bd5\u80fd\u77e5\u9053\u6d4b\u8bd5\u7a0b\u5e8f\u603b\u5171\u8986\u76d6\u4e86\u591a\u5c11\u4e1a\u52a1\u4ee3\u7801\uff08\u4e5f\u5c31\u662f demo_test.go \u4e2d\u6d4b\u8bd5\u4e86\u591a\u5c11 demo.go \u4e2d\u7684\u4ee3\u7801\uff09\uff0c\u53ef\u4ee5\u7684\u8bdd\u6700\u597d\u662f\u8986\u76d6100%\u3002 \u5c06 demo_test.go \u4ee3\u7801\u6539\u9020\u6210\u5982\u4e0b\u6240\u793a\u7684\u6837\u5b50\uff1a package demo import \"testing\" func TestGetArea ( t * testing . T ) { area := GetArea ( 40 , 50 ) if area != 2000 { t . Error ( \"\u6d4b\u8bd5\u5931\u8d25\" ) } } func BenchmarkGetArea ( t * testing . B ) { for i := 0 ; i < t . N ; i ++ { GetArea ( 40 , 50 ) } } \u7136\u540e\u8fd0\u884c\u8986\u76d6\u7387\u6d4b\u8bd5 [ root@xeq-vm-197-77-opsorder-test lesson2 ] # go test -cover PASS coverage: 100 .0% of statements ok gostudy/lesson2 0 .004s \u5de5\u5177 \u00b6 \u4f7f\u7528gotests\u81ea\u52a8\u751f\u6210\u6d4b\u8bd5\u4ee3\u7801 \u00b6 gotests \u652f\u6301official Sublime Text 3 plugin\uff0cemacs\uff0cvscode\uff0cVim\u8fd8\u6709GoLand\u3002gotest\u53ef\u4ee5\u4e3a\u5355\u72ec\u4e00\u4e2a\u6e90\u6587\u4ef6\u751f\u6210\u6d4b\u8bd5\uff0c\u4e5f\u53ef\u4ee5\u4e3a\u6574\u4e2a\u4e00\u4e2a\u76ee\u5f55\u751f\u6210\u6d4b\u8bd5\u6587\u4ef6\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cgotests\u5c06\u8f93\u51fa\u6253\u5230stdout\u6807\u51c6\u8f93\u51fa\u3002 \u4f7f\u7528go get\u4e0b\u8f7d go get -u github.com/cweill/gotests/... gotests\u4f7f\u7528\u6307\u5357 [ root@xeq-vm-197-77-opsorder-test lesson2 ] # gotests --help Usage of gotests: -all generate tests for all functions and methods -excl string regexp. generate tests for functions and methods that don ' t match. Takes precedence over -only, -exported, and -all -exported generate tests for exported functions and methods. Takes precedence over -only and -all -i print test inputs in error messages -nosubtests disable generating tests using the Go 1 .7 subtests feature -only string regexp. generate tests for functions and methods that match only. Takes precedence over -all -parallel enable generating parallel subtests -template string optional. Specify custom test code templates, e.g. testify. This can also be set via environment variable GOTESTS_TEMPLATE -template_dir string optional. Path to a directory containing custom test code templates. Takes precedence over -template. This can also be set via environment variable GOTESTS_TEMPLATE_DIR -template_params string read external parameters to template by json with stdin -template_params_file string read external parameters to template by json with file -w write output to ( test ) files instead of stdout \u53c2\u8003 \u00b6 \u641e\u5b9aGo\u5355\u5143\u6d4b\u8bd5\uff08\u4e00\uff09\u2014\u2014\u57fa\u7840\u539f\u7406 \u641e\u5b9aGo\u5355\u5143\u6d4b\u8bd5\uff08\u4e8c\uff09\u2014\u2014 mock\u6846\u67b6(gomock) \u641e\u5b9aGo\u5355\u5143\u6d4b\u8bd5\uff08\u4e09\uff09\u2014\u2014 \u65ad\u8a00\uff08testify\uff09 \u641e\u5b9aGo\u5355\u5143\u6d4b\u8bd5\uff08\u56db\uff09\u2014\u2014 \u4f9d\u8d56\u6ce8\u5165\u6846\u67b6(wire) Go \u6027\u80fd\u8c03\u4f18\u4e4b \u2014\u2014 \u57fa\u51c6\u6d4b\u8bd5 \u5982\u4f55\u6709\u6548\u5730\u6d4b\u8bd5Go\u4ee3\u7801 Golang \u5355\u5143\u6d4b\u8bd5\uff1a\u6709\u54ea\u4e9b\u8bef\u533a\u548c\u5b9e\u8df5\uff1f \u4e00\u4e2a Golang \u9879\u76ee\u7684\u6d4b\u8bd5\u5b9e\u8df5\u5168\u8bb0\u5f55 go test\u547d\u4ee4\uff08Go\u8bed\u8a00\u6d4b\u8bd5\u547d\u4ee4\uff09\u5b8c\u5168\u653b\u7565 go test \u8be6\u89e3 \u5982\u4f55\u7528\u597d Go \u7684\u6d4b\u8bd5\u9ed1\u79d1\u6280 Go \u600e\u4e48\u5199\u6d4b\u8bd5\u7528\u4f8b Golang Testing \u6982\u89c8 - \u57fa\u672c\u7bc7","title":"Go\u6d4b\u8bd5"},{"location":"mds/go/basic/go%E6%B5%8B%E8%AF%95/#go","text":"Go\u8bed\u8a00\u7684 testing \u5305\u63d0\u4f9b\u4e86\u4e09\u79cd\u6d4b\u8bd5\u65b9\u5f0f\uff0c\u5206\u522b\u662f\u5355\u5143\uff08\u529f\u80fd\uff09\u6d4b\u8bd5\u3001\u6027\u80fd\uff08\u538b\u529b\uff09\u6d4b\u8bd5\u548c\u8986\u76d6\u7387\u6d4b\u8bd5\u3002\u5176\u4e2dXXX\u4e3a\u8981\u6d4b\u8bd5\u65b9\u6cd5\u7684\u540d\u79f0\u3002 \u5355\u5143\u6d4b\u8bd5\uff1aTestXXX (t *testing.T) \u57fa\u51c6\uff08\u6027\u80fd/\u538b\u529b\uff09\u6d4b\u8bd5\uff1aBenchmarkXXX (b *testing.B) Main \u51fd\u6570\u6d4b\u8bd5\uff1aTestMain (m *testing.M) \u63a7\u5236\u53f0\u6d4b\u8bd5 ExampleXXX ()","title":"Go\u8bed\u8a00\u6d4b\u8bd5\u5206\u7c7b"},{"location":"mds/go/basic/go%E6%B5%8B%E8%AF%95/#_1","text":"\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6bd4\u5982\uff0c\u5f53\u524d\u76ee\u5f55\u4e0b\u6709\u4e24\u4e2ademo\u6587\u4ef6 [ root@xeq-vm-197-77-opsorder-test lesson2 ] # ls -l total 12 -rw-r--r-- 1 root root 96 Aug 9 14 :45 demo.go -rw-r--r-- 1 root root 134 Aug 9 14 :47 demo_test.go -rw-r--r-- 1 root root 32 Aug 9 14 :48 go.mod \u5176\u4e2ddemo\u7684\u5185\u5bb9\u4e3a package demo // GetArea ... func GetArea ( weight , height int ) int { return weight * height } demo_test.go\u7684\u5185\u5bb9\u4e3a package demo import \"testing\" func TestGetArea ( t * testing . T ) { area := GetArea ( 40 , 50 ) if area != 2000 { t . Error ( \"\u5931\u8d25\" ) } } \u6211\u4eec\u6267\u884c\u6d4b\u8bd5 # \u76f4\u63a5\u4f7f\u7528go test\u9ed8\u8ba4\u662f\u4e0d\u4f1a\u663e\u793a\u6d4b\u8bd5\u901a\u8fc7\u7684\u4fe1\u606f\u7684\uff0c\u53ea\u4f1a\u663e\u793a\u6d4b\u8bd5\u5931\u8d25\u7684\u4fe1\u606f\uff0c\u5982\u679c\u8bf4\u60f3\u8981\u67e5\u770b\u6d4b\u8bd5\u901a\u8fc7\u7684\u4fe1\u606f\u53ef\u4ee5\u5e26\u4e0a-v\u53c2\u6570\u3002 [ root@xeq-vm-197-77-opsorder-test lesson2 ] # go test -v === RUN TestGetArea --- PASS: TestGetArea ( 0 .00s ) PASS ok gostudy/lesson2 0 .005s","title":"\u5355\u5143\u6d4b\u8bd5"},{"location":"mds/go/basic/go%E6%B5%8B%E8%AF%95/#_2","text":"\u6539\u9020\u4e00\u4e0b demo_test.go \u6587\u4ef6 package demo import \"testing\" func BenchmarkGetArea ( t * testing . B ) { for i := 0 ; i < t . N ; i ++ { GetArea ( 40 , 50 ) } } \u8fd9\u91ccbenchmark\u538b\u529b\u6d4b\u8bd5\uff0c\u7528\u7684\u5c31\u662f *testing.B \uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u6267\u884c\u7684\u7ed3\u679c [ root@xeq-vm-197-77-opsorder-test lesson2 ] # go test -bench=\".\" goos: linux goarch: amd64 pkg: gostudy/lesson2 cpu: Intel Core Processor ( Broadwell ) BenchmarkGetArea-8 1000000000 0 .4688 ns/op PASS ok gostudy/lesson2 0 .528s \u8fd9\u91cc\u663e\u793a\u8fd0\u884c\u4e8610\u4ebf\u6b21\uff0c\u6bcf\u4e00\u6b21\u5faa\u73af\u8017\u65f60.4688 ns\u3002\u538b\u529b\u6d4b\u8bd5\u9700\u8981\u6ce8\u610f\u4ee5\u4e0b\u51e0\u4e2a\u70b9 go test \u4e0d\u4f1a\u9ed8\u8ba4\u6267\u884c\u538b\u529b\u6d4b\u8bd5\u7684\u51fd\u6570\uff0c\u5982\u679c\u8981\u6267\u884c\u538b\u529b\u6d4b\u8bd5\u9700\u8981\u5e26\u4e0a\u53c2\u6570-bench","title":"\u538b\u529b\u6d4b\u8bd5"},{"location":"mds/go/basic/go%E6%B5%8B%E8%AF%95/#_3","text":"\u8986\u76d6\u7387\u6d4b\u8bd5\u80fd\u77e5\u9053\u6d4b\u8bd5\u7a0b\u5e8f\u603b\u5171\u8986\u76d6\u4e86\u591a\u5c11\u4e1a\u52a1\u4ee3\u7801\uff08\u4e5f\u5c31\u662f demo_test.go \u4e2d\u6d4b\u8bd5\u4e86\u591a\u5c11 demo.go \u4e2d\u7684\u4ee3\u7801\uff09\uff0c\u53ef\u4ee5\u7684\u8bdd\u6700\u597d\u662f\u8986\u76d6100%\u3002 \u5c06 demo_test.go \u4ee3\u7801\u6539\u9020\u6210\u5982\u4e0b\u6240\u793a\u7684\u6837\u5b50\uff1a package demo import \"testing\" func TestGetArea ( t * testing . T ) { area := GetArea ( 40 , 50 ) if area != 2000 { t . Error ( \"\u6d4b\u8bd5\u5931\u8d25\" ) } } func BenchmarkGetArea ( t * testing . B ) { for i := 0 ; i < t . N ; i ++ { GetArea ( 40 , 50 ) } } \u7136\u540e\u8fd0\u884c\u8986\u76d6\u7387\u6d4b\u8bd5 [ root@xeq-vm-197-77-opsorder-test lesson2 ] # go test -cover PASS coverage: 100 .0% of statements ok gostudy/lesson2 0 .004s","title":"\u8986\u76d6\u7387\u6d4b\u8bd5"},{"location":"mds/go/basic/go%E6%B5%8B%E8%AF%95/#_4","text":"","title":"\u5de5\u5177"},{"location":"mds/go/basic/go%E6%B5%8B%E8%AF%95/#gotests","text":"gotests \u652f\u6301official Sublime Text 3 plugin\uff0cemacs\uff0cvscode\uff0cVim\u8fd8\u6709GoLand\u3002gotest\u53ef\u4ee5\u4e3a\u5355\u72ec\u4e00\u4e2a\u6e90\u6587\u4ef6\u751f\u6210\u6d4b\u8bd5\uff0c\u4e5f\u53ef\u4ee5\u4e3a\u6574\u4e2a\u4e00\u4e2a\u76ee\u5f55\u751f\u6210\u6d4b\u8bd5\u6587\u4ef6\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cgotests\u5c06\u8f93\u51fa\u6253\u5230stdout\u6807\u51c6\u8f93\u51fa\u3002 \u4f7f\u7528go get\u4e0b\u8f7d go get -u github.com/cweill/gotests/... gotests\u4f7f\u7528\u6307\u5357 [ root@xeq-vm-197-77-opsorder-test lesson2 ] # gotests --help Usage of gotests: -all generate tests for all functions and methods -excl string regexp. generate tests for functions and methods that don ' t match. Takes precedence over -only, -exported, and -all -exported generate tests for exported functions and methods. Takes precedence over -only and -all -i print test inputs in error messages -nosubtests disable generating tests using the Go 1 .7 subtests feature -only string regexp. generate tests for functions and methods that match only. Takes precedence over -all -parallel enable generating parallel subtests -template string optional. Specify custom test code templates, e.g. testify. This can also be set via environment variable GOTESTS_TEMPLATE -template_dir string optional. Path to a directory containing custom test code templates. Takes precedence over -template. This can also be set via environment variable GOTESTS_TEMPLATE_DIR -template_params string read external parameters to template by json with stdin -template_params_file string read external parameters to template by json with file -w write output to ( test ) files instead of stdout","title":"\u4f7f\u7528gotests\u81ea\u52a8\u751f\u6210\u6d4b\u8bd5\u4ee3\u7801"},{"location":"mds/go/basic/go%E6%B5%8B%E8%AF%95/#_5","text":"\u641e\u5b9aGo\u5355\u5143\u6d4b\u8bd5\uff08\u4e00\uff09\u2014\u2014\u57fa\u7840\u539f\u7406 \u641e\u5b9aGo\u5355\u5143\u6d4b\u8bd5\uff08\u4e8c\uff09\u2014\u2014 mock\u6846\u67b6(gomock) \u641e\u5b9aGo\u5355\u5143\u6d4b\u8bd5\uff08\u4e09\uff09\u2014\u2014 \u65ad\u8a00\uff08testify\uff09 \u641e\u5b9aGo\u5355\u5143\u6d4b\u8bd5\uff08\u56db\uff09\u2014\u2014 \u4f9d\u8d56\u6ce8\u5165\u6846\u67b6(wire) Go \u6027\u80fd\u8c03\u4f18\u4e4b \u2014\u2014 \u57fa\u51c6\u6d4b\u8bd5 \u5982\u4f55\u6709\u6548\u5730\u6d4b\u8bd5Go\u4ee3\u7801 Golang \u5355\u5143\u6d4b\u8bd5\uff1a\u6709\u54ea\u4e9b\u8bef\u533a\u548c\u5b9e\u8df5\uff1f \u4e00\u4e2a Golang \u9879\u76ee\u7684\u6d4b\u8bd5\u5b9e\u8df5\u5168\u8bb0\u5f55 go test\u547d\u4ee4\uff08Go\u8bed\u8a00\u6d4b\u8bd5\u547d\u4ee4\uff09\u5b8c\u5168\u653b\u7565 go test \u8be6\u89e3 \u5982\u4f55\u7528\u597d Go \u7684\u6d4b\u8bd5\u9ed1\u79d1\u6280 Go \u600e\u4e48\u5199\u6d4b\u8bd5\u7528\u4f8b Golang Testing \u6982\u89c8 - \u57fa\u672c\u7bc7","title":"\u53c2\u8003"},{"location":"mds/go/basic/%E5%85%B3%E9%94%AE%E5%AD%97/","text":"\u7c7b\u578b\u522b\u540d \u00b6 \u7c7b\u578b\u522b\u540d\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a type identifier = Type \u6765\u770b\u4e00\u4e2a\u793a\u4f8b package main import \"fmt\" type S = string func main () { var s S = \"hello world\" fmt . Println ( s ) }","title":"Go\u5173\u952e\u5b57"},{"location":"mds/go/basic/%E5%85%B3%E9%94%AE%E5%AD%97/#_1","text":"\u7c7b\u578b\u522b\u540d\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a type identifier = Type \u6765\u770b\u4e00\u4e2a\u793a\u4f8b package main import \"fmt\" type S = string func main () { var s S = \"hello world\" fmt . Println ( s ) }","title":"\u7c7b\u578b\u522b\u540d"},{"location":"mds/go/basic/%E6%8E%A5%E5%8F%A3/","text":"","title":"\u63a5\u53e3"},{"location":"mds/go/concurrency/01-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/01-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%88%9D%E8%AF%86/","text":"\u8fdb\u7a0b&\u7ebf\u7a0b \u00b6 \u5e76\u53d1 and \u5e76\u884c \u00b6 C10K\u95ee\u9898 \u00b6 \u5e76\u53d1\u6a21\u578b \u00b6 \u5f02\u6b65\u975e\u963b\u585e\uff08Nginx\uff0cLibEvent\uff0cNodeJS\uff09 \u00b6 \u590d\u6742\u5ea6\u8f83\u9ad8 \u534f\u7a0b\uff08Golang\uff0cErlang\uff0cLua\uff09 \u00b6 \u5728golang\u4e2d\uff0c\u534f\u7a0b\u53eb\u505agorouting \u591a\u4e2agoroutine\u4e4b\u95f4\u7684\u6570\u636e\u540c\u6b65\u548c\u901a\u4fe1\u662f\u901a\u8fc7channels \u591a\u4e2achannel\u901a\u8fc7select\u9009\u62e9\u6570\u636e\u8bfb\u53d6\u6216\u8005\u5199\u5165\u3002 \u5e76\u53d1\u8d44\u6e90\u64cd\u4f5c \u00b6 \u6bd4\u5982\u8bf4\u591a\u4e2aGoroutine\u5e76\u53d1\u66f4\u65b0\u540c\u4e00\u4e2a\u8d44\u6e90\uff0c\u6bd4\u5982\u8bf4\u8ba1\u6570\u5668","title":"1. \u5e76\u53d1\u7b80\u4ecb"},{"location":"mds/go/concurrency/01-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/01-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%88%9D%E8%AF%86/#_1","text":"","title":"\u8fdb\u7a0b&amp;\u7ebf\u7a0b"},{"location":"mds/go/concurrency/01-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/01-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%88%9D%E8%AF%86/#and","text":"","title":"\u5e76\u53d1 and \u5e76\u884c"},{"location":"mds/go/concurrency/01-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/01-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%88%9D%E8%AF%86/#c10k","text":"","title":"C10K\u95ee\u9898"},{"location":"mds/go/concurrency/01-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/01-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%88%9D%E8%AF%86/#_2","text":"","title":"\u5e76\u53d1\u6a21\u578b"},{"location":"mds/go/concurrency/01-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/01-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%88%9D%E8%AF%86/#nginxlibeventnodejs","text":"\u590d\u6742\u5ea6\u8f83\u9ad8","title":"\u5f02\u6b65\u975e\u963b\u585e\uff08Nginx\uff0cLibEvent\uff0cNodeJS\uff09"},{"location":"mds/go/concurrency/01-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/01-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%88%9D%E8%AF%86/#golangerlanglua","text":"\u5728golang\u4e2d\uff0c\u534f\u7a0b\u53eb\u505agorouting \u591a\u4e2agoroutine\u4e4b\u95f4\u7684\u6570\u636e\u540c\u6b65\u548c\u901a\u4fe1\u662f\u901a\u8fc7channels \u591a\u4e2achannel\u901a\u8fc7select\u9009\u62e9\u6570\u636e\u8bfb\u53d6\u6216\u8005\u5199\u5165\u3002","title":"\u534f\u7a0b\uff08Golang\uff0cErlang\uff0cLua\uff09"},{"location":"mds/go/concurrency/01-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/01-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%88%9D%E8%AF%86/#_3","text":"\u6bd4\u5982\u8bf4\u591a\u4e2aGoroutine\u5e76\u53d1\u66f4\u65b0\u540c\u4e00\u4e2a\u8d44\u6e90\uff0c\u6bd4\u5982\u8bf4\u8ba1\u6570\u5668","title":"\u5e76\u53d1\u8d44\u6e90\u64cd\u4f5c"},{"location":"mds/go/concurrency/01-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/02-goroutine/","text":"Goroutine\u7b80\u4ecb \u00b6 \u4e32\u884c\u7684\u6267\u884c \u00b6 golang\u4e32\u884c\u7684\u6267\u884c package main import \"fmt\" func helloWorld () { fmt . Println ( \"hello goroutine\" ) } func main () { helloWorld () fmt . Println ( \"main thread\" ) } \u54cd\u5e94\u7684\u7ed3\u679c\u4e3a hello goroutine main thread \u53ef\u4ee5\u770b\u5230\u4e0a\u9762\u7684\u7ed3\u679c\u662f\u5148\u6253\u5370 hello goroutine \uff0c\u7136\u540e\u518d\u6253\u5370 main thread \uff0c\u8fd9\u4e2a\u6267\u884c\u7ed3\u679c\u6c38\u8fdc\u90fd\u662f\u8fd9\u6837\u7684\uff0c\u56e0\u4e3a\u64cd\u4f5c\u7684\u7ed3\u679c\u662f\u4e32\u884c\u7684\u3002\u8fd9\u4e2a\u662f\u4e0d\u4f1a\u53d8\u5316\u7684\u3002\u90a3\u4e48\u63a5\u4e0b\u6765\u6211\u4eec\u52a0\u4e00\u4e2ago package main import \"fmt\" func helloWorld () { fmt . Println ( \"hello goroutine\" ) } func main () { go helloWorld () fmt . Println ( \"main thread\" ) } \u7136\u540e\u6211\u4eec\u518d\u6765\u770b\u76f8\u5e94\u7684\u7ed3\u679c main thread \u53ef\u4ee5\u53d1\u73b0\uff0c\u6211\u4eec\u7684hello goroutine\u4e4b\u524d\u8f93\u51fa\u7684\u4e0d\u5b58\u5728\u4e86\uff0c\u53ea\u6709\u8fd9\u4e00\u6761\u3002\u4f46\u662f\u591a\u6b21\u9891\u7e41\u5c1d\u8bd5\u6211\u4eec\u53d1\u73b0\uff0c\u6709\u7684\u65f6\u5019\u4e5f\u662f\u53ef\u4ee5\u6253\u5370\u51fa\u6765hello goroutine\u7684\uff0c\u90a3\u4e48\u8fd9\u4e2a\u662f\u4ec0\u4e48\u539f\u56e0\u5bfc\u81f4\u7684\u5462\uff1f\u7a76\u5176\u539f\u56e0\u7684\u8bdd\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u5728\u4f7f\u7528go\u5f00\u542f\u4e00\u4e2agoroutine\uff0c\u5b83\u4e5f\u662f\u9700\u8981\u5f00\u9500\u548c\u65f6\u95f4\u7684\uff0c\u8fd9\u91cc\u64cd\u4f5c\u7684\u65f6\u5019\u5c31\u4e0d\u518d\u662f\u4e32\u884c\u7684\u4e86\uff0c\u800cmain\u51fd\u6570\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u5355\u72ec\u7684goroutine\uff0c\u56e0\u6b64main\u51fd\u6570\u6267\u884c\u5b8c\u4e86\u4ee5\u540e\u5c31\u76f4\u63a5return\u4e86\uff0c\u6709\u53ef\u80fd\u8fd9\u4e2a\u65f6\u5019helloWorld\u8fd8\u6ca1\u6709\u6267\u884c\u5b8c\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u770b\u5230\u6709\u7684\u65f6\u5019\u53ea\u8f93\u51fa main thread \u6709\u7684\u65f6\u5019\u4f1a\u8f93\u51fa\u4e24\u4e2a\u3002 \u6700\u7b80\u5355\u7684\u5904\u7406\u65b9\u5f0f\u6bd4\u5982\u8bf4\u6211\u5728main\u8fd9\u4e2agoroutine\u4e2dsleep\u4e00\u4e0b\uff0c\u7b49\u4e00\u4e0bhellWorld\u8fd9\u4e2agoroutine\u5b8c\u6210\u3002 package main import ( \"fmt\" \"time\" ) func hello ( i int ) { fmt . Println ( \"hello goroutine\" , i ) } func main () { for i := 0 ; i < 10 ; i ++ { go hello ( i ) } time . Sleep ( time . Second ) } \u4e0a\u9762\u7684\u663e\u793a\u7ed3\u679c\u6bcf\u4e00\u6b21\u90fd\u662f\u4e0d\u4e00\u6837\u7684 hello goroutine 0 hello goroutine 4 hello goroutine 1 hello goroutine 7 hello goroutine 6 hello goroutine 8 hello goroutine 2 hello goroutine 3 hello goroutine 9 hello goroutine 5 \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\uff0c\u8fd9\u4e2a\u662f\u5e76\u53d1\u6267\u884c\u7684\uff0c\u800c\u4e0d\u662f\u4e32\u884c\u6267\u884c\u7684\u3002\u518d\u770b\u4e00\u4e2a\u793a\u4f8b package main import ( \"fmt\" \"time\" ) func numbers () { for i := 1 ; i <= 5 ; i ++ { time . Sleep ( 250 * time . Millisecond ) fmt . Printf ( \"%d\" , i ) } } func alphabets () { for i := 'a' ; i <= 'e' ; i ++ { time . Sleep ( 400 * time . Millisecond ) fmt . Printf ( \"%c\" , i ) } } func main () { go numbers () go alphabets () time . Sleep ( 3000 * time . Millisecond ) fmt . Println ( \"main thread terminate\" ) } \u8fd4\u56de\u7684\u7ed3\u679c\uff0c\u54b1\u4eec\u53ef\u4ee5\u7b97\u4e00\u7b97\u5982\u679c\u4e24\u4e2afunc\u8fd9\u6837\u6267\u884c\u7684\u65f6\u5019\uff0c\u662f\u4e0d\u662f\u8fd9\u4e2a\u8f93\u51fa\u7684\u987a\u5e8f\uff1f 1a23b4c5demain thread terminate","title":"2. Goroutine"},{"location":"mds/go/concurrency/01-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/02-goroutine/#goroutine","text":"","title":"Goroutine\u7b80\u4ecb"},{"location":"mds/go/concurrency/01-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/02-goroutine/#_1","text":"golang\u4e32\u884c\u7684\u6267\u884c package main import \"fmt\" func helloWorld () { fmt . Println ( \"hello goroutine\" ) } func main () { helloWorld () fmt . Println ( \"main thread\" ) } \u54cd\u5e94\u7684\u7ed3\u679c\u4e3a hello goroutine main thread \u53ef\u4ee5\u770b\u5230\u4e0a\u9762\u7684\u7ed3\u679c\u662f\u5148\u6253\u5370 hello goroutine \uff0c\u7136\u540e\u518d\u6253\u5370 main thread \uff0c\u8fd9\u4e2a\u6267\u884c\u7ed3\u679c\u6c38\u8fdc\u90fd\u662f\u8fd9\u6837\u7684\uff0c\u56e0\u4e3a\u64cd\u4f5c\u7684\u7ed3\u679c\u662f\u4e32\u884c\u7684\u3002\u8fd9\u4e2a\u662f\u4e0d\u4f1a\u53d8\u5316\u7684\u3002\u90a3\u4e48\u63a5\u4e0b\u6765\u6211\u4eec\u52a0\u4e00\u4e2ago package main import \"fmt\" func helloWorld () { fmt . Println ( \"hello goroutine\" ) } func main () { go helloWorld () fmt . Println ( \"main thread\" ) } \u7136\u540e\u6211\u4eec\u518d\u6765\u770b\u76f8\u5e94\u7684\u7ed3\u679c main thread \u53ef\u4ee5\u53d1\u73b0\uff0c\u6211\u4eec\u7684hello goroutine\u4e4b\u524d\u8f93\u51fa\u7684\u4e0d\u5b58\u5728\u4e86\uff0c\u53ea\u6709\u8fd9\u4e00\u6761\u3002\u4f46\u662f\u591a\u6b21\u9891\u7e41\u5c1d\u8bd5\u6211\u4eec\u53d1\u73b0\uff0c\u6709\u7684\u65f6\u5019\u4e5f\u662f\u53ef\u4ee5\u6253\u5370\u51fa\u6765hello goroutine\u7684\uff0c\u90a3\u4e48\u8fd9\u4e2a\u662f\u4ec0\u4e48\u539f\u56e0\u5bfc\u81f4\u7684\u5462\uff1f\u7a76\u5176\u539f\u56e0\u7684\u8bdd\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u5728\u4f7f\u7528go\u5f00\u542f\u4e00\u4e2agoroutine\uff0c\u5b83\u4e5f\u662f\u9700\u8981\u5f00\u9500\u548c\u65f6\u95f4\u7684\uff0c\u8fd9\u91cc\u64cd\u4f5c\u7684\u65f6\u5019\u5c31\u4e0d\u518d\u662f\u4e32\u884c\u7684\u4e86\uff0c\u800cmain\u51fd\u6570\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u5355\u72ec\u7684goroutine\uff0c\u56e0\u6b64main\u51fd\u6570\u6267\u884c\u5b8c\u4e86\u4ee5\u540e\u5c31\u76f4\u63a5return\u4e86\uff0c\u6709\u53ef\u80fd\u8fd9\u4e2a\u65f6\u5019helloWorld\u8fd8\u6ca1\u6709\u6267\u884c\u5b8c\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u770b\u5230\u6709\u7684\u65f6\u5019\u53ea\u8f93\u51fa main thread \u6709\u7684\u65f6\u5019\u4f1a\u8f93\u51fa\u4e24\u4e2a\u3002 \u6700\u7b80\u5355\u7684\u5904\u7406\u65b9\u5f0f\u6bd4\u5982\u8bf4\u6211\u5728main\u8fd9\u4e2agoroutine\u4e2dsleep\u4e00\u4e0b\uff0c\u7b49\u4e00\u4e0bhellWorld\u8fd9\u4e2agoroutine\u5b8c\u6210\u3002 package main import ( \"fmt\" \"time\" ) func hello ( i int ) { fmt . Println ( \"hello goroutine\" , i ) } func main () { for i := 0 ; i < 10 ; i ++ { go hello ( i ) } time . Sleep ( time . Second ) } \u4e0a\u9762\u7684\u663e\u793a\u7ed3\u679c\u6bcf\u4e00\u6b21\u90fd\u662f\u4e0d\u4e00\u6837\u7684 hello goroutine 0 hello goroutine 4 hello goroutine 1 hello goroutine 7 hello goroutine 6 hello goroutine 8 hello goroutine 2 hello goroutine 3 hello goroutine 9 hello goroutine 5 \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\uff0c\u8fd9\u4e2a\u662f\u5e76\u53d1\u6267\u884c\u7684\uff0c\u800c\u4e0d\u662f\u4e32\u884c\u6267\u884c\u7684\u3002\u518d\u770b\u4e00\u4e2a\u793a\u4f8b package main import ( \"fmt\" \"time\" ) func numbers () { for i := 1 ; i <= 5 ; i ++ { time . Sleep ( 250 * time . Millisecond ) fmt . Printf ( \"%d\" , i ) } } func alphabets () { for i := 'a' ; i <= 'e' ; i ++ { time . Sleep ( 400 * time . Millisecond ) fmt . Printf ( \"%c\" , i ) } } func main () { go numbers () go alphabets () time . Sleep ( 3000 * time . Millisecond ) fmt . Println ( \"main thread terminate\" ) } \u8fd4\u56de\u7684\u7ed3\u679c\uff0c\u54b1\u4eec\u53ef\u4ee5\u7b97\u4e00\u7b97\u5982\u679c\u4e24\u4e2afunc\u8fd9\u6837\u6267\u884c\u7684\u65f6\u5019\uff0c\u662f\u4e0d\u662f\u8fd9\u4e2a\u8f93\u51fa\u7684\u987a\u5e8f\uff1f 1a23b4c5demain thread terminate","title":"\u4e32\u884c\u7684\u6267\u884c"},{"location":"mds/go/concurrency/01-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/03-channel/","text":"","title":"3. Channel"},{"location":"mds/go/gin/1-gin%E6%A1%86%E6%9E%B6%E5%88%9D%E8%AF%86/","text":"\u9644\u5f55\uff1a \u00b6 Gin Examples","title":"1. Gin\u7b80\u4ecb"},{"location":"mds/go/gin/1-gin%E6%A1%86%E6%9E%B6%E5%88%9D%E8%AF%86/#_1","text":"Gin Examples","title":"\u9644\u5f55\uff1a"},{"location":"mds/go/pkgs/","text":"\u5b57\u7b26\u4e32\u5904\u7406 \u00b6 \u7f51\u7edc\u5904\u7406 \u00b6 net net/http net/rpc net/rpc/jsonrpc net/smtp net/url \u7cfb\u7edf\u64cd\u4f5c \u00b6 os/exec os/signal os/user path path/filepath syscall","title":"Go\u5e93\u5b66\u4e60"},{"location":"mds/go/pkgs/#_1","text":"","title":"\u5b57\u7b26\u4e32\u5904\u7406"},{"location":"mds/go/pkgs/#_2","text":"net net/http net/rpc net/rpc/jsonrpc net/smtp net/url","title":"\u7f51\u7edc\u5904\u7406"},{"location":"mds/go/pkgs/#_3","text":"os/exec os/signal os/user path path/filepath syscall","title":"\u7cfb\u7edf\u64cd\u4f5c"},{"location":"mds/go/pkgs/net/","text":"\u63a5\u53e3\u76f8\u5173 \u00b6","title":"net\u5305\u7684\u4f7f\u7528"},{"location":"mds/go/pkgs/net/#_1","text":"","title":"\u63a5\u53e3\u76f8\u5173"},{"location":"mds/go/pkgs/net/http/net-http/","text":"this is the first paragraph","title":"net/http"},{"location":"mds/k8s/test/","text":"Kubernetes\u751f\u4ea7\u5b9e\u8df5\u7cfb\u5217 Kubernetes\u7cfb\u5217","title":"Kubernetes\u5f85\u5b9a"},{"location":"mds/linux/DNS/dnsmasq/","text":"CNAME\u89e3\u6790 \u00b6 \u5728dnsmasq\u4e2d\uff0ccname\u89e3\u6790\u5fc5\u987b\u8981\u6c42\u672c\u673a\u7684/etc/hosts\u4e2d\u6587\u4ef6\u5b58\u5728\u5bf9\u5e94\u7684\u8bb0\u5f55\uff0c\u5426\u5219\u4f1a\u88ab\u81ea\u52a8ignore\u6389\u3002 \u53c2\u8003\uff1a - Resolve a domain name to CNAME alias locally using dnsmasq - https://blog.286.im/posts/use-dnsmasq-local-cname/","title":"Index"},{"location":"mds/linux/DNS/dnsmasq/#cname","text":"\u5728dnsmasq\u4e2d\uff0ccname\u89e3\u6790\u5fc5\u987b\u8981\u6c42\u672c\u673a\u7684/etc/hosts\u4e2d\u6587\u4ef6\u5b58\u5728\u5bf9\u5e94\u7684\u8bb0\u5f55\uff0c\u5426\u5219\u4f1a\u88ab\u81ea\u52a8ignore\u6389\u3002 \u53c2\u8003\uff1a - Resolve a domain name to CNAME alias locally using dnsmasq - https://blog.286.im/posts/use-dnsmasq-local-cname/","title":"CNAME\u89e3\u6790"},{"location":"mds/linux/ServiceDiscovery/Consul/acl/","text":"ACL\u7cfb\u7edf \u00b6 ACL\u89c4\u5219 \u00b6 \u89c4\u5219\u8bed\u6cd5\u8bf4\u660e \u00b6 \u53c2\u8003 \u5b98\u65b9\u53c2\u8003\u6587\u6863 Consul\u96c6\u7fa4\u914d\u7f6eACL \u7b80\u5355\u6765\u8bb2ACL\u7684\u89c4\u5219\u5339\u914d\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u524d\u7f00\u5339\u914d\uff08Prefix based rules\uff09\uff0c\u53e6\u5916\u4e00\u79cd\u662f\u7cbe\u786e\u5339\u914d\uff08Exact Matching Rules\uff09 \u6307\u5b9aRule\u89c4\u5219\u7684\u4e66\u5199\u7ed3\u6784\u4e3a\uff1a <resource> \"<segment>\" { policy = \"<policy disposition>\" } resource\uff1a\u4ee3\u8868\u7684\u662f\u6211\u4eec\u53ef\u4ee5\u64cd\u4f5c\u7684\u8d44\u6e90\uff0c\u6bd4\u5982\u8bf4key\uff0cservice\uff0cagent\uff0cnode\u7b49\u3002 policy\uff1a\u7b56\u7565\uff0c\u5982read\uff0cwrite\uff0cdeny\uff0clist\u3002read\u4ee3\u8868\u53ea\u8bfb\uff0cwrite\u4ee3\u8868\u8bfb\u5199\uff0cdeny\u8868\u793a\u4e0d\u80fd\u8bfb\u5199\uff0clist\u8868\u793a\u53ef\u4ee5\u8bbf\u95ee\u5f53\u524dresource segment\u4e0b\u7684Consul KV\u7684\u6240\u6709key\uff0c\u6ce8\u610f\u8fd9\u4e2a\u7b56\u7565\u53ea\u80fd\u548ckey_prefix\u8054\u5408\u4f7f\u7528\uff0c\u5e76\u4e14 acl.enable_key_list_policy \u5fc5\u987b\u8bbe\u7f6e\u4e3atrue\u3002 \u6dfb\u52a0\u4e00\u4e2aACL \u00b6 \u547d\u4ee4\u884c\u6dfb\u52a0 \u00b6 web\u754c\u9762\u6dfb\u52a0 \u00b6","title":"Consul ACL"},{"location":"mds/linux/ServiceDiscovery/Consul/acl/#acl","text":"","title":"ACL\u7cfb\u7edf"},{"location":"mds/linux/ServiceDiscovery/Consul/acl/#acl_1","text":"","title":"ACL\u89c4\u5219"},{"location":"mds/linux/ServiceDiscovery/Consul/acl/#_1","text":"\u53c2\u8003 \u5b98\u65b9\u53c2\u8003\u6587\u6863 Consul\u96c6\u7fa4\u914d\u7f6eACL \u7b80\u5355\u6765\u8bb2ACL\u7684\u89c4\u5219\u5339\u914d\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u524d\u7f00\u5339\u914d\uff08Prefix based rules\uff09\uff0c\u53e6\u5916\u4e00\u79cd\u662f\u7cbe\u786e\u5339\u914d\uff08Exact Matching Rules\uff09 \u6307\u5b9aRule\u89c4\u5219\u7684\u4e66\u5199\u7ed3\u6784\u4e3a\uff1a <resource> \"<segment>\" { policy = \"<policy disposition>\" } resource\uff1a\u4ee3\u8868\u7684\u662f\u6211\u4eec\u53ef\u4ee5\u64cd\u4f5c\u7684\u8d44\u6e90\uff0c\u6bd4\u5982\u8bf4key\uff0cservice\uff0cagent\uff0cnode\u7b49\u3002 policy\uff1a\u7b56\u7565\uff0c\u5982read\uff0cwrite\uff0cdeny\uff0clist\u3002read\u4ee3\u8868\u53ea\u8bfb\uff0cwrite\u4ee3\u8868\u8bfb\u5199\uff0cdeny\u8868\u793a\u4e0d\u80fd\u8bfb\u5199\uff0clist\u8868\u793a\u53ef\u4ee5\u8bbf\u95ee\u5f53\u524dresource segment\u4e0b\u7684Consul KV\u7684\u6240\u6709key\uff0c\u6ce8\u610f\u8fd9\u4e2a\u7b56\u7565\u53ea\u80fd\u548ckey_prefix\u8054\u5408\u4f7f\u7528\uff0c\u5e76\u4e14 acl.enable_key_list_policy \u5fc5\u987b\u8bbe\u7f6e\u4e3atrue\u3002","title":"\u89c4\u5219\u8bed\u6cd5\u8bf4\u660e"},{"location":"mds/linux/ServiceDiscovery/Consul/acl/#acl_2","text":"","title":"\u6dfb\u52a0\u4e00\u4e2aACL"},{"location":"mds/linux/ServiceDiscovery/Consul/acl/#_2","text":"","title":"\u547d\u4ee4\u884c\u6dfb\u52a0"},{"location":"mds/linux/ServiceDiscovery/Consul/acl/#web","text":"","title":"web\u754c\u9762\u6dfb\u52a0"},{"location":"mds/linux/ServiceDiscovery/Consul/consul_install/","text":"Consul\u5355\u70b9\u90e8\u7f72 \u00b6 Consul\u96c6\u7fa4\u90e8\u7f72 \u00b6 \u5b89\u88c5\u8be6\u60c5 Consul\u7248\u672c\u53f7\uff1aConsul v1.10.2 \u670d\u52a1\u5668IP \u670d\u52a1\u7aef\u89d2\u8272 172.18.197.100 Server 172.18.197.101 Server 172.18.197.102 Server \u9644\u5f55 \u00b6 Consul Documentation","title":"Consul\u90e8\u7f72"},{"location":"mds/linux/ServiceDiscovery/Consul/consul_install/#consul","text":"","title":"Consul\u5355\u70b9\u90e8\u7f72"},{"location":"mds/linux/ServiceDiscovery/Consul/consul_install/#consul_1","text":"\u5b89\u88c5\u8be6\u60c5 Consul\u7248\u672c\u53f7\uff1aConsul v1.10.2 \u670d\u52a1\u5668IP \u670d\u52a1\u7aef\u89d2\u8272 172.18.197.100 Server 172.18.197.101 Server 172.18.197.102 Server","title":"Consul\u96c6\u7fa4\u90e8\u7f72"},{"location":"mds/linux/ServiceDiscovery/Consul/consul_install/#_1","text":"Consul Documentation","title":"\u9644\u5f55"},{"location":"mds/linux/base/memoryPage/","text":"PageFault\uff08\u7f3a\u9875\u5f02\u5e38\uff09 \u00b6 \u53c2\u8003 page fault\u7684\u4e24\u79cd\u533a\u522b page fault\u5e26\u6765\u7684\u6027\u80fd\u95ee\u9898 Understanding page faults and memory swap-in/outs: when should you worry?","title":"\u5185\u5b58"},{"location":"mds/linux/base/memoryPage/#pagefault","text":"\u53c2\u8003 page fault\u7684\u4e24\u79cd\u533a\u522b page fault\u5e26\u6765\u7684\u6027\u80fd\u95ee\u9898 Understanding page faults and memory swap-in/outs: when should you worry?","title":"PageFault\uff08\u7f3a\u9875\u5f02\u5e38\uff09"},{"location":"mds/linux/shell/sed/","text":"Sed\u5728\u6587\u672c\u7684\u884c\u4f4d\u6216\u8005\u884c\u9996\u6dfb\u52a0\u5b57\u7b26\u4e32 \u00b6 \u5728\u6bcf\u884c\u7684\u5934\u6dfb\u52a0\u5b57\u7b26\uff0c\u6bd4\u5982\"HEAD\"\uff0c\u547d\u4ee4\u5982\u4e0b\uff1a sed 's/^/HEAD&/g' test.file \u5728\u6bcf\u884c\u7684\u884c\u5c3e\u6dfb\u52a0\u5b57\u7b26\uff0c\u6bd4\u5982\u201cTAIL\u201d\uff0c\u547d\u4ee4\u5982\u4e0b\uff1a sed 's/$/&TAIL/g' test.file","title":"Sed"},{"location":"mds/linux/shell/sed/#sed","text":"\u5728\u6bcf\u884c\u7684\u5934\u6dfb\u52a0\u5b57\u7b26\uff0c\u6bd4\u5982\"HEAD\"\uff0c\u547d\u4ee4\u5982\u4e0b\uff1a sed 's/^/HEAD&/g' test.file \u5728\u6bcf\u884c\u7684\u884c\u5c3e\u6dfb\u52a0\u5b57\u7b26\uff0c\u6bd4\u5982\u201cTAIL\u201d\uff0c\u547d\u4ee4\u5982\u4e0b\uff1a sed 's/$/&TAIL/g' test.file","title":"Sed\u5728\u6587\u672c\u7684\u884c\u4f4d\u6216\u8005\u884c\u9996\u6dfb\u52a0\u5b57\u7b26\u4e32"},{"location":"mds/linux/shell/shell%E4%B8%AD%E7%9A%84%E6%8B%AC%E5%8F%B7/","text":"\u53cc\u5c0f\u62ec\u53f7 \u00b6 \u4f7f\u7528\u8bed\u6cd5: ((\u8868\u8fbe\u5f0f)) \u7528\u6765\u6269\u5c55Shell\u4e2d\u7684\u7b97\u672f\u8fd0\u7b97,\u4ee5\u53ca\u8d4b\u503c\u8fd0\u7b97,\u6269\u5c55for,while,if\u6761\u4ef6\u6d4b\u8bd5\u8fd0\u7b97. \u6ce8\u610f\u70b9: 1.\u5728\u53cc\u62ec\u53f7\u7ed3\u6784\u4e2d,\u6240\u6709\u7684\u8868\u8fbe\u5f0f\u53ef\u4ee5\u50cfc\u8bed\u8a00\u4e00\u6837,\u5982a++,b-- 2.\u5728\u53cc\u62ec\u53f7\u7ed3\u6784\u4e2d,\u6240\u6709\u53d8\u91cf\u53ef\u4ee5\u4e0d\u52a0\u5165$\u7b26\u53f7\u524d\u7f00,\u4e5f\u53ef\u4ee5\u52a0\u5165. 3.\u5728\u53cc\u62ec\u53f7\u53ef\u4ee5\u8fdb\u884c\u903b\u8f91\u8fd0\u7b97,\u56db\u5219\u8fd0\u7b97,\u800c\u4e14\u8fd0\u7b97\u7b26\u5408\u6570\u503c\u4e4b\u95f4\u53ef\u4ee5\u6ca1\u6709\u7a7a\u683c,\u4e5f\u53ef\u4ee5\u6709\u7a7a\u683c. 4.\u53cc\u62ec\u53f7\u7ed3\u6784\u6269\u5c55\u4e86for,while,if\u6761\u4ef6\u6d4b\u8bd5\u8fd0\u7b97. 5.\u652f\u6301\u591a\u4e2a\u8868\u8fbe\u5f0f\u8fd0\u7b97,\u5404\u4e2a\u8868\u8fbe\u5f0f\u4e4b\u95f4\u7528\u9017\u53f7,\u5206\u5f00. 6.\u4f7f\u7528[]\u65f6\u5fc5\u987b\u4fdd\u8bc1\u8fd0\u7b97\u7b26\u4e0e\u6570\u503c\u4e4b\u95f4\u6709\u7a7a\u683c,\u800c(())\u65f6\u6570\u503c\u4e0e\u8fd0\u7b97\u7b26\u53ef\u4ee5\u6ca1\u6709\u7a7a\u683c. \u5c0f\u6280\u5de7: 1.\u65b0\u5efa (()).sh \u6587\u4ef6 vim \"(()).sh\" ,\u56e0\u4e3a()\u5728shell\u4e2d\u6709\u7279\u6b8a\u542b\u4e49,\u53ea\u80fd\u7528\"\u62ec\u8d77\u6765,\u7528\u5355\u5f15\u53f7\u4e5f\u662f\u4e0d\u884c\u7684. 2.\u4f7f\u7528\u6587\u4ef6\u65f6: vim \\(\\(\\)\\).sh ,\u53ef\u4ee5\u5728\u8981\u4f7f\u7528\u7684\u542b\u6709\u7279\u6b8a\u7b26\u53f7\u7684\u6587\u4ef6\u524d\u9762\u6dfb\u52a0\u4e00\u4e2a\u8f6c\u4e49\u7b26\u53f7\\\u7136\u540e\u53ef\u4ee5\u6309\u63d0\u793a\u6309\u8865\u5168. \u793a\u4f8b\uff1a\u6c42100\u4ee5\u5185\u7684\u5076\u6570 #! /bin/bash num = 2 while (( num< 100 )) #\u6570\u503c\u4e0e\u8fd0\u7b97\u7b26\u53ef\u4ee5\u6ca1\u6709\u7a7a\u683c,\u53d8\u91cf\u7684\u4f7f\u7528\u65f6\u4e5f\u53ef\u4ee5\u4e0d\u4f7f\u7528$num do echo \" $num \" (( num = num*2 )) done \u7ed3\u679c [ root@yveshe ~ ] # ./\\(\\(\\)\\).sh 2 4 8 16 32 64","title":"Shell\u4e2d\u7684\u62ec\u53f7"},{"location":"mds/linux/shell/shell%E4%B8%AD%E7%9A%84%E6%8B%AC%E5%8F%B7/#_1","text":"\u4f7f\u7528\u8bed\u6cd5: ((\u8868\u8fbe\u5f0f)) \u7528\u6765\u6269\u5c55Shell\u4e2d\u7684\u7b97\u672f\u8fd0\u7b97,\u4ee5\u53ca\u8d4b\u503c\u8fd0\u7b97,\u6269\u5c55for,while,if\u6761\u4ef6\u6d4b\u8bd5\u8fd0\u7b97. \u6ce8\u610f\u70b9: 1.\u5728\u53cc\u62ec\u53f7\u7ed3\u6784\u4e2d,\u6240\u6709\u7684\u8868\u8fbe\u5f0f\u53ef\u4ee5\u50cfc\u8bed\u8a00\u4e00\u6837,\u5982a++,b-- 2.\u5728\u53cc\u62ec\u53f7\u7ed3\u6784\u4e2d,\u6240\u6709\u53d8\u91cf\u53ef\u4ee5\u4e0d\u52a0\u5165$\u7b26\u53f7\u524d\u7f00,\u4e5f\u53ef\u4ee5\u52a0\u5165. 3.\u5728\u53cc\u62ec\u53f7\u53ef\u4ee5\u8fdb\u884c\u903b\u8f91\u8fd0\u7b97,\u56db\u5219\u8fd0\u7b97,\u800c\u4e14\u8fd0\u7b97\u7b26\u5408\u6570\u503c\u4e4b\u95f4\u53ef\u4ee5\u6ca1\u6709\u7a7a\u683c,\u4e5f\u53ef\u4ee5\u6709\u7a7a\u683c. 4.\u53cc\u62ec\u53f7\u7ed3\u6784\u6269\u5c55\u4e86for,while,if\u6761\u4ef6\u6d4b\u8bd5\u8fd0\u7b97. 5.\u652f\u6301\u591a\u4e2a\u8868\u8fbe\u5f0f\u8fd0\u7b97,\u5404\u4e2a\u8868\u8fbe\u5f0f\u4e4b\u95f4\u7528\u9017\u53f7,\u5206\u5f00. 6.\u4f7f\u7528[]\u65f6\u5fc5\u987b\u4fdd\u8bc1\u8fd0\u7b97\u7b26\u4e0e\u6570\u503c\u4e4b\u95f4\u6709\u7a7a\u683c,\u800c(())\u65f6\u6570\u503c\u4e0e\u8fd0\u7b97\u7b26\u53ef\u4ee5\u6ca1\u6709\u7a7a\u683c. \u5c0f\u6280\u5de7: 1.\u65b0\u5efa (()).sh \u6587\u4ef6 vim \"(()).sh\" ,\u56e0\u4e3a()\u5728shell\u4e2d\u6709\u7279\u6b8a\u542b\u4e49,\u53ea\u80fd\u7528\"\u62ec\u8d77\u6765,\u7528\u5355\u5f15\u53f7\u4e5f\u662f\u4e0d\u884c\u7684. 2.\u4f7f\u7528\u6587\u4ef6\u65f6: vim \\(\\(\\)\\).sh ,\u53ef\u4ee5\u5728\u8981\u4f7f\u7528\u7684\u542b\u6709\u7279\u6b8a\u7b26\u53f7\u7684\u6587\u4ef6\u524d\u9762\u6dfb\u52a0\u4e00\u4e2a\u8f6c\u4e49\u7b26\u53f7\\\u7136\u540e\u53ef\u4ee5\u6309\u63d0\u793a\u6309\u8865\u5168. \u793a\u4f8b\uff1a\u6c42100\u4ee5\u5185\u7684\u5076\u6570 #! /bin/bash num = 2 while (( num< 100 )) #\u6570\u503c\u4e0e\u8fd0\u7b97\u7b26\u53ef\u4ee5\u6ca1\u6709\u7a7a\u683c,\u53d8\u91cf\u7684\u4f7f\u7528\u65f6\u4e5f\u53ef\u4ee5\u4e0d\u4f7f\u7528$num do echo \" $num \" (( num = num*2 )) done \u7ed3\u679c [ root@yveshe ~ ] # ./\\(\\(\\)\\).sh 2 4 8 16 32 64","title":"\u53cc\u5c0f\u62ec\u53f7"},{"location":"mds/linux/shell/shell%E9%87%8D%E5%AE%9A%E5%90%91/","text":"Stdin,Stdout,Strerr \u00b6 stdin\uff1a\u6807\u51c6\u8f93\u5165\uff080\uff09 stdout\uff1a\u6807\u51c6\u8f93\u51fa\uff081\uff09 stderr\uff1a\u6807\u51c6\u9519\u8bef\u8f93\u51fa\uff082\uff09 \u5e38\u89c1\u7684\u6211\u4eec\u91cd\u5b9a\u5411\u547d\u4ee4\u7684\u8f93\u51fa\u65b9\u5f0f\u6709 >/dev/null 2 > & 1 \u4e0a\u9762\u7684\u547d\u4ee4\u53ef\u4ee5\u5206\u4e3a\u4e24\u90e8\u5206\u53bb\u770b\uff0c\u5176\u4e2d >/dev/null \uff0c\u662f\u628a\u8fd9\u4e9b\u8f93\u51fa\u585e\u5230/dev/null\u91cc\u9762\u53bb\u3002 2>&1 \u8868\u793a\u8981\u64cd\u4f5c\u7684\u5bf9\u8c61\u662fstdout\u548cstderr\uff0c\u6240\u4ee5\u4e0a\u9762\u8fd9\u6761\u547d\u4ee4\u7684\u610f\u601d\u5c31\u662f\u628a\u6807\u51c6\u8f93\u51fa\u548c\u6807\u51c6\u9519\u8bef\u6254\u5230/dev/null\u91cc\u9762\u53bb\u3002\u56e0\u4e3a\u8fd9\u91cc\u628a\u6807\u51c6\u8f93\u5165\u76f4\u63a5\u4e22\u5f03\u4e86\u3002 Code \u8bf4\u660e FileDescription 0 \u6807\u51c6\u8f93\u5165 /proc/self/fd/0 1 \u6807\u51c6\u8f93\u51fa /proc/self/fd/1 2 \u9519\u8bef\u8f93\u51fa /proc/self/fd/2 \u91c7\u7528&\u53ef\u4ee5\u5c06\u4e24\u4e2a\u8f93\u51fa\u7ed1\u5b9a\u5728\u4e00\u8d77\uff0c\u5c31\u662f\u9519\u8bef\u8f93\u51fa\u5c06\u4f1a\u548c\u6807\u51c6\u8f93\u51fa\u8f93\u51fa\u5230\u540c\u4e00\u4e2a\u5730\u65b9\uff0c\u4e0b\u9762\u9488\u5bf9\u4e24\u4e2a\u547d\u4ee4\u8fdb\u884c\u7b80\u5355\u7684\u8bf4\u660e \u547d\u4ee4 \u6807\u51c6\u8f93\u51fa \u9519\u8bef\u8f93\u51fa >/dev/null 2>&1 \u4e22\u5f03 \u4e22\u5f03 2>&1 >/dev/null \u4e22\u5f03 \u5c4f\u5e55 \u6211\u4eec\u7ecf\u5e38\u8bb2\u8fd9\u4e9b\u5185\u5bb9\u4e0enohup\u7ed3\u5408\u4f7f\u7528\u5c06\u5e94\u7528\u653e\u5230\u540e\u53f0\u542f\u52a8\uff0c\u6bd4\u5982 nohup java -jar xxxx.jar >/dev/null 2 > & 1 &","title":"Shell\u91cd\u5b9a\u5411"},{"location":"mds/linux/shell/shell%E9%87%8D%E5%AE%9A%E5%90%91/#stdinstdoutstrerr","text":"stdin\uff1a\u6807\u51c6\u8f93\u5165\uff080\uff09 stdout\uff1a\u6807\u51c6\u8f93\u51fa\uff081\uff09 stderr\uff1a\u6807\u51c6\u9519\u8bef\u8f93\u51fa\uff082\uff09 \u5e38\u89c1\u7684\u6211\u4eec\u91cd\u5b9a\u5411\u547d\u4ee4\u7684\u8f93\u51fa\u65b9\u5f0f\u6709 >/dev/null 2 > & 1 \u4e0a\u9762\u7684\u547d\u4ee4\u53ef\u4ee5\u5206\u4e3a\u4e24\u90e8\u5206\u53bb\u770b\uff0c\u5176\u4e2d >/dev/null \uff0c\u662f\u628a\u8fd9\u4e9b\u8f93\u51fa\u585e\u5230/dev/null\u91cc\u9762\u53bb\u3002 2>&1 \u8868\u793a\u8981\u64cd\u4f5c\u7684\u5bf9\u8c61\u662fstdout\u548cstderr\uff0c\u6240\u4ee5\u4e0a\u9762\u8fd9\u6761\u547d\u4ee4\u7684\u610f\u601d\u5c31\u662f\u628a\u6807\u51c6\u8f93\u51fa\u548c\u6807\u51c6\u9519\u8bef\u6254\u5230/dev/null\u91cc\u9762\u53bb\u3002\u56e0\u4e3a\u8fd9\u91cc\u628a\u6807\u51c6\u8f93\u5165\u76f4\u63a5\u4e22\u5f03\u4e86\u3002 Code \u8bf4\u660e FileDescription 0 \u6807\u51c6\u8f93\u5165 /proc/self/fd/0 1 \u6807\u51c6\u8f93\u51fa /proc/self/fd/1 2 \u9519\u8bef\u8f93\u51fa /proc/self/fd/2 \u91c7\u7528&\u53ef\u4ee5\u5c06\u4e24\u4e2a\u8f93\u51fa\u7ed1\u5b9a\u5728\u4e00\u8d77\uff0c\u5c31\u662f\u9519\u8bef\u8f93\u51fa\u5c06\u4f1a\u548c\u6807\u51c6\u8f93\u51fa\u8f93\u51fa\u5230\u540c\u4e00\u4e2a\u5730\u65b9\uff0c\u4e0b\u9762\u9488\u5bf9\u4e24\u4e2a\u547d\u4ee4\u8fdb\u884c\u7b80\u5355\u7684\u8bf4\u660e \u547d\u4ee4 \u6807\u51c6\u8f93\u51fa \u9519\u8bef\u8f93\u51fa >/dev/null 2>&1 \u4e22\u5f03 \u4e22\u5f03 2>&1 >/dev/null \u4e22\u5f03 \u5c4f\u5e55 \u6211\u4eec\u7ecf\u5e38\u8bb2\u8fd9\u4e9b\u5185\u5bb9\u4e0enohup\u7ed3\u5408\u4f7f\u7528\u5c06\u5e94\u7528\u653e\u5230\u540e\u53f0\u542f\u52a8\uff0c\u6bd4\u5982 nohup java -jar xxxx.jar >/dev/null 2 > & 1 &","title":"Stdin,Stdout,Strerr"},{"location":"mds/linux/%E8%99%9A%E6%8B%9F%E5%8C%96/kvm/","text":"\u955c\u50cf\u5236\u4f5c \u00b6 \u5b89\u88c5 \u00b6 virt-install \\ --name = cd-ocg-b-vm-48-40-prometheus1 \\ --os-variant = rhel7 \\ --ram = 8192 \\ --vcpus = 4 \\ --disk path = /data/kvm/images/cd-ocg-b-vm-48-40-prometheus1.qcow2,format = qcow2,size = 12 ,bus = virtio \\ --accelerate --import --noautoconsole --vnc \u5f00\u542fCPU\u76f4\u901a\u4ee5\u53ca\u7f51\u7edc\u76f4\u901a\uff08SR-IOV\uff09 virt-install \\ --name = init_centos \\ --os-variant = rhel7 \\ --ram = 32768 \\ --cpu host-passthrough \\ --network network = passthrough_eno1,model = rtl8139 \\ --vcpus = 16 \\ --disk path = /data/kvm/images/centos7_mini_7.9.2003.qcow2,format = qcow2,size = 12 ,bus = virtio \\ --accelerate --import --noautoconsole --vnc","title":"KVM"},{"location":"mds/linux/%E8%99%9A%E6%8B%9F%E5%8C%96/kvm/#_1","text":"","title":"\u955c\u50cf\u5236\u4f5c"},{"location":"mds/linux/%E8%99%9A%E6%8B%9F%E5%8C%96/kvm/#_2","text":"virt-install \\ --name = cd-ocg-b-vm-48-40-prometheus1 \\ --os-variant = rhel7 \\ --ram = 8192 \\ --vcpus = 4 \\ --disk path = /data/kvm/images/cd-ocg-b-vm-48-40-prometheus1.qcow2,format = qcow2,size = 12 ,bus = virtio \\ --accelerate --import --noautoconsole --vnc \u5f00\u542fCPU\u76f4\u901a\u4ee5\u53ca\u7f51\u7edc\u76f4\u901a\uff08SR-IOV\uff09 virt-install \\ --name = init_centos \\ --os-variant = rhel7 \\ --ram = 32768 \\ --cpu host-passthrough \\ --network network = passthrough_eno1,model = rtl8139 \\ --vcpus = 16 \\ --disk path = /data/kvm/images/centos7_mini_7.9.2003.qcow2,format = qcow2,size = 12 ,bus = virtio \\ --accelerate --import --noautoconsole --vnc","title":"\u5b89\u88c5"},{"location":"mds/material/setup/changing_the_colors/","text":"","title":"\u989c\u8272\u53d8\u66f4"},{"location":"mds/monitor/prometheus/SNMP%E7%9B%91%E6%8E%A7/SNMPExporter/","text":"","title":"SNMP Exporter"},{"location":"mds/monitor/prometheus/SNMP%E7%9B%91%E6%8E%A7/configGenerator/","text":"","title":"Config\u751f\u6210\u5668"},{"location":"mds/monitor/prometheus/exporters/%E7%BC%96%E5%86%99exporter/","text":"","title":"\u7f16\u5199Exporter"},{"location":"mds/monitor/prometheus/operator/operator%E4%BB%8B%E7%BB%8D/describe/","text":"","title":"PrometheusOperator\u4ecb\u7ecd"},{"location":"mds/monitor/prometheus/rules/alertrules/","text":"AlertRules\u544a\u8b66\u89c4\u5219\u3002 \u9644\u5f55\u53c2\u8003 \u00b6 Awesome Prometheus alerts","title":"\u544a\u8b66\u89c4\u5219"},{"location":"mds/monitor/prometheus/rules/alertrules/#_1","text":"Awesome Prometheus alerts","title":"\u9644\u5f55\u53c2\u8003"},{"location":"mds/monitor/prometheus/rules/recordrules/","text":"","title":"\u8bb0\u5f55\u89c4\u5219"},{"location":"mds/monitor/prometheus/target/","text":"Prometheus\u5bf9\u63a5Consul \u00b6 \u53c2\u8003 Prometheus consul_sd_config","title":"Target\u914d\u7f6e"},{"location":"mds/monitor/prometheus/target/#prometheusconsul","text":"\u53c2\u8003 Prometheus consul_sd_config","title":"Prometheus\u5bf9\u63a5Consul"},{"location":"mds/monitor/prometheus/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/install/","text":"\u5b89\u88c5 \u00b6 cd /opt wget https://github.com/prometheus/prometheus/releases/download/v2.30.0/prometheus-2.30.0.linux-amd64.tar.gz tar xf prometheus-2.30.0.linux-amd64.tar.gz cp -ra prometheus-2.30.0.linux-amd64 /usr/local/prometheus groupadd prometheus useradd -g prometheus -M -s /sbin/nologin prometheus mkdir -p /usr/local/prometheus/data chown prometheus.prometheus -R /usr/local/prometheus # \u68c0\u6d4b\u914d\u7f6e\u6587\u4ef6\u662f\u5426\u5408\u6cd5 cd /usr/local/prometheus/ ./promtool check config prometheus.yml \u7f16\u8f91systemd\u542f\u52a8\u6587\u4ef6\uff0c\u6587\u4ef6\u4f4d\u7f6e\u4e3a /usr/lib/systemd/system/prometheus.service \uff0c\u5177\u4f53\u7684\u5185\u5bb9\u4e3a [ Unit ] Description = Prometheus Server Documentation = https://prometheus.io/docs/introduction/overview/ After = network-online.target [ Service ] User = prometheus Restart = on-failure Type = simple ExecStart = /usr/local/prometheus/prometheus \\ --config.file = /usr/local/prometheus/prometheus.yml \\ --storage.tsdb.path = /usr/local/prometheus/data \\ --storage.tsdb.retention.time = 30d \\ --web.enable-lifecycle \\ --web.enable-admin-api [ Install ] WantedBy = multi-user.target \u542f\u52a8prometheus systemctl daemon-reload systemctl start prometheus systemctl status prometheus systemctl enable prometheus \u63a5\u4e0b\u6765\u67e5\u770b\u542f\u52a8\u7684\u7aef\u53e3 # netstat -ntlp | grep 9090 tcp6 0 0 :::9090 :::* LISTEN 5398 /prometheus \u6700\u540e\u4e3a\u4e86\u907f\u514d\u4e0d\u80fd\u8bbf\u95ee\uff0c\u5728\u5bf9\u5e94\u7684iptables\u6dfb\u52a09090\u7684\u8bb0\u5f55 -A INPUT -p tcp -m state --state NEW -m tcp --dport 9090 -j ACCEPT \u521d\u59cb\u5316\u914d\u7f6e \u00b6 cd /usr/local/prometheus/ mkdir -p ./rules/ { alert_rules,record_rules } chown -R prometheus:prometheus ./rules # targets\u76ee\u5f55\u4e3b\u8981\u7528\u6765\u5206\u95e8\u522b\u7c7b\u7684\u4fdd\u5b58\u5404\u79cd\u7c7b\u578b\u7684targets\uff0c\u5f53\u7136\u4e0d\u4e00\u5b9a\u7528\u5f97\u4e0a mkdir targets && chown -R prometheus:prometheus ./targets","title":"Prometheus\u5b89\u88c5"},{"location":"mds/monitor/prometheus/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/install/#_1","text":"cd /opt wget https://github.com/prometheus/prometheus/releases/download/v2.30.0/prometheus-2.30.0.linux-amd64.tar.gz tar xf prometheus-2.30.0.linux-amd64.tar.gz cp -ra prometheus-2.30.0.linux-amd64 /usr/local/prometheus groupadd prometheus useradd -g prometheus -M -s /sbin/nologin prometheus mkdir -p /usr/local/prometheus/data chown prometheus.prometheus -R /usr/local/prometheus # \u68c0\u6d4b\u914d\u7f6e\u6587\u4ef6\u662f\u5426\u5408\u6cd5 cd /usr/local/prometheus/ ./promtool check config prometheus.yml \u7f16\u8f91systemd\u542f\u52a8\u6587\u4ef6\uff0c\u6587\u4ef6\u4f4d\u7f6e\u4e3a /usr/lib/systemd/system/prometheus.service \uff0c\u5177\u4f53\u7684\u5185\u5bb9\u4e3a [ Unit ] Description = Prometheus Server Documentation = https://prometheus.io/docs/introduction/overview/ After = network-online.target [ Service ] User = prometheus Restart = on-failure Type = simple ExecStart = /usr/local/prometheus/prometheus \\ --config.file = /usr/local/prometheus/prometheus.yml \\ --storage.tsdb.path = /usr/local/prometheus/data \\ --storage.tsdb.retention.time = 30d \\ --web.enable-lifecycle \\ --web.enable-admin-api [ Install ] WantedBy = multi-user.target \u542f\u52a8prometheus systemctl daemon-reload systemctl start prometheus systemctl status prometheus systemctl enable prometheus \u63a5\u4e0b\u6765\u67e5\u770b\u542f\u52a8\u7684\u7aef\u53e3 # netstat -ntlp | grep 9090 tcp6 0 0 :::9090 :::* LISTEN 5398 /prometheus \u6700\u540e\u4e3a\u4e86\u907f\u514d\u4e0d\u80fd\u8bbf\u95ee\uff0c\u5728\u5bf9\u5e94\u7684iptables\u6dfb\u52a09090\u7684\u8bb0\u5f55 -A INPUT -p tcp -m state --state NEW -m tcp --dport 9090 -j ACCEPT","title":"\u5b89\u88c5"},{"location":"mds/monitor/prometheus/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/install/#_2","text":"cd /usr/local/prometheus/ mkdir -p ./rules/ { alert_rules,record_rules } chown -R prometheus:prometheus ./rules # targets\u76ee\u5f55\u4e3b\u8981\u7528\u6765\u5206\u95e8\u522b\u7c7b\u7684\u4fdd\u5b58\u5404\u79cd\u7c7b\u578b\u7684targets\uff0c\u5f53\u7136\u4e0d\u4e00\u5b9a\u7528\u5f97\u4e0a mkdir targets && chown -R prometheus:prometheus ./targets","title":"\u521d\u59cb\u5316\u914d\u7f6e"},{"location":"mds/monitor/prometheus/%E7%9B%91%E6%8E%A7%E7%90%86%E8%AE%BA/%E9%BB%98%E8%AE%A4%E5%91%8A%E8%AD%A6%E7%AD%96%E7%95%A5/","text":"","title":"\u9ed8\u8ba4\u544a\u8b66\u7b56\u7565"},{"location":"mds/monitor/zabbix/zabbix%E4%B8%AD%E7%9A%84%E5%AE%8F/","text":"\u9644\u5f55\uff1a \u00b6 Zabbix4.0\u4ea7\u54c1\u624b\u518c\u4e2d\u6587\u7248 \u5b8f\u7684\u4f7f\u7528\u573a\u666f Zabbix5.0 \u7528\u6237\u81ea\u5b9a\u4e49\u5b8f\u7684\u4f7f\u7528\u573a\u666f Zabbix5.0 \u7528\u6237\u5b8f Zabbix3.0","title":"Zabbix\u5b8f"},{"location":"mds/monitor/zabbix/zabbix%E4%B8%AD%E7%9A%84%E5%AE%8F/#_1","text":"Zabbix4.0\u4ea7\u54c1\u624b\u518c\u4e2d\u6587\u7248 \u5b8f\u7684\u4f7f\u7528\u573a\u666f Zabbix5.0 \u7528\u6237\u81ea\u5b9a\u4e49\u5b8f\u7684\u4f7f\u7528\u573a\u666f Zabbix5.0 \u7528\u6237\u5b8f Zabbix3.0","title":"\u9644\u5f55\uff1a"},{"location":"mds/monitor/%E5%B8%B8%E7%94%A8/%E7%9B%91%E6%8E%A7%E6%95%85%E9%9A%9C%E6%A8%A1%E6%8B%9F/","text":"CPU\u5360\u7528\u6a21\u62df \u00b6 \u6a21\u62df\u9ad8CPU\u4f7f\u7528\u7387\uff0c\u5f15\u53d1\u6545\u969c\u544a\u8b66 \u6bd4\u5982\u8bf4\u4f7f\u7528python\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u6b7b\u5faa\u73af while True : pass \u6216\u8005\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u7684\u547d\u4ee4 cat /dev/urandom | gzip -9 > /dev/null \u5982\u679c\u4f60\u60f3\u8981\u66f4\u5927\u7684\u8d1f\u8377\uff0c\u6216\u8005\u7cfb\u7edf\u6709\u591a\u4e2a\u6838\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u538b\u7f29\u548c\u89e3\u538b\u5c31\u884c\u4e86\uff0c\u50cf\u8fd9\u6837\uff1a # \u6309\u4e0b CTRL+C \u6765\u7ec8\u6b62\u8fdb\u7a0b\u3002 cat /dev/urandom | gzip -9 | gzip -d | gzip -9 | gzip -d > /dev/null \u5185\u5b58\u5360\u7528\u6a21\u62df \u00b6 \u6a21\u62df\u5185\u5b58\u5360\u7528 \u4e0b\u9762\u547d\u4ee4\u4f1a\u51cf\u5c11\u53ef\u7528\u5185\u5b58\u7684\u603b\u91cf\u3002\u5b83\u662f\u901a\u8fc7\u5728\u5185\u5b58\u4e2d\u521b\u5efa\u6587\u4ef6\u7cfb\u7edf\u7136\u540e\u5f80\u91cc\u9762\u5199\u6587\u4ef6\u6765\u5b9e\u73b0\u7684\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u591a\u7684\u5185\u5b58\uff0c\u53ea\u9700\u8981\u5f80\u91cc\u9762\u5199\u5165\u66f4\u591a\u7684\u6587\u4ef6\u5c31\u884c\u4e86\u3002 mkdir testdir mount -t ramfs ramfs testdir \u7136\u540e\u6211\u4eec\u5207\u6362\u5230\u8fd9\u4e2a\u76ee\u5f55\u4e2d\u53bb\u5411testdir\u4e2d\u5199\u5165\u6570\u636e\u7684\u65f6\u5019\uff0c\u5c31\u76f8\u5f53\u4e8e\u5411\u5185\u5b58\u4e2d\u5199\u5165\u6570\u636e\u4e86\u3002 # bs\u8868\u793a\u5757\u5927\u5c0f\u3002\u53ef\u4ee5\u662f\u4efb\u4f55\u6570\u5b57\u540e\u9762\u63a5\u4e0a B\uff08\u8868\u793a\u5b57\u8282\uff09\uff0cK\uff08\u8868\u793a KB\uff09\uff0cM\uff08 \u8868\u793a MB\uff09\u6216\u8005 G\uff08\u8868\u793a GB\uff09\u3002 # count= \u8981\u5199\u591a\u5c11\u4e2a\u5757\u3002 dd if = /dev/zero of = ./file bs = 1M count = 7500 \u78c1\u76d8IO \u00b6 \u521b\u5efa\u78c1\u76d8 I/O \u7684\u65b9\u6cd5\u662f\u5148\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\uff0c\u7136\u540e\u4f7f\u7528 for \u5faa\u73af\u6765\u4e0d\u505c\u5730\u62f7\u8d1d\u5b83\u3002 \u4e0b\u9762\u4f7f\u7528\u547d\u4ee4 dd \u521b\u5efa\u4e86\u4e00\u4e2a\u5168\u662f\u96f6\u7684 1G \u5927\u5c0f\u7684\u6587\u4ef6\uff1a dd if = /dev/zero of = loadfile bs = 1M count = 1024 \u4e0b\u9762\u547d\u4ee4\u7528 for \u5faa\u73af\u6267\u884c 10 \u6b21\u64cd\u4f5c\u3002\u6bcf\u6b21\u90fd\u4f1a\u62f7\u8d1d loadfile \u6765\u8986\u76d6 loadfile1\uff1a for i in { 1 \u202610 } ; do cp loadfile loadfile1 ; done \u901a\u8fc7\u4fee\u6539 {1\u202610} \u4e2d\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6765\u8c03\u6574\u8fd0\u884c\u65f6\u95f4\u7684\u957f\u77ed\u3002\uff08LCTT \u8bd1\u6ce8\uff1a\u4f60\u7684 Linux \u7cfb\u7edf\u4e2d\u7684\u9ed8\u8ba4\u4f7f\u7528\u7684 cp \u547d\u4ee4\u5f88\u53ef\u80fd\u662f cp -i \u7684\u522b\u540d\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u8986\u5199\u4f1a\u63d0\u793a\u4f60\u8f93\u5165 y \u6765\u786e\u8ba4\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 -f\u53c2\u6570\u7684 cp \u547d\u4ee4\u6765\u8986\u76d6\u6b64\u884c\u4e3a\uff0c\u6216\u8005\u76f4\u63a5\u7528 /bin/cp \u547d\u4ee4\u3002\uff09 \u82e5\u4f60\u60f3\u8981\u4e00\u76f4\u8fd0\u884c\uff0c\u76f4\u5230\u6309\u4e0b CTRL+C \u6765\u505c\u6b62\uff0c\u5219\u8fd0\u884c\u4e0b\u9762\u547d\u4ee4\uff1a while true ; do cp loadfile loadfile1 ; done \u53c2\u8003\u6587\u4ef6 \u00b6 Linux\u7cfb\u7edf\u4e0b\u7b80\u5355\u6a21\u62df\u9ad8CPU\\\u9ad8\u5185\u5b58\\\u9ad8\u8d1f\u8f7d\u7684\u65b9\u6cd5","title":"\u76d1\u63a7\u6545\u969c\u6a21\u62df"},{"location":"mds/monitor/%E5%B8%B8%E7%94%A8/%E7%9B%91%E6%8E%A7%E6%95%85%E9%9A%9C%E6%A8%A1%E6%8B%9F/#cpu","text":"\u6a21\u62df\u9ad8CPU\u4f7f\u7528\u7387\uff0c\u5f15\u53d1\u6545\u969c\u544a\u8b66 \u6bd4\u5982\u8bf4\u4f7f\u7528python\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u6b7b\u5faa\u73af while True : pass \u6216\u8005\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u7684\u547d\u4ee4 cat /dev/urandom | gzip -9 > /dev/null \u5982\u679c\u4f60\u60f3\u8981\u66f4\u5927\u7684\u8d1f\u8377\uff0c\u6216\u8005\u7cfb\u7edf\u6709\u591a\u4e2a\u6838\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u538b\u7f29\u548c\u89e3\u538b\u5c31\u884c\u4e86\uff0c\u50cf\u8fd9\u6837\uff1a # \u6309\u4e0b CTRL+C \u6765\u7ec8\u6b62\u8fdb\u7a0b\u3002 cat /dev/urandom | gzip -9 | gzip -d | gzip -9 | gzip -d > /dev/null","title":"CPU\u5360\u7528\u6a21\u62df"},{"location":"mds/monitor/%E5%B8%B8%E7%94%A8/%E7%9B%91%E6%8E%A7%E6%95%85%E9%9A%9C%E6%A8%A1%E6%8B%9F/#_1","text":"\u6a21\u62df\u5185\u5b58\u5360\u7528 \u4e0b\u9762\u547d\u4ee4\u4f1a\u51cf\u5c11\u53ef\u7528\u5185\u5b58\u7684\u603b\u91cf\u3002\u5b83\u662f\u901a\u8fc7\u5728\u5185\u5b58\u4e2d\u521b\u5efa\u6587\u4ef6\u7cfb\u7edf\u7136\u540e\u5f80\u91cc\u9762\u5199\u6587\u4ef6\u6765\u5b9e\u73b0\u7684\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u591a\u7684\u5185\u5b58\uff0c\u53ea\u9700\u8981\u5f80\u91cc\u9762\u5199\u5165\u66f4\u591a\u7684\u6587\u4ef6\u5c31\u884c\u4e86\u3002 mkdir testdir mount -t ramfs ramfs testdir \u7136\u540e\u6211\u4eec\u5207\u6362\u5230\u8fd9\u4e2a\u76ee\u5f55\u4e2d\u53bb\u5411testdir\u4e2d\u5199\u5165\u6570\u636e\u7684\u65f6\u5019\uff0c\u5c31\u76f8\u5f53\u4e8e\u5411\u5185\u5b58\u4e2d\u5199\u5165\u6570\u636e\u4e86\u3002 # bs\u8868\u793a\u5757\u5927\u5c0f\u3002\u53ef\u4ee5\u662f\u4efb\u4f55\u6570\u5b57\u540e\u9762\u63a5\u4e0a B\uff08\u8868\u793a\u5b57\u8282\uff09\uff0cK\uff08\u8868\u793a KB\uff09\uff0cM\uff08 \u8868\u793a MB\uff09\u6216\u8005 G\uff08\u8868\u793a GB\uff09\u3002 # count= \u8981\u5199\u591a\u5c11\u4e2a\u5757\u3002 dd if = /dev/zero of = ./file bs = 1M count = 7500","title":"\u5185\u5b58\u5360\u7528\u6a21\u62df"},{"location":"mds/monitor/%E5%B8%B8%E7%94%A8/%E7%9B%91%E6%8E%A7%E6%95%85%E9%9A%9C%E6%A8%A1%E6%8B%9F/#io","text":"\u521b\u5efa\u78c1\u76d8 I/O \u7684\u65b9\u6cd5\u662f\u5148\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\uff0c\u7136\u540e\u4f7f\u7528 for \u5faa\u73af\u6765\u4e0d\u505c\u5730\u62f7\u8d1d\u5b83\u3002 \u4e0b\u9762\u4f7f\u7528\u547d\u4ee4 dd \u521b\u5efa\u4e86\u4e00\u4e2a\u5168\u662f\u96f6\u7684 1G \u5927\u5c0f\u7684\u6587\u4ef6\uff1a dd if = /dev/zero of = loadfile bs = 1M count = 1024 \u4e0b\u9762\u547d\u4ee4\u7528 for \u5faa\u73af\u6267\u884c 10 \u6b21\u64cd\u4f5c\u3002\u6bcf\u6b21\u90fd\u4f1a\u62f7\u8d1d loadfile \u6765\u8986\u76d6 loadfile1\uff1a for i in { 1 \u202610 } ; do cp loadfile loadfile1 ; done \u901a\u8fc7\u4fee\u6539 {1\u202610} \u4e2d\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6765\u8c03\u6574\u8fd0\u884c\u65f6\u95f4\u7684\u957f\u77ed\u3002\uff08LCTT \u8bd1\u6ce8\uff1a\u4f60\u7684 Linux \u7cfb\u7edf\u4e2d\u7684\u9ed8\u8ba4\u4f7f\u7528\u7684 cp \u547d\u4ee4\u5f88\u53ef\u80fd\u662f cp -i \u7684\u522b\u540d\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u8986\u5199\u4f1a\u63d0\u793a\u4f60\u8f93\u5165 y \u6765\u786e\u8ba4\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 -f\u53c2\u6570\u7684 cp \u547d\u4ee4\u6765\u8986\u76d6\u6b64\u884c\u4e3a\uff0c\u6216\u8005\u76f4\u63a5\u7528 /bin/cp \u547d\u4ee4\u3002\uff09 \u82e5\u4f60\u60f3\u8981\u4e00\u76f4\u8fd0\u884c\uff0c\u76f4\u5230\u6309\u4e0b CTRL+C \u6765\u505c\u6b62\uff0c\u5219\u8fd0\u884c\u4e0b\u9762\u547d\u4ee4\uff1a while true ; do cp loadfile loadfile1 ; done","title":"\u78c1\u76d8IO"},{"location":"mds/monitor/%E5%B8%B8%E7%94%A8/%E7%9B%91%E6%8E%A7%E6%95%85%E9%9A%9C%E6%A8%A1%E6%8B%9F/#_2","text":"Linux\u7cfb\u7edf\u4e0b\u7b80\u5355\u6a21\u62df\u9ad8CPU\\\u9ad8\u5185\u5b58\\\u9ad8\u8d1f\u8f7d\u7684\u65b9\u6cd5","title":"\u53c2\u8003\u6587\u4ef6"}]}